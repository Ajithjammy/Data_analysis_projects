<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20222.22.0812.0353                               -->
<workbook original-version='18.1' source-build='2022.2.1 (20222.22.0812.0353)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AccessibleZoneTabOrder.true...AccessibleZoneTabOrder />
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <_.fcp.SingleValuePerNestSorting.true...SingleValuePerNestSorting />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
    <ZoneBackgroundTransparency />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column caption='Top N' datatype='integer' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='10'>
        <calculation class='tableau' formula='10' />
        <range granularity='5' max='50' min='5' />
      </column>
      <column caption='Teams' datatype='string' name='[Top N (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Mumbai Indians&quot;'>
        <calculation class='tableau' formula='&quot;Mumbai Indians&quot;' />
        <members>
          <member value='&quot;NA&quot;' />
          <member value='&quot;Chennai Super Kings&quot;' />
          <member value='&quot;Deccan Chargers&quot;' />
          <member value='&quot;Delhi Daredevils&quot;' />
          <member value='&quot;Gujarat Lions&quot;' />
          <member value='&quot;Kings XI Punjab&quot;' />
          <member value='&quot;Kochi Tuskers Kerala&quot;' />
          <member value='&quot;Kolkata Knight Riders&quot;' />
          <member value='&quot;Mumbai Indians&quot;' />
          <member value='&quot;Pune Warriors&quot;' />
          <member value='&quot;Rajasthan Royals&quot;' />
          <member value='&quot;Rising Pune Supergiants&quot;' />
          <member value='&quot;Royal Challengers Bangalore&quot;' />
          <member value='&quot;Sunrisers Hyderabad&quot;' />
        </members>
      </column>
    </datasource>
    <datasource caption='matches.csv+ (Multiple Connections)' inline='true' name='federated.1cf7txx1i9gxrl1g6acyb1adgwp3' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='matches' name='textscan.0ryniyf0nya2pj133wpax0ya956d'>
            <connection class='textscan' directory='C:/Users/ajith/Downloads/IPL+Dataset/IPL Dataset' filename='matches.csv' password='' server='' />
          </named-connection>
          <named-connection caption='deliveries' name='textscan.13ohgfq0g0l43i186gbil1dal6t4'>
            <connection class='textscan' directory='C:/Users/ajith/Downloads/IPL+Dataset/IPL Dataset' filename='deliveries.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation join='inner' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[matches.csv].[id]' />
              <expression op='[deliveries.csv].[match_id]' />
            </expression>
          </clause>
          <relation connection='textscan.0ryniyf0nya2pj133wpax0ya956d' name='matches.csv' table='[matches#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_IN' separator=','>
              <column datatype='integer' name='id' ordinal='0' />
              <column datatype='integer' name='season' ordinal='1' />
              <column datatype='string' name='city' ordinal='2' />
              <column datatype='date' name='date' ordinal='3' />
              <column datatype='string' name='team1' ordinal='4' />
              <column datatype='string' name='team2' ordinal='5' />
              <column datatype='string' name='toss_winner' ordinal='6' />
              <column datatype='string' name='toss_decision' ordinal='7' />
              <column datatype='string' name='result' ordinal='8' />
              <column datatype='integer' name='dl_applied' ordinal='9' />
              <column datatype='string' name='winner' ordinal='10' />
              <column datatype='integer' name='win_by_runs' ordinal='11' />
              <column datatype='integer' name='win_by_wickets' ordinal='12' />
              <column datatype='string' name='player_of_match' ordinal='13' />
              <column datatype='string' name='venue' ordinal='14' />
              <column datatype='string' name='umpire1' ordinal='15' />
              <column datatype='string' name='umpire2' ordinal='16' />
              <column datatype='string' name='umpire3' ordinal='17' />
              <column datatype='string' name='home_team' ordinal='18' />
            </columns>
          </relation>
          <relation connection='textscan.13ohgfq0g0l43i186gbil1dal6t4' name='deliveries.csv' table='[deliveries#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_IN' separator=','>
              <column datatype='integer' name='match_id' ordinal='0' />
              <column datatype='integer' name='inning' ordinal='1' />
              <column datatype='string' name='batting_team' ordinal='2' />
              <column datatype='string' name='bowling_team' ordinal='3' />
              <column datatype='integer' name='over' ordinal='4' />
              <column datatype='integer' name='ball' ordinal='5' />
              <column datatype='string' name='batsman' ordinal='6' />
              <column datatype='string' name='non_striker' ordinal='7' />
              <column datatype='string' name='bowler' ordinal='8' />
              <column datatype='integer' name='is_super_over' ordinal='9' />
              <column datatype='integer' name='wide_runs' ordinal='10' />
              <column datatype='integer' name='bye_runs' ordinal='11' />
              <column datatype='integer' name='legbye_runs' ordinal='12' />
              <column datatype='integer' name='noball_runs' ordinal='13' />
              <column datatype='integer' name='penalty_runs' ordinal='14' />
              <column datatype='integer' name='batsman_runs' ordinal='15' />
              <column datatype='integer' name='extra_runs' ordinal='16' />
              <column datatype='integer' name='total_runs' ordinal='17' />
              <column datatype='string' name='player_dismissed' ordinal='18' />
              <column datatype='string' name='dismissal_kind' ordinal='19' />
              <column datatype='string' name='fielder' ordinal='20' />
            </columns>
          </relation>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation join='inner' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[matches.csv].[id]' />
              <expression op='[deliveries.csv].[match_id]' />
            </expression>
          </clause>
          <relation connection='textscan.0ryniyf0nya2pj133wpax0ya956d' name='matches.csv' table='[matches#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_IN' separator=','>
              <column datatype='integer' name='id' ordinal='0' />
              <column datatype='integer' name='season' ordinal='1' />
              <column datatype='string' name='city' ordinal='2' />
              <column datatype='date' name='date' ordinal='3' />
              <column datatype='string' name='team1' ordinal='4' />
              <column datatype='string' name='team2' ordinal='5' />
              <column datatype='string' name='toss_winner' ordinal='6' />
              <column datatype='string' name='toss_decision' ordinal='7' />
              <column datatype='string' name='result' ordinal='8' />
              <column datatype='integer' name='dl_applied' ordinal='9' />
              <column datatype='string' name='winner' ordinal='10' />
              <column datatype='integer' name='win_by_runs' ordinal='11' />
              <column datatype='integer' name='win_by_wickets' ordinal='12' />
              <column datatype='string' name='player_of_match' ordinal='13' />
              <column datatype='string' name='venue' ordinal='14' />
              <column datatype='string' name='umpire1' ordinal='15' />
              <column datatype='string' name='umpire2' ordinal='16' />
              <column datatype='string' name='umpire3' ordinal='17' />
              <column datatype='string' name='home_team' ordinal='18' />
            </columns>
          </relation>
          <relation connection='textscan.13ohgfq0g0l43i186gbil1dal6t4' name='deliveries.csv' table='[deliveries#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_IN' separator=','>
              <column datatype='integer' name='match_id' ordinal='0' />
              <column datatype='integer' name='inning' ordinal='1' />
              <column datatype='string' name='batting_team' ordinal='2' />
              <column datatype='string' name='bowling_team' ordinal='3' />
              <column datatype='integer' name='over' ordinal='4' />
              <column datatype='integer' name='ball' ordinal='5' />
              <column datatype='string' name='batsman' ordinal='6' />
              <column datatype='string' name='non_striker' ordinal='7' />
              <column datatype='string' name='bowler' ordinal='8' />
              <column datatype='integer' name='is_super_over' ordinal='9' />
              <column datatype='integer' name='wide_runs' ordinal='10' />
              <column datatype='integer' name='bye_runs' ordinal='11' />
              <column datatype='integer' name='legbye_runs' ordinal='12' />
              <column datatype='integer' name='noball_runs' ordinal='13' />
              <column datatype='integer' name='penalty_runs' ordinal='14' />
              <column datatype='integer' name='batsman_runs' ordinal='15' />
              <column datatype='integer' name='extra_runs' ordinal='16' />
              <column datatype='integer' name='total_runs' ordinal='17' />
              <column datatype='string' name='player_dismissed' ordinal='18' />
              <column datatype='string' name='dismissal_kind' ordinal='19' />
              <column datatype='string' name='fielder' ordinal='20' />
            </columns>
          </relation>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[matches.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;₹&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_IN&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[deliveries.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_GB&quot;</attribute>
              <attribute datatype='string' name='currency'>&quot;₹&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_IN&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>id</remote-name>
            <remote-type>20</remote-type>
            <local-name>[id]</local-name>
            <parent-name>[matches.csv]</parent-name>
            <remote-alias>id</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>season</remote-name>
            <remote-type>20</remote-type>
            <local-name>[season]</local-name>
            <parent-name>[matches.csv]</parent-name>
            <remote-alias>season</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>city</remote-name>
            <remote-type>129</remote-type>
            <local-name>[city]</local-name>
            <parent-name>[matches.csv]</parent-name>
            <remote-alias>city</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>date</remote-name>
            <remote-type>133</remote-type>
            <local-name>[date]</local-name>
            <parent-name>[matches.csv]</parent-name>
            <remote-alias>date</remote-alias>
            <ordinal>3</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>team1</remote-name>
            <remote-type>129</remote-type>
            <local-name>[team1]</local-name>
            <parent-name>[matches.csv]</parent-name>
            <remote-alias>team1</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>team2</remote-name>
            <remote-type>129</remote-type>
            <local-name>[team2]</local-name>
            <parent-name>[matches.csv]</parent-name>
            <remote-alias>team2</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>toss_winner</remote-name>
            <remote-type>129</remote-type>
            <local-name>[toss_winner]</local-name>
            <parent-name>[matches.csv]</parent-name>
            <remote-alias>toss_winner</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>toss_decision</remote-name>
            <remote-type>129</remote-type>
            <local-name>[toss_decision]</local-name>
            <parent-name>[matches.csv]</parent-name>
            <remote-alias>toss_decision</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>result</remote-name>
            <remote-type>129</remote-type>
            <local-name>[result]</local-name>
            <parent-name>[matches.csv]</parent-name>
            <remote-alias>result</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>dl_applied</remote-name>
            <remote-type>20</remote-type>
            <local-name>[dl_applied]</local-name>
            <parent-name>[matches.csv]</parent-name>
            <remote-alias>dl_applied</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>winner</remote-name>
            <remote-type>129</remote-type>
            <local-name>[winner]</local-name>
            <parent-name>[matches.csv]</parent-name>
            <remote-alias>winner</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>win_by_runs</remote-name>
            <remote-type>20</remote-type>
            <local-name>[win_by_runs]</local-name>
            <parent-name>[matches.csv]</parent-name>
            <remote-alias>win_by_runs</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>win_by_wickets</remote-name>
            <remote-type>20</remote-type>
            <local-name>[win_by_wickets]</local-name>
            <parent-name>[matches.csv]</parent-name>
            <remote-alias>win_by_wickets</remote-alias>
            <ordinal>12</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>player_of_match</remote-name>
            <remote-type>129</remote-type>
            <local-name>[player_of_match]</local-name>
            <parent-name>[matches.csv]</parent-name>
            <remote-alias>player_of_match</remote-alias>
            <ordinal>13</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>venue</remote-name>
            <remote-type>129</remote-type>
            <local-name>[venue]</local-name>
            <parent-name>[matches.csv]</parent-name>
            <remote-alias>venue</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>umpire1</remote-name>
            <remote-type>129</remote-type>
            <local-name>[umpire1]</local-name>
            <parent-name>[matches.csv]</parent-name>
            <remote-alias>umpire1</remote-alias>
            <ordinal>15</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>umpire2</remote-name>
            <remote-type>129</remote-type>
            <local-name>[umpire2]</local-name>
            <parent-name>[matches.csv]</parent-name>
            <remote-alias>umpire2</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>umpire3</remote-name>
            <remote-type>129</remote-type>
            <local-name>[umpire3]</local-name>
            <parent-name>[matches.csv]</parent-name>
            <remote-alias>umpire3</remote-alias>
            <ordinal>17</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>1</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>home_team</remote-name>
            <remote-type>129</remote-type>
            <local-name>[home_team]</local-name>
            <parent-name>[matches.csv]</parent-name>
            <remote-alias>home_team</remote-alias>
            <ordinal>18</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>match_id</remote-name>
            <remote-type>20</remote-type>
            <local-name>[match_id]</local-name>
            <parent-name>[deliveries.csv]</parent-name>
            <remote-alias>match_id</remote-alias>
            <ordinal>19</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>inning</remote-name>
            <remote-type>20</remote-type>
            <local-name>[inning]</local-name>
            <parent-name>[deliveries.csv]</parent-name>
            <remote-alias>inning</remote-alias>
            <ordinal>20</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>batting_team</remote-name>
            <remote-type>129</remote-type>
            <local-name>[batting_team]</local-name>
            <parent-name>[deliveries.csv]</parent-name>
            <remote-alias>batting_team</remote-alias>
            <ordinal>21</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>bowling_team</remote-name>
            <remote-type>129</remote-type>
            <local-name>[bowling_team]</local-name>
            <parent-name>[deliveries.csv]</parent-name>
            <remote-alias>bowling_team</remote-alias>
            <ordinal>22</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>over</remote-name>
            <remote-type>20</remote-type>
            <local-name>[over]</local-name>
            <parent-name>[deliveries.csv]</parent-name>
            <remote-alias>over</remote-alias>
            <ordinal>23</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ball</remote-name>
            <remote-type>20</remote-type>
            <local-name>[ball]</local-name>
            <parent-name>[deliveries.csv]</parent-name>
            <remote-alias>ball</remote-alias>
            <ordinal>24</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>batsman</remote-name>
            <remote-type>129</remote-type>
            <local-name>[batsman]</local-name>
            <parent-name>[deliveries.csv]</parent-name>
            <remote-alias>batsman</remote-alias>
            <ordinal>25</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>non_striker</remote-name>
            <remote-type>129</remote-type>
            <local-name>[non_striker]</local-name>
            <parent-name>[deliveries.csv]</parent-name>
            <remote-alias>non_striker</remote-alias>
            <ordinal>26</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>bowler</remote-name>
            <remote-type>129</remote-type>
            <local-name>[bowler]</local-name>
            <parent-name>[deliveries.csv]</parent-name>
            <remote-alias>bowler</remote-alias>
            <ordinal>27</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>is_super_over</remote-name>
            <remote-type>20</remote-type>
            <local-name>[is_super_over]</local-name>
            <parent-name>[deliveries.csv]</parent-name>
            <remote-alias>is_super_over</remote-alias>
            <ordinal>28</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>wide_runs</remote-name>
            <remote-type>20</remote-type>
            <local-name>[wide_runs]</local-name>
            <parent-name>[deliveries.csv]</parent-name>
            <remote-alias>wide_runs</remote-alias>
            <ordinal>29</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>bye_runs</remote-name>
            <remote-type>20</remote-type>
            <local-name>[bye_runs]</local-name>
            <parent-name>[deliveries.csv]</parent-name>
            <remote-alias>bye_runs</remote-alias>
            <ordinal>30</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>legbye_runs</remote-name>
            <remote-type>20</remote-type>
            <local-name>[legbye_runs]</local-name>
            <parent-name>[deliveries.csv]</parent-name>
            <remote-alias>legbye_runs</remote-alias>
            <ordinal>31</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>noball_runs</remote-name>
            <remote-type>20</remote-type>
            <local-name>[noball_runs]</local-name>
            <parent-name>[deliveries.csv]</parent-name>
            <remote-alias>noball_runs</remote-alias>
            <ordinal>32</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>penalty_runs</remote-name>
            <remote-type>20</remote-type>
            <local-name>[penalty_runs]</local-name>
            <parent-name>[deliveries.csv]</parent-name>
            <remote-alias>penalty_runs</remote-alias>
            <ordinal>33</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>batsman_runs</remote-name>
            <remote-type>20</remote-type>
            <local-name>[batsman_runs]</local-name>
            <parent-name>[deliveries.csv]</parent-name>
            <remote-alias>batsman_runs</remote-alias>
            <ordinal>34</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>extra_runs</remote-name>
            <remote-type>20</remote-type>
            <local-name>[extra_runs]</local-name>
            <parent-name>[deliveries.csv]</parent-name>
            <remote-alias>extra_runs</remote-alias>
            <ordinal>35</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>total_runs</remote-name>
            <remote-type>20</remote-type>
            <local-name>[total_runs]</local-name>
            <parent-name>[deliveries.csv]</parent-name>
            <remote-alias>total_runs</remote-alias>
            <ordinal>36</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>player_dismissed</remote-name>
            <remote-type>129</remote-type>
            <local-name>[player_dismissed]</local-name>
            <parent-name>[deliveries.csv]</parent-name>
            <remote-alias>player_dismissed</remote-alias>
            <ordinal>37</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>dismissal_kind</remote-name>
            <remote-type>129</remote-type>
            <local-name>[dismissal_kind]</local-name>
            <parent-name>[deliveries.csv]</parent-name>
            <remote-alias>dismissal_kind</remote-alias>
            <ordinal>38</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fielder</remote-name>
            <remote-type>129</remote-type>
            <local-name>[fielder]</local-name>
            <parent-name>[deliveries.csv]</parent-name>
            <remote-alias>fielder</remote-alias>
            <ordinal>39</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RGB' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Calculation1' datatype='integer' name='[Calculation_126100796409454592]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='RUNNING_SUM(SUM([total_runs]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Fours' datatype='integer' name='[Calculation_126100796409585665]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNT(IF [batsman_runs]=4 THEN 1 END)' />
      </column>
      <column caption='Sixes' datatype='integer' name='[Calculation_126100796410175490]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNT(IF [batsman_runs]=6 THEN 1 END)' />
      </column>
      <column caption='Fours_&amp;_Sixes' datatype='integer' name='[Calculation_126100796410920963]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Calculation_126100796409585665]+[Calculation_126100796410175490]' />
      </column>
      <column caption='Toss_Won' datatype='string' name='[Calculation_126100796415238152]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [toss_winner]=[team1] THEN &apos;Yes&apos;&#13;&#10;ELSE &apos;No&apos;&#13;&#10;END' />
      </column>
      <column caption='Toss_vs_Outcome' datatype='string' name='[Calculation_126100796416364553]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [toss_winner] = [winner] THEN &quot;Toss Winner Won&quot;&#13;&#10;ELSE &quot;Toss Winner Lost&quot;&#13;&#10;END' />
      </column>
      <column caption='Match_innings' datatype='string' name='[Calculation_126100796416733194]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='str([match_id]) + &quot;_&quot; + STR([inning])' />
      </column>
      <column caption='Losing Team' datatype='string' name='[Calculation_126100796417036299]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [team1]=[winner] THEN [team2]&#13;&#10;ELSEIF [team2]=[winner] THEN [team1]&#13;&#10;END' />
      </column>
      <column caption='First Bat/Field ' datatype='string' name='[Calculation_126100796418088973]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Calculation_126100796415238152]=&apos;Yes&apos; THEN [toss_decision]&#13;&#10;ELSEIF [Calculation_126100796415238152]=&apos;No&apos; AND [toss_decision] = &apos;bat&apos; THEN &apos;field&apos;&#13;&#10;ELSEIF [Calculation_126100796415238152]=&apos;No&apos; AND [toss_decision] = &apos;field&apos; THEN &apos;bat&apos;&#13;&#10;END' />
      </column>
      <column caption='Selected Team' datatype='string' name='[Calculation_126100796421103630]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [team1]=[Parameters].[Top N (copy)] OR [team2]=[Parameters].[Top N (copy)] THEN [Parameters].[Top N (copy)] END' />
      </column>
      <column caption='Home/Away' datatype='string' name='[Calculation_126100796421353487]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [home_team]=&quot;team1&quot; AND [Parameters].[Top N (copy)]=[team1] THEN &quot;Home&quot;&#13;&#10;ELSEIF [home_team]=&quot;team1&quot; AND [Parameters].[Top N (copy)]=[team2] THEN &quot;Away&quot;&#13;&#10;ELSEIF [home_team]=&quot;NA&quot; THEN &quot;NA&quot;&#13;&#10;ELSEIF [home_team]=&quot;team2&quot; AND [Parameters].[Top N (copy)]=[team2] THEN &quot;Home&quot;&#13;&#10;ELSEIF [home_team]=&quot;team2&quot; AND [Parameters].[Top N (copy)]=[team1] THEN &quot;Away&quot;&#13;&#10;END' />
      </column>
      <column caption='Win_Flag' datatype='string' name='[Calculation_126100796422586384]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Parameters].[Top N (copy)] = [winner] THEN &quot;Won&quot;&#13;&#10;ELSEIF [Parameters].[Top N (copy)] = [team1] OR [Parameters].[Top N (copy)]=[team2] THEN &quot;Lost&quot;&#13;&#10;END' />
      </column>
      <column caption='MatchesWonBySeason' datatype='integer' name='[Calculation_126100796423266321]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNT(IF [Calculation_126100796422586384]=&apos;Won&apos; THEN [id] END)' />
      </column>
      <column caption='No_Of_Wins' datatype='integer' name='[Calculation_126100796423479314]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNT(IF [Calculation_126100796422586384]=&apos;Won&apos; THEN [id] END)' />
      </column>
      <column caption='Win %' datatype='real' name='[Calculation_126100796423729171]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='COUNT(IF [Calculation_126100796422586384]=&quot;Won&quot; THEN [id] END)&#13;&#10;/&#13;&#10;COUNT(IF [Calculation_126100796422586384]=&quot;Won&quot; OR [Calculation_126100796422586384]=&quot;Lost&quot; THEN [id] END)' />
      </column>
      <_.fcp.ObjectModelTableType.true...column caption='matches.csv' datatype='table' name='[__tableau_internal_object_id__].[matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B]' role='measure' type='quantitative' />
      <column caption='Ball' datatype='integer' name='[ball]' role='measure' type='quantitative' />
      <column caption='Batsman' datatype='string' name='[batsman]' role='dimension' type='nominal' />
      <column caption='Batsman Runs' datatype='integer' name='[batsman_runs]' role='measure' type='quantitative' />
      <column caption='Batting Team' datatype='string' name='[batting_team]' role='dimension' type='nominal' />
      <column caption='Bowler' datatype='string' name='[bowler]' role='dimension' type='nominal' />
      <column caption='Bowling Team' datatype='string' name='[bowling_team]' role='dimension' type='nominal' />
      <column caption='Bye Runs' datatype='integer' name='[bye_runs]' role='measure' type='quantitative' />
      <column caption='City' datatype='string' name='[city]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
      <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
      <column caption='Dismissal Kind' datatype='string' name='[dismissal_kind]' role='dimension' type='nominal' />
      <column caption='Dl Applied' datatype='integer' name='[dl_applied]' role='measure' type='quantitative' />
      <column caption='Extra Runs' datatype='integer' name='[extra_runs]' role='measure' type='quantitative' />
      <column caption='Fielder' datatype='string' name='[fielder]' role='dimension' type='nominal' />
      <column caption='Home Team' datatype='string' name='[home_team]' role='dimension' type='nominal' />
      <column datatype='integer' name='[id]' role='dimension' type='quantitative' />
      <column caption='Inning' datatype='integer' name='[inning]' role='measure' type='quantitative' />
      <column caption='Is Super Over' datatype='integer' name='[is_super_over]' role='measure' type='quantitative' />
      <column caption='Legbye Runs' datatype='integer' name='[legbye_runs]' role='measure' type='quantitative' />
      <column caption='Match Id' datatype='integer' name='[match_id]' role='dimension' type='ordinal' />
      <column caption='Noball Runs' datatype='integer' name='[noball_runs]' role='measure' type='quantitative' />
      <column caption='Non Striker' datatype='string' name='[non_striker]' role='dimension' type='nominal' />
      <column caption='Over' datatype='integer' name='[over]' role='measure' type='quantitative' />
      <column caption='Penalty Runs' datatype='integer' name='[penalty_runs]' role='measure' type='quantitative' />
      <column caption='Player Dismissed' datatype='string' name='[player_dismissed]' role='dimension' type='nominal' />
      <column caption='Player Of Match' datatype='string' name='[player_of_match]' role='dimension' type='nominal' />
      <column caption='Result' datatype='string' name='[result]' role='dimension' type='nominal' />
      <column caption='Season' datatype='integer' name='[season]' role='measure' type='quantitative' />
      <column caption='Team1' datatype='string' name='[team1]' role='dimension' type='nominal' />
      <column caption='Team2' datatype='string' name='[team2]' role='dimension' type='nominal' />
      <column caption='Toss Decision' datatype='string' name='[toss_decision]' role='dimension' type='nominal' />
      <column caption='Toss Winner' datatype='string' name='[toss_winner]' role='dimension' type='nominal' />
      <column caption='Total Runs' datatype='integer' name='[total_runs]' role='measure' type='quantitative' />
      <column caption='Umpire1' datatype='string' name='[umpire1]' role='dimension' type='nominal' />
      <column caption='Umpire2' datatype='string' name='[umpire2]' role='dimension' type='nominal' />
      <column caption='Umpire3' datatype='string' name='[umpire3]' role='dimension' type='nominal' />
      <column caption='Venue' datatype='string' name='[venue]' role='dimension' type='nominal' />
      <column caption='Wide Runs' datatype='integer' name='[wide_runs]' role='measure' type='quantitative' />
      <column caption='Win By Runs' datatype='integer' name='[win_by_runs]' role='measure' type='quantitative' />
      <column aggregation='Sum' caption='Win By Wickets' datatype='integer' name='[win_by_wickets]' role='dimension' type='quantitative' />
      <column caption='Winner' datatype='string' name='[winner]' role='dimension' type='nominal' />
      <column-instance column='[Calculation_126100796416364553]' derivation='None' name='[none:Calculation_126100796416364553:nk]' pivot='key' type='nominal' />
      <column-instance column='[batsman]' derivation='None' name='[none:batsman:nk]' pivot='key' type='nominal' />
      <column-instance column='[batting_team]' derivation='None' name='[none:batting_team:nk]' pivot='key' type='nominal' />
      <column-instance column='[Calculation_126100796409585665]' derivation='User' name='[usr:Calculation_126100796409585665:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_126100796410175490]' derivation='User' name='[usr:Calculation_126100796410175490:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_126100796410920963]' derivation='User' name='[usr:Calculation_126100796410920963:qk]' pivot='key' type='quantitative' />
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[usr:Calculation_126100796409585665:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[usr:Calculation_126100796410920963:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1cf7txx1i9gxrl1g6acyb1adgwp3]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[usr:Calculation_126100796410175490:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:batsman:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Ankit Sharma&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;BE Hendricks&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;DS Kulkarni&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;DT Patil&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;IR Jaggi&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;JEC Franklin&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kamran Khan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;M Rawat&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Mandeep Singh&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;MEK Hussey&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;PP Chawla&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;RD Chahar&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;RE van der Merwe&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;RR Raje&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;S Anirudha&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;S Gopal&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;S Sriram&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;SK Trivedi&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;SN Khan&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;SP Narine&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;SS Iyer&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;T Thushara&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;A Chandila&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;A Mithun&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;A Symonds&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;AB de Villiers&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;AG Paunikar&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;AM Rahane&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;AR Bawne&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;AS Raut&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;C de Grandhomme&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;DT Christian&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;ER Dwivedi&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;F Behardien&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;FH Edwards&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Imran Tahir&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;M Kaif&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;M Manhas&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;M Muralitharan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;NJ Rimmington&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;NM Coulter-Nile&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;RR Pant&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;SB Styris&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;SC Ganguly&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;SE Bond&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;YS Chahal&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;AD Mathews&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;AF Milne&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;AP Tare&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;D Salunkhe&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;DAJ Bracewell&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;J Yadav&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;JH Kallis&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kuldeep Yadav&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;M Morkel&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;MA Khote&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;MC Henriques&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;MC Juneja&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;ML Hayden&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Mohammad Hafeez&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;MS Dhoni&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;NJ Maddinson&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;PJ Sangwan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;PM Sarvesh Kumar&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;RG Sharma&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;S Aravind&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;SM Harwood&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;SM Pollock&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;SW Billings&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;VVS Laxman&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;G Gambhir&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;A Chopra&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;A Choudhary&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;A Kumble&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;CJ McKay&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;I Malhotra&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;JD Ryder&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;JP Duminy&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;JP Faulkner&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;KV Sharma&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;LPC Silva&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;M Ashwin&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;MP Stoinis&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;MV Boucher&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Niraj Patel&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;S Badree&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;S Vidyut&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Shoaib Malik&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;SL Malinga&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;SN Thakur&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;SS Tiwary&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;U Kaul&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;WA Mota&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;YK Pathan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;AA Jhunjhunwala&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;AB Agarkar&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;AR Patel&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;BMAJ Mendis&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;DJ Bravo&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;DPMD Jayawardene&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;EJG Morgan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;GB Hogg&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Ishan Kishan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;J Suchith&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;JDP Oram&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;KP Appanna&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;M Kartik&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;MM Patel&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;RG More&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;S Nadeem&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;SA Abbott&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sachin Baby&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;SB Jakati&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;SM Katich&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Sohail Tanvir&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;TA Boult&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;B Laughlin&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;BA Stokes&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;BJ Rohrer&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;CJ Anderson&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;DM Bravo&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;HV Patel&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Jaskaran Singh&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;M Ntini&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;M Vijay&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;MDKJ Perera&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Misbah-ul-Haq&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;MJ Clarke&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;MJ Lumb&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;P Dogra&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;PP Ojha&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;PV Tambe&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;R Dravid&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;RJ Peterson&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;SMSM Senanayake&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Sunny Singh&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;TM Dilshan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;TM Head&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Y Venugopal Rao&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;V Kohli&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;AB McDonald&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;AN Ghosh&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;AP Dole&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;BR Dunk&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;CA Lynn&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;DE Bollinger&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;DP Nannes&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;DS Lehmann&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;JA Morkel&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Kamran Akmal&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;KJ Abbott&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;MA Starc&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;MS Wade&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;RA Jadeja&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;SB Joshi&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;SE Marsh&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;TG Southee&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;TL Suman&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;UBT Chand&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;VRV Singh&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;W Jaffer&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Y Nagar&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;YA Abdulla&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;A Singh&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;AA Bilakhia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;AP Majumdar&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;AS Rajpoot&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Azhar Mahmood&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bipul Sharma&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;CR Brathwaite&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;DB Das&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;GJ Maxwell&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;H Das&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;I Sharma&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;JC Buttler&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;JJ Bumrah&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Joginder Sharma&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;MA Agarwal&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;MJ Guptill&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;NL McCullum&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;P Awana&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;PA Patel&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;RR Powar&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Shahid Afridi&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Shoaib Ahmed&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;AD Nath&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;AS Yadav&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Basil Thampi&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;C Madan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;D Kalyankrishna&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;HM Amla&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Iqbal Abdulla&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Karanveer Singh&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mohammad Asif&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;MR Marsh&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;MS Gony&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;N Rana&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;P Negi&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;R Dhawan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;S Dhawan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;S Narwal&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;S Randiv&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;SP Fleming&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;ST Jayasuriya&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;TS Mills&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Washington Sundar&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;WP Saha&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Yashpal Singh&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;AB Barath&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;AT Rayudu&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;BAW Mendis&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;BCJ Cutting&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;DNT Zoysa&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;J Arunkumar&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;JD Unadkat&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;K Goel&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;KH Pandya&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;KK Nair&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;LR Shukla&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;LRPL Taylor&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;MM Sharma&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;MN Samuels&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;P Sahu&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;PJ Cummins&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;PSP Handscomb&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;R Bhatia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;R Bishnoi&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Rashid Khan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;S Chanderpaul&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Sunny Gupta&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;A Flintoff&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;A Mukund&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;AA Chavan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;AC Blizzard&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Anureet Singh&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;CK Kapugedera&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;DB Ravi Teja&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;DW Steyn&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;J Theron&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;KP Pietersen&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;M de Lange&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;MD Mishra&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Mohammed Shami&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;NV Ojha&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;R McLaren&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;S Kaul&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Shakib Al Hasan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;SP Jackson&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;SS Shaikh&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;STR Binny&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;TR Birt&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;V Pratap Singh&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;V Sehwag&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;A Zampa&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;AB Dinda&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;AD Russell&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;AJ Tye&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;B Sumanth&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;CM Gautam&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;CRD Fernando&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;J Botha&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;K Upadhyay&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;KK Cooper&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;M Vohra&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Mashrafe Mortaza&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;OA Shah&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;RJ Quiney&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;RR Rossouw&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;S Kaushik&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Salman Butt&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;SPD Smith&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;SR Watson&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;T Henderson&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;UT Yadav&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;VS Yeligati&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;WD Parnell&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;A Nehra&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;AG Murtaza&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;AUK Pathan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;C Munro&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;CA Ingram&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;DA Miller&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;DJ Muthuswami&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Harbhajan Singh&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;JJ Roy&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;KC Cariappa&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;KD Karthik&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Mohammad Nabi&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;PC Valthaty&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;PD Collingwood&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;R Vinay Kumar&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;RE Levi&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;RN ten Doeschate&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;RS Bopara&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;S Sreesanth&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;S Tyagi&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;UA Birla&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;UT Khawaja&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;X Thalaivan Sargunam&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ankit Soni&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;B Lee&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;CA Pujara&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;DJ Hooda&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;DJ Thornely&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;DL Chahar&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;DL Vettori&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;DP Vijaykumar&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;GJ Bailey&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Harmeet Singh&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;KMDN Kulasekara&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;L Ronchi&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;MF Maharoof&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;MS Bisla&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;ND Doshi&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;S Badrinath&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;S Rana&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;SB Wagh&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Umar Gul&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;VS Malik&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Younis Khan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Yuvraj Singh&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;YV Takawale&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;AC Voges&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;AJ Finch&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;BB Samantray&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;C Nanda&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;DA Warner&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;DJ Hussey&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;DJG Sammy&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;GD McGrath&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;GH Vihari&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;JO Holder&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;JR Hopes&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;KM Jadhav&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;KS Williamson&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;L Ablish&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;LA Carseldine&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;MJ McClenaghan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;R Rampaul&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;RR Bhatkal&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sandeep Sharma&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;SW Tait&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;T Taibu&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;TD Paine&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;VH Zol&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;RV Uthappa&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;AD Mascarenhas&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;B Chipli&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;BB Sran&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;DH Yagnik&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;DR Martyn&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;JE Taylor&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;KB Arun Karthik&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;LJ Wright&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;LMP Simmons&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;MK Pandey&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;N Saini&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;NLTC Perera&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Q de Kock&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;R Ninan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;R Shukla&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;RJ Harris&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;RP Singh&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;RS Sodhi&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;SA Asnodkar&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;SB Bangar&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;SD Chitnis&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Swapnil Singh&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;A Uniyal&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;AM Nayar&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;AN Ahmed&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;BA Bhatt&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;CH Gayle&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;CJ Ferguson&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;CL White&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;D Wiese&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Harpreet Singh&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;HH Pandya&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;J Syed Mohammad&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;JJ van der Wath&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;KW Richardson&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;MN van Wyk&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;NS Naik&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;P Kumar&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;P Parameswaran&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;R Sathish&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;RR Sarwan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Shoaib Akhtar&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;SR Tendulkar&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;SV Samson&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;V Shankar&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;A Ashish Reddy&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;AA Noffke&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;AC Thomas&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;AL Menaria&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Anirudh Singh&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;B Akhil&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;BJ Haddin&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;CH Morris&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;D du Preez&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;DJ Jacobs&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;DR Smith&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;FY Fazal&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;IK Pathan&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;KAJ Roach&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;KL Rahul&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;MK Tiwary&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Mohammad Ashraful&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;PA Reddy&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;RV Gomez&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;S Ladda&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;T Kohli&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;VY Mahesh&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;WPUJC Vaas&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;A Mishra&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;B Kumar&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;BB McCullum&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;CJ Jordan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;F du Plessis&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;GC Smith&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;GR Napier&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Gurkeerat Singh&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;K Rabada&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;KC Sangakkara&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;LH Ferguson&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;MG Johnson&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;PR Shah&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;R Ashwin&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;R Sharma&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;R Tewatia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;RA Tripathi&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;RS Gavaskar&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Shivam Sharma&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;TM Srivastava&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Vishnu Vinod&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;VR Aaron&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Y Gnaneswara Rao&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;SK Raina&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Abdur Razzak&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;AC Gilchrist&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;BJ Hodge&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;CK Langeveldt&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;CR Woakes&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;DJ Harris&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;HH Gibbs&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;IC Pandey&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;JDS Neesham&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;JM Kemp&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;KA Pollard&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;L Balaji&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;LA Pomersbach&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;M Klinger&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Pankaj Singh&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Parvez Rasool&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;RT Ponting&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;S Sohal&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;SA Yadav&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;SJ Srivastava&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;SK Warne&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;SP Goswami&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Z Khan&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='shape' field='[none:Calculation_126100796416364553:nk]' type='shape'>
            <map to='circle'>
              <bucket>&quot;Toss Winner Lost&quot;</bucket>
            </map>
            <map to='square'>
              <bucket>&quot;Toss Winner Won&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:batting_team:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Pune Warriors&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Chennai Super Kings&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Kings XI Punjab&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sunrisers Hyderabad&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Rajasthan Royals&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Kochi Tuskers Kerala&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Deccan Chargers&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kolkata Knight Riders&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Rising Pune Supergiants&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Mumbai Indians&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Delhi Daredevils&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Royal Challengers Bangalore&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Gujarat Lions&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;India&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Teams' datatype='string' name='[Top N (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Mumbai Indians&quot;'>
          <calculation class='tableau' formula='&quot;Mumbai Indians&quot;' />
        </column>
      </datasource-dependencies>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='matches.csv' id='matches.csv_AFC4B4B741DA46C2A87CCE01C395CF9B'>
            <properties context=''>
              <relation join='inner' type='join'>
                <clause type='join'>
                  <expression op='='>
                    <expression op='[matches.csv].[id]' />
                    <expression op='[deliveries.csv].[match_id]' />
                  </expression>
                </clause>
                <relation connection='textscan.0ryniyf0nya2pj133wpax0ya956d' name='matches.csv' table='[matches#csv]' type='table'>
                  <columns character-set='UTF-8' header='yes' locale='en_IN' separator=','>
                    <column datatype='integer' name='id' ordinal='0' />
                    <column datatype='integer' name='season' ordinal='1' />
                    <column datatype='string' name='city' ordinal='2' />
                    <column datatype='date' name='date' ordinal='3' />
                    <column datatype='string' name='team1' ordinal='4' />
                    <column datatype='string' name='team2' ordinal='5' />
                    <column datatype='string' name='toss_winner' ordinal='6' />
                    <column datatype='string' name='toss_decision' ordinal='7' />
                    <column datatype='string' name='result' ordinal='8' />
                    <column datatype='integer' name='dl_applied' ordinal='9' />
                    <column datatype='string' name='winner' ordinal='10' />
                    <column datatype='integer' name='win_by_runs' ordinal='11' />
                    <column datatype='integer' name='win_by_wickets' ordinal='12' />
                    <column datatype='string' name='player_of_match' ordinal='13' />
                    <column datatype='string' name='venue' ordinal='14' />
                    <column datatype='string' name='umpire1' ordinal='15' />
                    <column datatype='string' name='umpire2' ordinal='16' />
                    <column datatype='string' name='umpire3' ordinal='17' />
                    <column datatype='string' name='home_team' ordinal='18' />
                  </columns>
                </relation>
                <relation connection='textscan.13ohgfq0g0l43i186gbil1dal6t4' name='deliveries.csv' table='[deliveries#csv]' type='table'>
                  <columns character-set='UTF-8' header='yes' locale='en_IN' separator=','>
                    <column datatype='integer' name='match_id' ordinal='0' />
                    <column datatype='integer' name='inning' ordinal='1' />
                    <column datatype='string' name='batting_team' ordinal='2' />
                    <column datatype='string' name='bowling_team' ordinal='3' />
                    <column datatype='integer' name='over' ordinal='4' />
                    <column datatype='integer' name='ball' ordinal='5' />
                    <column datatype='string' name='batsman' ordinal='6' />
                    <column datatype='string' name='non_striker' ordinal='7' />
                    <column datatype='string' name='bowler' ordinal='8' />
                    <column datatype='integer' name='is_super_over' ordinal='9' />
                    <column datatype='integer' name='wide_runs' ordinal='10' />
                    <column datatype='integer' name='bye_runs' ordinal='11' />
                    <column datatype='integer' name='legbye_runs' ordinal='12' />
                    <column datatype='integer' name='noball_runs' ordinal='13' />
                    <column datatype='integer' name='penalty_runs' ordinal='14' />
                    <column datatype='integer' name='batsman_runs' ordinal='15' />
                    <column datatype='integer' name='extra_runs' ordinal='16' />
                    <column datatype='integer' name='total_runs' ordinal='17' />
                    <column datatype='string' name='player_dismissed' ordinal='18' />
                    <column datatype='string' name='dismissal_kind' ordinal='19' />
                    <column datatype='string' name='fielder' ordinal='20' />
                  </columns>
                </relation>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <actions>
    <action caption='Highlight 1 (generated)' name='[Action1_E13FA737D3A14130AE7FDB3C4786AB04]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='Toss_vs_Outcome' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Toss_vs_Outcome' />
        <param name='target' value='Toss_vs_Outcome' />
      </command>
    </action>
    <action caption='Highlight 2 (generated)' name='[Action2_64F275462DF044BD8230BB492954FA08]'>
      <activation auto-clear='true' type='on-select' />
      <source dashboard='Match Statistics' type='sheet' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Toss_vs_Outcome' />
        <param name='target' value='Match Statistics' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Biggest Wins by Runs'>
      <table>
        <view>
          <datasources>
            <datasource caption='matches.csv+ (Multiple Connections)' name='federated.1cf7txx1i9gxrl1g6acyb1adgwp3' />
          </datasources>
          <datasource-dependencies datasource='federated.1cf7txx1i9gxrl1g6acyb1adgwp3'>
            <column caption='Losing Team' datatype='string' name='[Calculation_126100796417036299]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [team1]=[winner] THEN [team2]&#13;&#10;ELSEIF [team2]=[winner] THEN [team1]&#13;&#10;END' />
            </column>
            <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column datatype='integer' name='[id]' role='dimension' type='quantitative' />
            <column-instance column='[win_by_runs]' derivation='Max' name='[max:win_by_runs:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_126100796417036299]' derivation='None' name='[none:Calculation_126100796417036299:nk]' pivot='key' type='nominal' />
            <column-instance column='[id]' derivation='None' name='[none:id:ok]' pivot='key' type='ordinal' />
            <column-instance column='[winner]' derivation='None' name='[none:winner:nk]' pivot='key' type='nominal' />
            <column caption='Team1' datatype='string' name='[team1]' role='dimension' type='nominal' />
            <column caption='Team2' datatype='string' name='[team2]' role='dimension' type='nominal' />
            <column caption='Win By Runs' datatype='integer' name='[win_by_runs]' role='measure' type='quantitative' />
            <column caption='Winner' datatype='string' name='[winner]' role='dimension' type='nominal' />
            <column-instance column='[date]' derivation='Year' name='[yr:date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796417036299:nk]'>
            <groupfilter function='level-members' level='[none:Calculation_126100796417036299:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:id:ok]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:id:ok]' member='1' />
              <groupfilter function='member' level='[none:id:ok]' member='2' />
              <groupfilter function='member' level='[none:id:ok]' member='3' />
              <groupfilter function='member' level='[none:id:ok]' member='4' />
              <groupfilter function='member' level='[none:id:ok]' member='5' />
              <groupfilter function='member' level='[none:id:ok]' member='6' />
              <groupfilter function='member' level='[none:id:ok]' member='7' />
              <groupfilter function='member' level='[none:id:ok]' member='8' />
              <groupfilter function='member' level='[none:id:ok]' member='9' />
              <groupfilter function='member' level='[none:id:ok]' member='10' />
              <groupfilter function='member' level='[none:id:ok]' member='11' />
              <groupfilter function='member' level='[none:id:ok]' member='12' />
              <groupfilter function='member' level='[none:id:ok]' member='14' />
              <groupfilter function='member' level='[none:id:ok]' member='15' />
              <groupfilter function='member' level='[none:id:ok]' member='16' />
              <groupfilter function='member' level='[none:id:ok]' member='17' />
              <groupfilter function='member' level='[none:id:ok]' member='18' />
              <groupfilter function='member' level='[none:id:ok]' member='19' />
              <groupfilter function='member' level='[none:id:ok]' member='20' />
              <groupfilter function='member' level='[none:id:ok]' member='21' />
              <groupfilter function='member' level='[none:id:ok]' member='22' />
              <groupfilter function='member' level='[none:id:ok]' member='24' />
              <groupfilter function='member' level='[none:id:ok]' member='25' />
              <groupfilter function='member' level='[none:id:ok]' member='26' />
              <groupfilter function='member' level='[none:id:ok]' member='27' />
              <groupfilter function='member' level='[none:id:ok]' member='28' />
              <groupfilter function='member' level='[none:id:ok]' member='29' />
              <groupfilter function='member' level='[none:id:ok]' member='31' />
              <groupfilter function='member' level='[none:id:ok]' member='32' />
              <groupfilter function='member' level='[none:id:ok]' member='33' />
              <groupfilter function='member' level='[none:id:ok]' member='34' />
              <groupfilter function='member' level='[none:id:ok]' member='35' />
              <groupfilter function='member' level='[none:id:ok]' member='36' />
              <groupfilter function='member' level='[none:id:ok]' member='37' />
              <groupfilter function='member' level='[none:id:ok]' member='38' />
              <groupfilter function='member' level='[none:id:ok]' member='39' />
              <groupfilter function='member' level='[none:id:ok]' member='40' />
              <groupfilter function='member' level='[none:id:ok]' member='41' />
              <groupfilter function='member' level='[none:id:ok]' member='42' />
              <groupfilter function='member' level='[none:id:ok]' member='43' />
              <groupfilter function='member' level='[none:id:ok]' member='44' />
              <groupfilter function='member' level='[none:id:ok]' member='45' />
              <groupfilter function='member' level='[none:id:ok]' member='47' />
              <groupfilter function='member' level='[none:id:ok]' member='48' />
              <groupfilter function='member' level='[none:id:ok]' member='49' />
              <groupfilter function='member' level='[none:id:ok]' member='50' />
              <groupfilter function='member' level='[none:id:ok]' member='51' />
              <groupfilter function='member' level='[none:id:ok]' member='52' />
              <groupfilter function='member' level='[none:id:ok]' member='53' />
              <groupfilter function='member' level='[none:id:ok]' member='54' />
              <groupfilter function='member' level='[none:id:ok]' member='55' />
              <groupfilter function='member' level='[none:id:ok]' member='56' />
              <groupfilter function='member' level='[none:id:ok]' member='57' />
              <groupfilter function='member' level='[none:id:ok]' member='58' />
              <groupfilter function='member' level='[none:id:ok]' member='59' />
              <groupfilter function='member' level='[none:id:ok]' member='60' />
              <groupfilter function='member' level='[none:id:ok]' member='61' />
              <groupfilter function='member' level='[none:id:ok]' member='62' />
              <groupfilter function='member' level='[none:id:ok]' member='63' />
              <groupfilter function='member' level='[none:id:ok]' member='64' />
              <groupfilter function='member' level='[none:id:ok]' member='65' />
              <groupfilter function='member' level='[none:id:ok]' member='66' />
              <groupfilter function='member' level='[none:id:ok]' member='67' />
              <groupfilter function='member' level='[none:id:ok]' member='68' />
              <groupfilter function='member' level='[none:id:ok]' member='69' />
              <groupfilter function='member' level='[none:id:ok]' member='70' />
              <groupfilter function='member' level='[none:id:ok]' member='71' />
              <groupfilter function='member' level='[none:id:ok]' member='72' />
              <groupfilter function='member' level='[none:id:ok]' member='73' />
              <groupfilter function='member' level='[none:id:ok]' member='74' />
              <groupfilter function='member' level='[none:id:ok]' member='75' />
              <groupfilter function='member' level='[none:id:ok]' member='76' />
              <groupfilter function='member' level='[none:id:ok]' member='77' />
              <groupfilter function='member' level='[none:id:ok]' member='78' />
              <groupfilter function='member' level='[none:id:ok]' member='79' />
              <groupfilter function='member' level='[none:id:ok]' member='80' />
              <groupfilter function='member' level='[none:id:ok]' member='81' />
              <groupfilter function='member' level='[none:id:ok]' member='82' />
              <groupfilter function='member' level='[none:id:ok]' member='83' />
              <groupfilter function='member' level='[none:id:ok]' member='84' />
              <groupfilter function='member' level='[none:id:ok]' member='85' />
              <groupfilter function='member' level='[none:id:ok]' member='86' />
              <groupfilter function='member' level='[none:id:ok]' member='87' />
              <groupfilter function='member' level='[none:id:ok]' member='88' />
              <groupfilter function='member' level='[none:id:ok]' member='89' />
              <groupfilter function='member' level='[none:id:ok]' member='90' />
              <groupfilter function='member' level='[none:id:ok]' member='91' />
              <groupfilter function='member' level='[none:id:ok]' member='92' />
              <groupfilter function='member' level='[none:id:ok]' member='93' />
              <groupfilter function='member' level='[none:id:ok]' member='94' />
              <groupfilter function='member' level='[none:id:ok]' member='95' />
              <groupfilter function='member' level='[none:id:ok]' member='96' />
              <groupfilter function='member' level='[none:id:ok]' member='97' />
              <groupfilter function='member' level='[none:id:ok]' member='98' />
              <groupfilter function='member' level='[none:id:ok]' member='99' />
              <groupfilter function='member' level='[none:id:ok]' member='100' />
              <groupfilter function='member' level='[none:id:ok]' member='101' />
              <groupfilter function='member' level='[none:id:ok]' member='102' />
              <groupfilter function='member' level='[none:id:ok]' member='103' />
              <groupfilter function='member' level='[none:id:ok]' member='104' />
              <groupfilter function='member' level='[none:id:ok]' member='105' />
              <groupfilter function='member' level='[none:id:ok]' member='106' />
              <groupfilter function='member' level='[none:id:ok]' member='107' />
              <groupfilter function='member' level='[none:id:ok]' member='108' />
              <groupfilter function='member' level='[none:id:ok]' member='109' />
              <groupfilter function='member' level='[none:id:ok]' member='110' />
              <groupfilter function='member' level='[none:id:ok]' member='111' />
              <groupfilter function='member' level='[none:id:ok]' member='112' />
              <groupfilter function='member' level='[none:id:ok]' member='113' />
              <groupfilter function='member' level='[none:id:ok]' member='114' />
              <groupfilter function='member' level='[none:id:ok]' member='115' />
              <groupfilter function='member' level='[none:id:ok]' member='116' />
              <groupfilter function='member' level='[none:id:ok]' member='117' />
              <groupfilter function='member' level='[none:id:ok]' member='118' />
              <groupfilter function='member' level='[none:id:ok]' member='119' />
              <groupfilter function='member' level='[none:id:ok]' member='120' />
              <groupfilter function='member' level='[none:id:ok]' member='121' />
              <groupfilter function='member' level='[none:id:ok]' member='122' />
              <groupfilter function='member' level='[none:id:ok]' member='123' />
              <groupfilter function='member' level='[none:id:ok]' member='124' />
              <groupfilter function='member' level='[none:id:ok]' member='125' />
              <groupfilter function='member' level='[none:id:ok]' member='126' />
              <groupfilter function='member' level='[none:id:ok]' member='127' />
              <groupfilter function='member' level='[none:id:ok]' member='128' />
              <groupfilter function='member' level='[none:id:ok]' member='129' />
              <groupfilter function='member' level='[none:id:ok]' member='130' />
              <groupfilter function='member' level='[none:id:ok]' member='131' />
              <groupfilter function='member' level='[none:id:ok]' member='132' />
              <groupfilter function='member' level='[none:id:ok]' member='133' />
              <groupfilter function='member' level='[none:id:ok]' member='134' />
              <groupfilter function='member' level='[none:id:ok]' member='135' />
              <groupfilter function='member' level='[none:id:ok]' member='136' />
              <groupfilter function='member' level='[none:id:ok]' member='137' />
              <groupfilter function='member' level='[none:id:ok]' member='138' />
              <groupfilter function='member' level='[none:id:ok]' member='139' />
              <groupfilter function='member' level='[none:id:ok]' member='140' />
              <groupfilter function='member' level='[none:id:ok]' member='141' />
              <groupfilter function='member' level='[none:id:ok]' member='142' />
              <groupfilter function='member' level='[none:id:ok]' member='143' />
              <groupfilter function='member' level='[none:id:ok]' member='144' />
              <groupfilter function='member' level='[none:id:ok]' member='145' />
              <groupfilter function='member' level='[none:id:ok]' member='146' />
              <groupfilter function='member' level='[none:id:ok]' member='147' />
              <groupfilter function='member' level='[none:id:ok]' member='148' />
              <groupfilter function='member' level='[none:id:ok]' member='149' />
              <groupfilter function='member' level='[none:id:ok]' member='150' />
              <groupfilter function='member' level='[none:id:ok]' member='151' />
              <groupfilter function='member' level='[none:id:ok]' member='152' />
              <groupfilter function='member' level='[none:id:ok]' member='153' />
              <groupfilter function='member' level='[none:id:ok]' member='154' />
              <groupfilter function='member' level='[none:id:ok]' member='155' />
              <groupfilter function='member' level='[none:id:ok]' member='156' />
              <groupfilter function='member' level='[none:id:ok]' member='157' />
              <groupfilter function='member' level='[none:id:ok]' member='158' />
              <groupfilter function='member' level='[none:id:ok]' member='159' />
              <groupfilter function='member' level='[none:id:ok]' member='160' />
              <groupfilter function='member' level='[none:id:ok]' member='161' />
              <groupfilter function='member' level='[none:id:ok]' member='162' />
              <groupfilter function='member' level='[none:id:ok]' member='163' />
              <groupfilter function='member' level='[none:id:ok]' member='164' />
              <groupfilter function='member' level='[none:id:ok]' member='165' />
              <groupfilter function='member' level='[none:id:ok]' member='166' />
              <groupfilter function='member' level='[none:id:ok]' member='167' />
              <groupfilter function='member' level='[none:id:ok]' member='168' />
              <groupfilter function='member' level='[none:id:ok]' member='169' />
              <groupfilter function='member' level='[none:id:ok]' member='170' />
              <groupfilter function='member' level='[none:id:ok]' member='171' />
              <groupfilter function='member' level='[none:id:ok]' member='172' />
              <groupfilter function='member' level='[none:id:ok]' member='173' />
              <groupfilter function='member' level='[none:id:ok]' member='174' />
              <groupfilter function='member' level='[none:id:ok]' member='175' />
              <groupfilter function='member' level='[none:id:ok]' member='176' />
              <groupfilter function='member' level='[none:id:ok]' member='177' />
              <groupfilter function='member' level='[none:id:ok]' member='178' />
              <groupfilter function='member' level='[none:id:ok]' member='179' />
              <groupfilter function='member' level='[none:id:ok]' member='180' />
              <groupfilter function='member' level='[none:id:ok]' member='181' />
              <groupfilter function='member' level='[none:id:ok]' member='182' />
              <groupfilter function='member' level='[none:id:ok]' member='183' />
              <groupfilter function='member' level='[none:id:ok]' member='184' />
              <groupfilter function='member' level='[none:id:ok]' member='185' />
              <groupfilter function='member' level='[none:id:ok]' member='186' />
              <groupfilter function='member' level='[none:id:ok]' member='187' />
              <groupfilter function='member' level='[none:id:ok]' member='188' />
              <groupfilter function='member' level='[none:id:ok]' member='189' />
              <groupfilter function='member' level='[none:id:ok]' member='190' />
              <groupfilter function='member' level='[none:id:ok]' member='191' />
              <groupfilter function='member' level='[none:id:ok]' member='192' />
              <groupfilter function='member' level='[none:id:ok]' member='193' />
              <groupfilter function='member' level='[none:id:ok]' member='194' />
              <groupfilter function='member' level='[none:id:ok]' member='195' />
              <groupfilter function='member' level='[none:id:ok]' member='196' />
              <groupfilter function='member' level='[none:id:ok]' member='197' />
              <groupfilter function='member' level='[none:id:ok]' member='198' />
              <groupfilter function='member' level='[none:id:ok]' member='199' />
              <groupfilter function='member' level='[none:id:ok]' member='200' />
              <groupfilter function='member' level='[none:id:ok]' member='201' />
              <groupfilter function='member' level='[none:id:ok]' member='202' />
              <groupfilter function='member' level='[none:id:ok]' member='203' />
              <groupfilter function='member' level='[none:id:ok]' member='204' />
              <groupfilter function='member' level='[none:id:ok]' member='205' />
              <groupfilter function='member' level='[none:id:ok]' member='206' />
              <groupfilter function='member' level='[none:id:ok]' member='207' />
              <groupfilter function='member' level='[none:id:ok]' member='208' />
              <groupfilter function='member' level='[none:id:ok]' member='209' />
              <groupfilter function='member' level='[none:id:ok]' member='210' />
              <groupfilter function='member' level='[none:id:ok]' member='211' />
              <groupfilter function='member' level='[none:id:ok]' member='212' />
              <groupfilter function='member' level='[none:id:ok]' member='213' />
              <groupfilter function='member' level='[none:id:ok]' member='214' />
              <groupfilter function='member' level='[none:id:ok]' member='215' />
              <groupfilter function='member' level='[none:id:ok]' member='216' />
              <groupfilter function='member' level='[none:id:ok]' member='217' />
              <groupfilter function='member' level='[none:id:ok]' member='218' />
              <groupfilter function='member' level='[none:id:ok]' member='219' />
              <groupfilter function='member' level='[none:id:ok]' member='220' />
              <groupfilter function='member' level='[none:id:ok]' member='221' />
              <groupfilter function='member' level='[none:id:ok]' member='222' />
              <groupfilter function='member' level='[none:id:ok]' member='223' />
              <groupfilter function='member' level='[none:id:ok]' member='224' />
              <groupfilter function='member' level='[none:id:ok]' member='225' />
              <groupfilter function='member' level='[none:id:ok]' member='226' />
              <groupfilter function='member' level='[none:id:ok]' member='227' />
              <groupfilter function='member' level='[none:id:ok]' member='228' />
              <groupfilter function='member' level='[none:id:ok]' member='229' />
              <groupfilter function='member' level='[none:id:ok]' member='230' />
              <groupfilter function='member' level='[none:id:ok]' member='231' />
              <groupfilter function='member' level='[none:id:ok]' member='232' />
              <groupfilter function='member' level='[none:id:ok]' member='233' />
              <groupfilter function='member' level='[none:id:ok]' member='234' />
              <groupfilter function='member' level='[none:id:ok]' member='235' />
              <groupfilter function='member' level='[none:id:ok]' member='236' />
              <groupfilter function='member' level='[none:id:ok]' member='237' />
              <groupfilter function='member' level='[none:id:ok]' member='238' />
              <groupfilter function='member' level='[none:id:ok]' member='240' />
              <groupfilter function='member' level='[none:id:ok]' member='241' />
              <groupfilter function='member' level='[none:id:ok]' member='242' />
              <groupfilter function='member' level='[none:id:ok]' member='243' />
              <groupfilter function='member' level='[none:id:ok]' member='245' />
              <groupfilter function='member' level='[none:id:ok]' member='246' />
              <groupfilter function='member' level='[none:id:ok]' member='248' />
              <groupfilter function='member' level='[none:id:ok]' member='249' />
              <groupfilter function='member' level='[none:id:ok]' member='250' />
              <groupfilter function='member' level='[none:id:ok]' member='251' />
              <groupfilter function='member' level='[none:id:ok]' member='253' />
              <groupfilter function='member' level='[none:id:ok]' member='254' />
              <groupfilter function='member' level='[none:id:ok]' member='256' />
              <groupfilter function='member' level='[none:id:ok]' member='257' />
              <groupfilter function='member' level='[none:id:ok]' member='258' />
              <groupfilter function='member' level='[none:id:ok]' member='259' />
              <groupfilter function='member' level='[none:id:ok]' member='260' />
              <groupfilter function='member' level='[none:id:ok]' member='261' />
              <groupfilter function='member' level='[none:id:ok]' member='262' />
              <groupfilter function='member' level='[none:id:ok]' member='263' />
              <groupfilter function='member' level='[none:id:ok]' member='264' />
              <groupfilter function='member' level='[none:id:ok]' member='265' />
              <groupfilter function='member' level='[none:id:ok]' member='266' />
              <groupfilter function='member' level='[none:id:ok]' member='267' />
              <groupfilter function='member' level='[none:id:ok]' member='268' />
              <groupfilter function='member' level='[none:id:ok]' member='269' />
              <groupfilter function='member' level='[none:id:ok]' member='270' />
              <groupfilter function='member' level='[none:id:ok]' member='271' />
              <groupfilter function='member' level='[none:id:ok]' member='272' />
              <groupfilter function='member' level='[none:id:ok]' member='273' />
              <groupfilter function='member' level='[none:id:ok]' member='275' />
              <groupfilter function='member' level='[none:id:ok]' member='276' />
              <groupfilter function='member' level='[none:id:ok]' member='277' />
              <groupfilter function='member' level='[none:id:ok]' member='279' />
              <groupfilter function='member' level='[none:id:ok]' member='280' />
              <groupfilter function='member' level='[none:id:ok]' member='281' />
              <groupfilter function='member' level='[none:id:ok]' member='282' />
              <groupfilter function='member' level='[none:id:ok]' member='283' />
              <groupfilter function='member' level='[none:id:ok]' member='285' />
              <groupfilter function='member' level='[none:id:ok]' member='287' />
              <groupfilter function='member' level='[none:id:ok]' member='288' />
              <groupfilter function='member' level='[none:id:ok]' member='289' />
              <groupfilter function='member' level='[none:id:ok]' member='290' />
              <groupfilter function='member' level='[none:id:ok]' member='291' />
              <groupfilter function='member' level='[none:id:ok]' member='292' />
              <groupfilter function='member' level='[none:id:ok]' member='293' />
              <groupfilter function='member' level='[none:id:ok]' member='295' />
              <groupfilter function='member' level='[none:id:ok]' member='296' />
              <groupfilter function='member' level='[none:id:ok]' member='297' />
              <groupfilter function='member' level='[none:id:ok]' member='298' />
              <groupfilter function='member' level='[none:id:ok]' member='299' />
              <groupfilter function='member' level='[none:id:ok]' member='300' />
              <groupfilter function='member' level='[none:id:ok]' member='302' />
              <groupfilter function='member' level='[none:id:ok]' member='303' />
              <groupfilter function='member' level='[none:id:ok]' member='304' />
              <groupfilter function='member' level='[none:id:ok]' member='305' />
              <groupfilter function='member' level='[none:id:ok]' member='306' />
              <groupfilter function='member' level='[none:id:ok]' member='307' />
              <groupfilter function='member' level='[none:id:ok]' member='308' />
              <groupfilter function='member' level='[none:id:ok]' member='309' />
              <groupfilter function='member' level='[none:id:ok]' member='311' />
              <groupfilter function='member' level='[none:id:ok]' member='312' />
              <groupfilter function='member' level='[none:id:ok]' member='313' />
              <groupfilter function='member' level='[none:id:ok]' member='314' />
              <groupfilter function='member' level='[none:id:ok]' member='316' />
              <groupfilter function='member' level='[none:id:ok]' member='317' />
              <groupfilter function='member' level='[none:id:ok]' member='318' />
              <groupfilter function='member' level='[none:id:ok]' member='319' />
              <groupfilter function='member' level='[none:id:ok]' member='320' />
              <groupfilter function='member' level='[none:id:ok]' member='321' />
              <groupfilter function='member' level='[none:id:ok]' member='322' />
              <groupfilter function='member' level='[none:id:ok]' member='323' />
              <groupfilter function='member' level='[none:id:ok]' member='325' />
              <groupfilter function='member' level='[none:id:ok]' member='326' />
              <groupfilter function='member' level='[none:id:ok]' member='327' />
              <groupfilter function='member' level='[none:id:ok]' member='328' />
              <groupfilter function='member' level='[none:id:ok]' member='329' />
              <groupfilter function='member' level='[none:id:ok]' member='330' />
              <groupfilter function='member' level='[none:id:ok]' member='331' />
              <groupfilter function='member' level='[none:id:ok]' member='332' />
              <groupfilter function='member' level='[none:id:ok]' member='333' />
              <groupfilter function='member' level='[none:id:ok]' member='334' />
              <groupfilter function='member' level='[none:id:ok]' member='336' />
              <groupfilter function='member' level='[none:id:ok]' member='337' />
              <groupfilter function='member' level='[none:id:ok]' member='338' />
              <groupfilter function='member' level='[none:id:ok]' member='339' />
              <groupfilter function='member' level='[none:id:ok]' member='340' />
              <groupfilter function='member' level='[none:id:ok]' member='341' />
              <groupfilter function='member' level='[none:id:ok]' member='342' />
              <groupfilter function='member' level='[none:id:ok]' member='343' />
              <groupfilter function='member' level='[none:id:ok]' member='344' />
              <groupfilter function='member' level='[none:id:ok]' member='345' />
              <groupfilter function='member' level='[none:id:ok]' member='346' />
              <groupfilter function='member' level='[none:id:ok]' member='347' />
              <groupfilter function='member' level='[none:id:ok]' member='348' />
              <groupfilter function='member' level='[none:id:ok]' member='349' />
              <groupfilter function='member' level='[none:id:ok]' member='350' />
              <groupfilter function='member' level='[none:id:ok]' member='351' />
              <groupfilter function='member' level='[none:id:ok]' member='352' />
              <groupfilter function='member' level='[none:id:ok]' member='353' />
              <groupfilter function='member' level='[none:id:ok]' member='354' />
              <groupfilter function='member' level='[none:id:ok]' member='355' />
              <groupfilter function='member' level='[none:id:ok]' member='356' />
              <groupfilter function='member' level='[none:id:ok]' member='357' />
              <groupfilter function='member' level='[none:id:ok]' member='358' />
              <groupfilter function='member' level='[none:id:ok]' member='359' />
              <groupfilter function='member' level='[none:id:ok]' member='360' />
              <groupfilter function='member' level='[none:id:ok]' member='361' />
              <groupfilter function='member' level='[none:id:ok]' member='362' />
              <groupfilter function='member' level='[none:id:ok]' member='363' />
              <groupfilter function='member' level='[none:id:ok]' member='364' />
              <groupfilter function='member' level='[none:id:ok]' member='365' />
              <groupfilter function='member' level='[none:id:ok]' member='366' />
              <groupfilter function='member' level='[none:id:ok]' member='367' />
              <groupfilter function='member' level='[none:id:ok]' member='368' />
              <groupfilter function='member' level='[none:id:ok]' member='369' />
              <groupfilter function='member' level='[none:id:ok]' member='370' />
              <groupfilter function='member' level='[none:id:ok]' member='371' />
              <groupfilter function='member' level='[none:id:ok]' member='372' />
              <groupfilter function='member' level='[none:id:ok]' member='373' />
              <groupfilter function='member' level='[none:id:ok]' member='374' />
              <groupfilter function='member' level='[none:id:ok]' member='375' />
              <groupfilter function='member' level='[none:id:ok]' member='376' />
              <groupfilter function='member' level='[none:id:ok]' member='377' />
              <groupfilter function='member' level='[none:id:ok]' member='378' />
              <groupfilter function='member' level='[none:id:ok]' member='379' />
              <groupfilter function='member' level='[none:id:ok]' member='380' />
              <groupfilter function='member' level='[none:id:ok]' member='381' />
              <groupfilter function='member' level='[none:id:ok]' member='382' />
              <groupfilter function='member' level='[none:id:ok]' member='383' />
              <groupfilter function='member' level='[none:id:ok]' member='384' />
              <groupfilter function='member' level='[none:id:ok]' member='385' />
              <groupfilter function='member' level='[none:id:ok]' member='386' />
              <groupfilter function='member' level='[none:id:ok]' member='387' />
              <groupfilter function='member' level='[none:id:ok]' member='388' />
              <groupfilter function='member' level='[none:id:ok]' member='389' />
              <groupfilter function='member' level='[none:id:ok]' member='390' />
              <groupfilter function='member' level='[none:id:ok]' member='391' />
              <groupfilter function='member' level='[none:id:ok]' member='392' />
              <groupfilter function='member' level='[none:id:ok]' member='394' />
              <groupfilter function='member' level='[none:id:ok]' member='395' />
              <groupfilter function='member' level='[none:id:ok]' member='396' />
              <groupfilter function='member' level='[none:id:ok]' member='397' />
              <groupfilter function='member' level='[none:id:ok]' member='398' />
              <groupfilter function='member' level='[none:id:ok]' member='400' />
              <groupfilter function='member' level='[none:id:ok]' member='401' />
              <groupfilter function='member' level='[none:id:ok]' member='402' />
              <groupfilter function='member' level='[none:id:ok]' member='403' />
              <groupfilter function='member' level='[none:id:ok]' member='404' />
              <groupfilter function='member' level='[none:id:ok]' member='405' />
              <groupfilter function='member' level='[none:id:ok]' member='406' />
              <groupfilter function='member' level='[none:id:ok]' member='407' />
              <groupfilter function='member' level='[none:id:ok]' member='408' />
              <groupfilter function='member' level='[none:id:ok]' member='409' />
              <groupfilter function='member' level='[none:id:ok]' member='410' />
              <groupfilter function='member' level='[none:id:ok]' member='411' />
              <groupfilter function='member' level='[none:id:ok]' member='412' />
              <groupfilter function='member' level='[none:id:ok]' member='413' />
              <groupfilter function='member' level='[none:id:ok]' member='414' />
              <groupfilter function='member' level='[none:id:ok]' member='415' />
              <groupfilter function='member' level='[none:id:ok]' member='416' />
              <groupfilter function='member' level='[none:id:ok]' member='417' />
              <groupfilter function='member' level='[none:id:ok]' member='418' />
              <groupfilter function='member' level='[none:id:ok]' member='419' />
              <groupfilter function='member' level='[none:id:ok]' member='420' />
              <groupfilter function='member' level='[none:id:ok]' member='421' />
              <groupfilter function='member' level='[none:id:ok]' member='422' />
              <groupfilter function='member' level='[none:id:ok]' member='423' />
              <groupfilter function='member' level='[none:id:ok]' member='424' />
              <groupfilter function='member' level='[none:id:ok]' member='425' />
              <groupfilter function='member' level='[none:id:ok]' member='426' />
              <groupfilter function='member' level='[none:id:ok]' member='427' />
              <groupfilter function='member' level='[none:id:ok]' member='428' />
              <groupfilter function='member' level='[none:id:ok]' member='429' />
              <groupfilter function='member' level='[none:id:ok]' member='430' />
              <groupfilter function='member' level='[none:id:ok]' member='431' />
              <groupfilter function='member' level='[none:id:ok]' member='432' />
              <groupfilter function='member' level='[none:id:ok]' member='433' />
              <groupfilter function='member' level='[none:id:ok]' member='434' />
              <groupfilter function='member' level='[none:id:ok]' member='435' />
              <groupfilter function='member' level='[none:id:ok]' member='436' />
              <groupfilter function='member' level='[none:id:ok]' member='437' />
              <groupfilter function='member' level='[none:id:ok]' member='438' />
              <groupfilter function='member' level='[none:id:ok]' member='439' />
              <groupfilter function='member' level='[none:id:ok]' member='440' />
              <groupfilter function='member' level='[none:id:ok]' member='441' />
              <groupfilter function='member' level='[none:id:ok]' member='442' />
              <groupfilter function='member' level='[none:id:ok]' member='443' />
              <groupfilter function='member' level='[none:id:ok]' member='444' />
              <groupfilter function='member' level='[none:id:ok]' member='446' />
              <groupfilter function='member' level='[none:id:ok]' member='447' />
              <groupfilter function='member' level='[none:id:ok]' member='448' />
              <groupfilter function='member' level='[none:id:ok]' member='449' />
              <groupfilter function='member' level='[none:id:ok]' member='450' />
              <groupfilter function='member' level='[none:id:ok]' member='452' />
              <groupfilter function='member' level='[none:id:ok]' member='453' />
              <groupfilter function='member' level='[none:id:ok]' member='454' />
              <groupfilter function='member' level='[none:id:ok]' member='455' />
              <groupfilter function='member' level='[none:id:ok]' member='456' />
              <groupfilter function='member' level='[none:id:ok]' member='457' />
              <groupfilter function='member' level='[none:id:ok]' member='458' />
              <groupfilter function='member' level='[none:id:ok]' member='459' />
              <groupfilter function='member' level='[none:id:ok]' member='460' />
              <groupfilter function='member' level='[none:id:ok]' member='461' />
              <groupfilter function='member' level='[none:id:ok]' member='462' />
              <groupfilter function='member' level='[none:id:ok]' member='463' />
              <groupfilter function='member' level='[none:id:ok]' member='464' />
              <groupfilter function='member' level='[none:id:ok]' member='465' />
              <groupfilter function='member' level='[none:id:ok]' member='466' />
              <groupfilter function='member' level='[none:id:ok]' member='467' />
              <groupfilter function='member' level='[none:id:ok]' member='468' />
              <groupfilter function='member' level='[none:id:ok]' member='469' />
              <groupfilter function='member' level='[none:id:ok]' member='470' />
              <groupfilter function='member' level='[none:id:ok]' member='471' />
              <groupfilter function='member' level='[none:id:ok]' member='472' />
              <groupfilter function='member' level='[none:id:ok]' member='473' />
              <groupfilter function='member' level='[none:id:ok]' member='474' />
              <groupfilter function='member' level='[none:id:ok]' member='475' />
              <groupfilter function='member' level='[none:id:ok]' member='476' />
              <groupfilter function='member' level='[none:id:ok]' member='477' />
              <groupfilter function='member' level='[none:id:ok]' member='478' />
              <groupfilter function='member' level='[none:id:ok]' member='479' />
              <groupfilter function='member' level='[none:id:ok]' member='480' />
              <groupfilter function='member' level='[none:id:ok]' member='481' />
              <groupfilter function='member' level='[none:id:ok]' member='482' />
              <groupfilter function='member' level='[none:id:ok]' member='483' />
              <groupfilter function='member' level='[none:id:ok]' member='484' />
              <groupfilter function='member' level='[none:id:ok]' member='485' />
              <groupfilter function='member' level='[none:id:ok]' member='486' />
              <groupfilter function='member' level='[none:id:ok]' member='487' />
              <groupfilter function='member' level='[none:id:ok]' member='488' />
              <groupfilter function='member' level='[none:id:ok]' member='489' />
              <groupfilter function='member' level='[none:id:ok]' member='490' />
              <groupfilter function='member' level='[none:id:ok]' member='491' />
              <groupfilter function='member' level='[none:id:ok]' member='492' />
              <groupfilter function='member' level='[none:id:ok]' member='493' />
              <groupfilter function='member' level='[none:id:ok]' member='494' />
              <groupfilter function='member' level='[none:id:ok]' member='495' />
              <groupfilter function='member' level='[none:id:ok]' member='496' />
              <groupfilter function='member' level='[none:id:ok]' member='497' />
              <groupfilter function='member' level='[none:id:ok]' member='498' />
              <groupfilter function='member' level='[none:id:ok]' member='499' />
              <groupfilter function='member' level='[none:id:ok]' member='500' />
              <groupfilter function='member' level='[none:id:ok]' member='501' />
              <groupfilter function='member' level='[none:id:ok]' member='502' />
              <groupfilter function='member' level='[none:id:ok]' member='503' />
              <groupfilter function='member' level='[none:id:ok]' member='504' />
              <groupfilter function='member' level='[none:id:ok]' member='505' />
              <groupfilter function='member' level='[none:id:ok]' member='506' />
              <groupfilter function='member' level='[none:id:ok]' member='507' />
              <groupfilter function='member' level='[none:id:ok]' member='508' />
              <groupfilter function='member' level='[none:id:ok]' member='509' />
              <groupfilter function='member' level='[none:id:ok]' member='510' />
              <groupfilter function='member' level='[none:id:ok]' member='511' />
              <groupfilter function='member' level='[none:id:ok]' member='512' />
              <groupfilter function='member' level='[none:id:ok]' member='513' />
              <groupfilter function='member' level='[none:id:ok]' member='514' />
              <groupfilter function='member' level='[none:id:ok]' member='515' />
              <groupfilter function='member' level='[none:id:ok]' member='516' />
              <groupfilter function='member' level='[none:id:ok]' member='517' />
              <groupfilter function='member' level='[none:id:ok]' member='518' />
              <groupfilter function='member' level='[none:id:ok]' member='519' />
              <groupfilter function='member' level='[none:id:ok]' member='520' />
              <groupfilter function='member' level='[none:id:ok]' member='521' />
              <groupfilter function='member' level='[none:id:ok]' member='522' />
              <groupfilter function='member' level='[none:id:ok]' member='523' />
              <groupfilter function='member' level='[none:id:ok]' member='524' />
              <groupfilter function='member' level='[none:id:ok]' member='525' />
              <groupfilter function='member' level='[none:id:ok]' member='526' />
              <groupfilter function='member' level='[none:id:ok]' member='527' />
              <groupfilter function='member' level='[none:id:ok]' member='528' />
              <groupfilter function='member' level='[none:id:ok]' member='529' />
              <groupfilter function='member' level='[none:id:ok]' member='530' />
              <groupfilter function='member' level='[none:id:ok]' member='531' />
              <groupfilter function='member' level='[none:id:ok]' member='532' />
              <groupfilter function='member' level='[none:id:ok]' member='533' />
              <groupfilter function='member' level='[none:id:ok]' member='534' />
              <groupfilter function='member' level='[none:id:ok]' member='535' />
              <groupfilter function='member' level='[none:id:ok]' member='536' />
              <groupfilter function='member' level='[none:id:ok]' member='537' />
              <groupfilter function='member' level='[none:id:ok]' member='538' />
              <groupfilter function='member' level='[none:id:ok]' member='539' />
              <groupfilter function='member' level='[none:id:ok]' member='540' />
              <groupfilter function='member' level='[none:id:ok]' member='541' />
              <groupfilter function='member' level='[none:id:ok]' member='542' />
              <groupfilter function='member' level='[none:id:ok]' member='543' />
              <groupfilter function='member' level='[none:id:ok]' member='544' />
              <groupfilter function='member' level='[none:id:ok]' member='545' />
              <groupfilter function='member' level='[none:id:ok]' member='547' />
              <groupfilter function='member' level='[none:id:ok]' member='548' />
              <groupfilter function='member' level='[none:id:ok]' member='549' />
              <groupfilter function='member' level='[none:id:ok]' member='550' />
              <groupfilter function='member' level='[none:id:ok]' member='551' />
              <groupfilter function='member' level='[none:id:ok]' member='552' />
              <groupfilter function='member' level='[none:id:ok]' member='553' />
              <groupfilter function='member' level='[none:id:ok]' member='554' />
              <groupfilter function='member' level='[none:id:ok]' member='555' />
              <groupfilter function='member' level='[none:id:ok]' member='556' />
              <groupfilter function='member' level='[none:id:ok]' member='557' />
              <groupfilter function='member' level='[none:id:ok]' member='558' />
              <groupfilter function='member' level='[none:id:ok]' member='559' />
              <groupfilter function='member' level='[none:id:ok]' member='560' />
              <groupfilter function='member' level='[none:id:ok]' member='561' />
              <groupfilter function='member' level='[none:id:ok]' member='562' />
              <groupfilter function='member' level='[none:id:ok]' member='563' />
              <groupfilter function='member' level='[none:id:ok]' member='564' />
              <groupfilter function='member' level='[none:id:ok]' member='565' />
              <groupfilter function='member' level='[none:id:ok]' member='566' />
              <groupfilter function='member' level='[none:id:ok]' member='567' />
              <groupfilter function='member' level='[none:id:ok]' member='568' />
              <groupfilter function='member' level='[none:id:ok]' member='569' />
              <groupfilter function='member' level='[none:id:ok]' member='570' />
              <groupfilter function='member' level='[none:id:ok]' member='572' />
              <groupfilter function='member' level='[none:id:ok]' member='573' />
              <groupfilter function='member' level='[none:id:ok]' member='574' />
              <groupfilter function='member' level='[none:id:ok]' member='575' />
              <groupfilter function='member' level='[none:id:ok]' member='576' />
              <groupfilter function='member' level='[none:id:ok]' member='577' />
              <groupfilter function='member' level='[none:id:ok]' member='578' />
              <groupfilter function='member' level='[none:id:ok]' member='580' />
              <groupfilter function='member' level='[none:id:ok]' member='581' />
              <groupfilter function='member' level='[none:id:ok]' member='583' />
              <groupfilter function='member' level='[none:id:ok]' member='584' />
              <groupfilter function='member' level='[none:id:ok]' member='586' />
              <groupfilter function='member' level='[none:id:ok]' member='587' />
              <groupfilter function='member' level='[none:id:ok]' member='588' />
              <groupfilter function='member' level='[none:id:ok]' member='589' />
              <groupfilter function='member' level='[none:id:ok]' member='590' />
              <groupfilter function='member' level='[none:id:ok]' member='591' />
              <groupfilter function='member' level='[none:id:ok]' member='592' />
              <groupfilter function='member' level='[none:id:ok]' member='593' />
              <groupfilter function='member' level='[none:id:ok]' member='594' />
              <groupfilter function='member' level='[none:id:ok]' member='596' />
              <groupfilter function='member' level='[none:id:ok]' member='597' />
              <groupfilter function='member' level='[none:id:ok]' member='598' />
              <groupfilter function='member' level='[none:id:ok]' member='600' />
              <groupfilter function='member' level='[none:id:ok]' member='602' />
              <groupfilter function='member' level='[none:id:ok]' member='603' />
              <groupfilter function='member' level='[none:id:ok]' member='604' />
              <groupfilter function='member' level='[none:id:ok]' member='605' />
              <groupfilter function='member' level='[none:id:ok]' member='606' />
              <groupfilter function='member' level='[none:id:ok]' member='607' />
              <groupfilter function='member' level='[none:id:ok]' member='608' />
              <groupfilter function='member' level='[none:id:ok]' member='609' />
              <groupfilter function='member' level='[none:id:ok]' member='610' />
              <groupfilter function='member' level='[none:id:ok]' member='611' />
              <groupfilter function='member' level='[none:id:ok]' member='612' />
              <groupfilter function='member' level='[none:id:ok]' member='613' />
              <groupfilter function='member' level='[none:id:ok]' member='615' />
              <groupfilter function='member' level='[none:id:ok]' member='616' />
              <groupfilter function='member' level='[none:id:ok]' member='617' />
              <groupfilter function='member' level='[none:id:ok]' member='618' />
              <groupfilter function='member' level='[none:id:ok]' member='619' />
              <groupfilter function='member' level='[none:id:ok]' member='620' />
              <groupfilter function='member' level='[none:id:ok]' member='621' />
              <groupfilter function='member' level='[none:id:ok]' member='622' />
              <groupfilter function='member' level='[none:id:ok]' member='623' />
              <groupfilter function='member' level='[none:id:ok]' member='624' />
              <groupfilter function='member' level='[none:id:ok]' member='625' />
              <groupfilter function='member' level='[none:id:ok]' member='626' />
              <groupfilter function='member' level='[none:id:ok]' member='628' />
              <groupfilter function='member' level='[none:id:ok]' member='629' />
              <groupfilter function='member' level='[none:id:ok]' member='631' />
              <groupfilter function='member' level='[none:id:ok]' member='632' />
              <groupfilter function='member' level='[none:id:ok]' member='633' />
              <groupfilter function='member' level='[none:id:ok]' member='634' />
              <groupfilter function='member' level='[none:id:ok]' member='635' />
              <groupfilter function='member' level='[none:id:ok]' member='636' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:winner:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='MAX([win_by_runs])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:winner:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]'>
            <groupfilter function='level-members' level='[yr:date:ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:id:ok]' direction='DESC' measure-to-sort-by='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[max:win_by_runs:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]</column>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:winner:nk]</column>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:id:ok]</column>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796417036299:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[max:win_by_runs:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:id:ok] / ([federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok] / ([federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:winner:nk] / [federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796417036299:nk])))</rows>
        <cols>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[max:win_by_runs:qk]</cols>
      </table>
      <simple-id uuid='{72888E22-FB7A-4666-85BF-8752DB27CDC9}' />
    </worksheet>
    <worksheet name='Highest Totals'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Highest Totals</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='matches.csv+ (Multiple Connections)' name='federated.1cf7txx1i9gxrl1g6acyb1adgwp3' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Top N' datatype='integer' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='10'>
              <calculation class='tableau' formula='10' />
              <range granularity='5' max='50' min='5' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1cf7txx1i9gxrl1g6acyb1adgwp3'>
            <column caption='Match_innings' datatype='string' name='[Calculation_126100796416733194]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='str([match_id]) + &quot;_&quot; + STR([inning])' />
            </column>
            <column caption='Batting Team' datatype='string' name='[batting_team]' role='dimension' type='nominal' />
            <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column caption='Inning' datatype='integer' name='[inning]' role='measure' type='quantitative' />
            <column caption='Match Id' datatype='integer' name='[match_id]' role='dimension' type='ordinal' />
            <column-instance column='[Calculation_126100796416733194]' derivation='None' name='[none:Calculation_126100796416733194:nk]' pivot='key' type='nominal' />
            <column-instance column='[batting_team]' derivation='None' name='[none:batting_team:nk]' pivot='key' type='nominal' />
            <column-instance column='[total_runs]' derivation='Sum' name='[sum:total_runs:qk]' pivot='key' type='quantitative' />
            <column caption='Total Runs' datatype='integer' name='[total_runs]' role='measure' type='quantitative' />
            <column-instance column='[date]' derivation='Year' name='[yr:date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796416733194:nk]'>
            <groupfilter count='[Parameters].[Parameter 1]' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([total_runs])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Calculation_126100796416733194:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]'>
            <groupfilter from='2008' function='range' level='[yr:date:ok]' to='2017' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796416733194:nk]' direction='DESC' measure-to-sort-by='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[sum:total_runs:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796416733194:nk]</column>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batting_team:nk]' />
              <text column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[sum:total_runs:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[sum:total_runs:qk]</rows>
        <cols>([federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796416733194:nk] / [federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batting_team:nk])</cols>
      </table>
      <simple-id uuid='{87210F19-1579-427E-BC54-154B9D0CE01F}' />
    </worksheet>
    <worksheet name='MostFours'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Most Fours by a Batsman</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='matches.csv+ (Multiple Connections)' name='federated.1cf7txx1i9gxrl1g6acyb1adgwp3' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Top N' datatype='integer' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='10'>
              <calculation class='tableau' formula='10' />
              <range granularity='5' max='50' min='5' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1cf7txx1i9gxrl1g6acyb1adgwp3'>
            <column caption='Fours' datatype='integer' name='[Calculation_126100796409585665]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNT(IF [batsman_runs]=4 THEN 1 END)' />
            </column>
            <column caption='Batsman' datatype='string' name='[batsman]' role='dimension' type='nominal' />
            <column caption='Batsman Runs' datatype='integer' name='[batsman_runs]' role='measure' type='quantitative' />
            <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column-instance column='[batsman]' derivation='None' name='[none:batsman:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_126100796409585665]' derivation='User' name='[usr:Calculation_126100796409585665:qk]' pivot='key' type='quantitative' />
            <column-instance column='[date]' derivation='Year' name='[yr:date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batsman:nk]'>
            <groupfilter count='[Parameters].[Parameter 1]' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='[Calculation_126100796409585665]' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:batsman:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]'>
            <groupfilter function='level-members' level='[yr:date:ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batsman:nk]</column>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <size column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[usr:Calculation_126100796409585665:qk]' />
              <text column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batsman:nk]' />
              <text column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[usr:Calculation_126100796409585665:qk]' />
              <color column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batsman:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{D2437CF8-2BAD-461E-9E14-D35C768CE645}' />
    </worksheet>
    <worksheet name='MostFours&amp;Sixes'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Most Boundaries by a Batsman</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='matches.csv+ (Multiple Connections)' name='federated.1cf7txx1i9gxrl1g6acyb1adgwp3' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Top N' datatype='integer' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='10'>
              <calculation class='tableau' formula='10' />
              <range granularity='5' max='50' min='5' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1cf7txx1i9gxrl1g6acyb1adgwp3'>
            <column caption='Fours' datatype='integer' name='[Calculation_126100796409585665]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNT(IF [batsman_runs]=4 THEN 1 END)' />
            </column>
            <column caption='Sixes' datatype='integer' name='[Calculation_126100796410175490]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNT(IF [batsman_runs]=6 THEN 1 END)' />
            </column>
            <column caption='Fours_&amp;_Sixes' datatype='integer' name='[Calculation_126100796410920963]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='[Calculation_126100796409585665]+[Calculation_126100796410175490]' />
            </column>
            <column caption='Batsman' datatype='string' name='[batsman]' role='dimension' type='nominal' />
            <column caption='Batsman Runs' datatype='integer' name='[batsman_runs]' role='measure' type='quantitative' />
            <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column-instance column='[batsman]' derivation='None' name='[none:batsman:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_126100796410175490]' derivation='User' name='[usr:Calculation_126100796410175490:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_126100796410920963]' derivation='User' name='[usr:Calculation_126100796410920963:qk]' pivot='key' type='quantitative' />
            <column-instance column='[date]' derivation='Year' name='[yr:date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batsman:nk]'>
            <groupfilter count='[Parameters].[Parameter 1]' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='[Calculation_126100796410920963]' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:batsman:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <computed-sort column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batsman:nk]' direction='DESC' using='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[usr:Calculation_126100796410920963:qk]' />
          <filter class='categorical' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]'>
            <groupfilter function='level-members' level='[yr:date:ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batsman:nk]</column>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batsman:nk]' />
            </encodings>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[usr:Calculation_126100796410175490:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batsman:nk]' />
            </encodings>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[usr:Calculation_126100796410920963:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batsman:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[usr:Calculation_126100796410920963:qk] + [federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[usr:Calculation_126100796410175490:qk])</rows>
        <cols>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batsman:nk]</cols>
      </table>
      <simple-id uuid='{5E9AC649-5CFC-404E-86BF-289737666128}' />
    </worksheet>
    <worksheet name='MostSixes'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Most Sixes by a Batsman</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='matches.csv+ (Multiple Connections)' name='federated.1cf7txx1i9gxrl1g6acyb1adgwp3' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Top N' datatype='integer' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='10'>
              <calculation class='tableau' formula='10' />
              <range granularity='5' max='50' min='5' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1cf7txx1i9gxrl1g6acyb1adgwp3'>
            <column caption='Sixes' datatype='integer' name='[Calculation_126100796410175490]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNT(IF [batsman_runs]=6 THEN 1 END)' />
            </column>
            <column caption='Ball' datatype='integer' name='[ball]' role='measure' type='quantitative' />
            <column caption='Batsman' datatype='string' name='[batsman]' role='dimension' type='nominal' />
            <column caption='Batsman Runs' datatype='integer' name='[batsman_runs]' role='measure' type='quantitative' />
            <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column-instance column='[batsman]' derivation='None' name='[none:batsman:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_126100796410175490]' derivation='User' name='[usr:Calculation_126100796410175490:qk]' pivot='key' type='quantitative' />
            <column-instance column='[date]' derivation='Year' name='[yr:date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batsman:nk]'>
            <groupfilter count='[Parameters].[Parameter 1]' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([ball])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:batsman:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]'>
            <groupfilter function='level-members' level='[yr:date:ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batsman:nk]</column>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <size column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[usr:Calculation_126100796410175490:qk]' />
              <text column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batsman:nk]' />
              <text column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[usr:Calculation_126100796410175490:qk]' />
              <color column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batsman:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{048CE938-0070-4B0A-9409-63A68086E94D}' />
    </worksheet>
    <worksheet name='OrangeCapContenders'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Orange Cap Contenders (  Max Runs by Batsman )</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='matches.csv+ (Multiple Connections)' name='federated.1cf7txx1i9gxrl1g6acyb1adgwp3' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Top N' datatype='integer' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='10'>
              <calculation class='tableau' formula='10' />
              <range granularity='5' max='50' min='5' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1cf7txx1i9gxrl1g6acyb1adgwp3'>
            <column caption='Batsman' datatype='string' name='[batsman]' role='dimension' type='nominal' />
            <column caption='Batsman Runs' datatype='integer' name='[batsman_runs]' role='measure' type='quantitative' />
            <column caption='Batting Team' datatype='string' name='[batting_team]' role='dimension' type='nominal' />
            <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column-instance column='[batsman]' derivation='None' name='[none:batsman:nk]' pivot='key' type='nominal' />
            <column-instance column='[batting_team]' derivation='None' name='[none:batting_team:nk]' pivot='key' type='nominal' />
            <column-instance column='[batsman_runs]' derivation='Sum' name='[sum:batsman_runs:qk]' pivot='key' type='quantitative' />
            <column-instance column='[date]' derivation='Year' name='[yr:date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batsman:nk]'>
            <groupfilter count='[Parameters].[Parameter 1]' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([batsman_runs])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;A Chopra&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;A Flintoff&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;A Kumble&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;A Mishra&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;A Mukund&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;A Nehra&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;A Singh&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;A Symonds&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;AA Bilakhia&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;AA Noffke&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;AB Agarkar&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;AB de Villiers&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;AB Dinda&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;AB McDonald&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;Abdur Razzak&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;AC Gilchrist&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;AD Mascarenhas&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;AD Mathews&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;AM Nayar&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;AM Rahane&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;AN Ghosh&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;AS Raut&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;AS Yadav&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;B Akhil&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;B Chipli&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;B Lee&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;BAW Mendis&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;BB McCullum&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;BJ Hodge&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;C Nanda&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;CH Gayle&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;CK Kapugedera&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;CL White&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;CRD Fernando&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;D du Preez&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;D Kalyankrishna&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;DA Warner&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;DB Das&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;DB Ravi Teja&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;DJ Bravo&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;DJ Hussey&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;DJ Thornely&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;DL Vettori&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;DNT Zoysa&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;DP Vijaykumar&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;DPMD Jayawardene&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;DR Smith&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;DS Kulkarni&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;DS Lehmann&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;DT Patil&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;DW Steyn&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;FH Edwards&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;G Gambhir&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;GC Smith&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;GD McGrath&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;GJ Bailey&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;GR Napier&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;H Das&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;Harbhajan Singh&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;HH Gibbs&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;I Sharma&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;IK Pathan&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;Iqbal Abdulla&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;J Arunkumar&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;J Botha&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;JA Morkel&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;JD Ryder&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;JDP Oram&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;JH Kallis&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;Joginder Sharma&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;JP Duminy&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;JR Hopes&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;K Goel&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;Kamran Akmal&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;Kamran Khan&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;KC Sangakkara&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;KD Karthik&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;KP Appanna&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;KP Pietersen&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;KV Sharma&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;L Balaji&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;L Ronchi&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;LA Carseldine&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;LA Pomersbach&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;LPC Silva&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;LR Shukla&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;LRPL Taylor&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;M Kaif&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;M Kartik&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;M Manhas&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;M Morkel&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;M Muralitharan&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;M Rawat&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;M Vijay&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;MA Khote&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;Mashrafe Mortaza&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;MC Henriques&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;MEK Hussey&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;MF Maharoof&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;Misbah-ul-Haq&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;MK Pandey&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;MK Tiwary&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;ML Hayden&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;MM Patel&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;MN van Wyk&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;Mohammad Ashraful&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;Mohammad Asif&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;Mohammad Hafeez&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;MS Dhoni&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;MS Gony&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;MV Boucher&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;Niraj Patel&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;NV Ojha&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;P Kumar&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;PA Patel&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;Pankaj Singh&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;PC Valthaty&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;PJ Sangwan&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;PM Sarvesh Kumar&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;PP Chawla&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;PP Ojha&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;PR Shah&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;R Ashwin&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;R Bhatia&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;R Bishnoi&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;R Dravid&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;R Vinay Kumar&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;RA Jadeja&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;RE van der Merwe&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;RG Sharma&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;RJ Harris&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;RJ Quiney&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;RP Singh&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;RR Powar&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;RR Raje&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;RR Sarwan&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;RS Bopara&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;RT Ponting&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;RV Uthappa&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;S Anirudha&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;S Badrinath&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;S Chanderpaul&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;S Dhawan&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;S Sohal&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;S Sreesanth&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;S Vidyut&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;SA Asnodkar&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;Salman Butt&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;SB Bangar&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;SB Jakati&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;SB Joshi&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;SB Styris&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;SC Ganguly&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;SD Chitnis&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;SE Marsh&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;Shahid Afridi&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;Shoaib Ahmed&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;Shoaib Akhtar&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;Shoaib Malik&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;SK Raina&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;SK Trivedi&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;SK Warne&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;SL Malinga&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;SM Harwood&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;SM Katich&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;SM Pollock&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;Sohail Tanvir&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;SP Fleming&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;SP Goswami&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;SR Tendulkar&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;SR Watson&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;SS Shaikh&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;SS Tiwary&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;ST Jayasuriya&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;T Henderson&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;T Kohli&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;T Taibu&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;T Thushara&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;TL Suman&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;TM Dilshan&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;TM Srivastava&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;U Kaul&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;Umar Gul&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;V Kohli&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;V Sehwag&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;VRV Singh&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;VS Yeligati&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;VVS Laxman&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;VY Mahesh&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;W Jaffer&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;WA Mota&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;WP Saha&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;WPUJC Vaas&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;Y Nagar&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;Y Venugopal Rao&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;Yashpal Singh&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;YK Pathan&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;Younis Khan&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;Yuvraj Singh&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;YV Takawale&quot;' />
                  <groupfilter function='member' level='[none:batsman:nk]' member='&quot;Z Khan&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batting_team:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:batting_team:nk]' />
              <groupfilter function='member' level='[none:batting_team:nk]' member='%null%' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]'>
            <groupfilter from='2008' function='range' level='[yr:date:ok]' to='2017' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batting_team:nk]</column>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batsman:nk]</column>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[sum:batsman_runs:qk]' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-sequential'>
                <color>#f1f1f1</color>
                <color>#f2e2da</color>
                <color>#f3d3c3</color>
                <color>#f5c4ab</color>
                <color>#f6b493</color>
                <color>#f8a57c</color>
                <color>#f99563</color>
                <color>#fa854b</color>
                <color>#fc7532</color>
                <color>#fd6519</color>
                <color>#ff5500</color>
              </color-palette>
            </encoding>
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <size column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[sum:batsman_runs:qk]' />
              <color column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[sum:batsman_runs:qk]' />
              <text column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batsman:nk]' />
              <text column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[sum:batsman_runs:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{EBB82121-E66E-4355-9097-9FA11636F4B7}' />
    </worksheet>
    <worksheet name='PurpleCapContenders'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Purple Cap Contenders ( Max  Wickets by Bowlers )</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='matches.csv+ (Multiple Connections)' name='federated.1cf7txx1i9gxrl1g6acyb1adgwp3' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Top N' datatype='integer' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='10'>
              <calculation class='tableau' formula='10' />
              <range granularity='5' max='50' min='5' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1cf7txx1i9gxrl1g6acyb1adgwp3'>
            <column caption='Bowler' datatype='string' name='[bowler]' role='dimension' type='nominal' />
            <column-instance column='[player_dismissed]' derivation='Count' name='[cnt:player_dismissed:qk]' pivot='key' type='quantitative' />
            <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column caption='Dismissal Kind' datatype='string' name='[dismissal_kind]' role='dimension' type='nominal' />
            <column-instance column='[bowler]' derivation='None' name='[none:bowler:nk]' pivot='key' type='nominal' />
            <column-instance column='[dismissal_kind]' derivation='None' name='[none:dismissal_kind:nk]' pivot='key' type='nominal' />
            <column caption='Player Dismissed' datatype='string' name='[player_dismissed]' role='dimension' type='nominal' />
            <column-instance column='[date]' derivation='Year' name='[yr:date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:bowler:nk]'>
            <groupfilter count='[Parameters].[Parameter 1]' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNT([player_dismissed])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;A Kumble&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;A Mishra&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;A Nehra&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;A Nel&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;AA Noffke&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;AB Agarkar&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;AB Dinda&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;AD Mascarenhas&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;AM Nayar&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;B Akhil&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;B Geeves&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;B Lee&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;BAW Mendis&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;CRD Fernando&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;D Kalyankrishna&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;D Salunkhe&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;DB Ravi Teja&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;DJ Bravo&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;DJ Hussey&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;DJ Thornely&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;DL Vettori&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;DNT Zoysa&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;DP Vijaykumar&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;DR Smith&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;DS Kulkarni&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;DW Steyn&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;Gagandeep Singh&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;GD McGrath&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;Harbhajan Singh&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;I Sharma&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;IK Pathan&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;JA Morkel&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;JDP Oram&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;JH Kallis&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;Joginder Sharma&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;JR Hopes&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;L Balaji&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;LR Shukla&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;M Kartik&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;M Muralitharan&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;M Ntini&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;MA Khote&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;P Amarnath&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;P Kumar&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;PJ Sangwan&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;PM Sarvesh Kumar&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;PP Chawla&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;PP Ojha&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;R Bhatia&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;R Vinay Kumar&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;RG Sharma&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;RP Singh&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;RR Powar&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;RR Raje&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;S Sreesanth&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;S Vidyut&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;SB Bangar&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;SB Joshi&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;SB Styris&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;SC Ganguly&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;SD Chitnis&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;Shahid Afridi&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;Shoaib Akhtar&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;Shoaib Malik&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;SK Raina&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;SK Trivedi&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;SK Warne&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;SM Pollock&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;Sohail Tanvir&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;SR Watson&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;ST Jayasuriya&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;TM Dilshan&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;Umar Gul&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;V Kohli&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;V Sehwag&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;VRV Singh&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;VY Mahesh&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;WA Mota&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;WPUJC Vaas&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;Y Venugopal Rao&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;YK Pathan&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;Yuvraj Singh&quot;' />
                  <groupfilter function='member' level='[none:bowler:nk]' member='&quot;Z Khan&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:dismissal_kind:nk]'>
            <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:dismissal_kind:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:dismissal_kind:nk]' member='%null%' />
                <groupfilter function='member' level='[none:dismissal_kind:nk]' member='&quot;obstructing the field&quot;' />
                <groupfilter function='member' level='[none:dismissal_kind:nk]' member='&quot;retired hurt&quot;' />
                <groupfilter function='member' level='[none:dismissal_kind:nk]' member='&quot;run out&quot;' />
                <groupfilter function='member' level='[none:dismissal_kind:nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]'>
            <groupfilter function='level-members' level='[yr:date:ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]</column>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:dismissal_kind:nk]</column>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:bowler:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[cnt:player_dismissed:qk]' type='custom-interpolated'>
              <color-palette custom='true' name='' type='ordered-sequential'>
                <color>#f1f1f1</color>
                <color>#eae2f2</color>
                <color>#e3d3f3</color>
                <color>#dcc4f5</color>
                <color>#d5b4f6</color>
                <color>#cea5f8</color>
                <color>#c795f9</color>
                <color>#c085fa</color>
                <color>#b875fc</color>
                <color>#b165fd</color>
                <color>#aa55ff</color>
              </color-palette>
            </encoding>
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[cnt:player_dismissed:qk]' />
              <size column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[cnt:player_dismissed:qk]' />
              <lod column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:bowler:nk]' />
              <text column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[cnt:player_dismissed:qk]' />
              <text column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:bowler:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{EDD991D6-FBA7-4FBE-BB3F-10A38BD621C6}' />
    </worksheet>
    <worksheet name='SeasonperfSummary'>
      <table>
        <view>
          <datasources>
            <datasource caption='matches.csv+ (Multiple Connections)' name='federated.1cf7txx1i9gxrl1g6acyb1adgwp3' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Teams' datatype='string' name='[Top N (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Mumbai Indians&quot;'>
              <calculation class='tableau' formula='&quot;Mumbai Indians&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1cf7txx1i9gxrl1g6acyb1adgwp3'>
            <column caption='Fours' datatype='integer' name='[Calculation_126100796409585665]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNT(IF [batsman_runs]=4 THEN 1 END)' />
            </column>
            <column caption='Toss_Won' datatype='string' name='[Calculation_126100796415238152]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [toss_winner]=[team1] THEN &apos;Yes&apos;&#13;&#10;ELSE &apos;No&apos;&#13;&#10;END' />
            </column>
            <column caption='First Bat/Field ' datatype='string' name='[Calculation_126100796418088973]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Calculation_126100796415238152]=&apos;Yes&apos; THEN [toss_decision]&#13;&#10;ELSEIF [Calculation_126100796415238152]=&apos;No&apos; AND [toss_decision] = &apos;bat&apos; THEN &apos;field&apos;&#13;&#10;ELSEIF [Calculation_126100796415238152]=&apos;No&apos; AND [toss_decision] = &apos;field&apos; THEN &apos;bat&apos;&#13;&#10;END' />
            </column>
            <column caption='Home/Away' datatype='string' name='[Calculation_126100796421353487]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [home_team]=&quot;team1&quot; AND [Parameters].[Top N (copy)]=[team1] THEN &quot;Home&quot;&#13;&#10;ELSEIF [home_team]=&quot;team1&quot; AND [Parameters].[Top N (copy)]=[team2] THEN &quot;Away&quot;&#13;&#10;ELSEIF [home_team]=&quot;NA&quot; THEN &quot;NA&quot;&#13;&#10;ELSEIF [home_team]=&quot;team2&quot; AND [Parameters].[Top N (copy)]=[team2] THEN &quot;Home&quot;&#13;&#10;ELSEIF [home_team]=&quot;team2&quot; AND [Parameters].[Top N (copy)]=[team1] THEN &quot;Away&quot;&#13;&#10;END' />
            </column>
            <column caption='Win_Flag' datatype='string' name='[Calculation_126100796422586384]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Top N (copy)] = [winner] THEN &quot;Won&quot;&#13;&#10;ELSEIF [Parameters].[Top N (copy)] = [team1] OR [Parameters].[Top N (copy)]=[team2] THEN &quot;Lost&quot;&#13;&#10;END' />
            </column>
            <column-instance column='[win_by_runs]' derivation='Attribute' name='[attr:win_by_runs:ok]' pivot='key' type='ordinal' />
            <column-instance column='[win_by_wickets]' derivation='Attribute' name='[attr:win_by_wickets:ok]' pivot='key' type='ordinal' />
            <column caption='Batsman Runs' datatype='integer' name='[batsman_runs]' role='measure' type='quantitative' />
            <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column caption='Home Team' datatype='string' name='[home_team]' role='dimension' type='nominal' />
            <column datatype='integer' name='[id]' role='dimension' type='quantitative' />
            <column-instance column='[Calculation_126100796415238152]' derivation='None' name='[none:Calculation_126100796415238152:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_126100796418088973]' derivation='None' name='[none:Calculation_126100796418088973:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_126100796421353487]' derivation='None' name='[none:Calculation_126100796421353487:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_126100796422586384]' derivation='None' name='[none:Calculation_126100796422586384:nk]' pivot='key' type='nominal' />
            <column-instance column='[id]' derivation='None' name='[none:id:ok]' pivot='key' type='ordinal' />
            <column-instance column='[player_of_match]' derivation='None' name='[none:player_of_match:nk]' pivot='key' type='nominal' />
            <column-instance column='[team1]' derivation='None' name='[none:team1:nk]' pivot='key' type='nominal' />
            <column-instance column='[team2]' derivation='None' name='[none:team2:nk]' pivot='key' type='nominal' />
            <column caption='Player Of Match' datatype='string' name='[player_of_match]' role='dimension' type='nominal' />
            <column-instance column='[total_runs]' derivation='Sum' name='[sum:total_runs:ok]' pivot='key' type='ordinal' />
            <column-instance column='[date]' derivation='Day-Trunc' name='[tdy:date:ok]' pivot='key' type='ordinal' />
            <column caption='Team1' datatype='string' name='[team1]' role='dimension' type='nominal' />
            <column caption='Team2' datatype='string' name='[team2]' role='dimension' type='nominal' />
            <column caption='Toss Decision' datatype='string' name='[toss_decision]' role='dimension' type='nominal' />
            <column caption='Toss Winner' datatype='string' name='[toss_winner]' role='dimension' type='nominal' />
            <column caption='Total Runs' datatype='integer' name='[total_runs]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_126100796409585665]' derivation='User' name='[usr:Calculation_126100796409585665:ok]' pivot='key' type='ordinal' />
            <column caption='Win By Runs' datatype='integer' name='[win_by_runs]' role='measure' type='quantitative' />
            <column aggregation='Sum' caption='Win By Wickets' datatype='integer' name='[win_by_wickets]' role='dimension' type='quantitative' />
            <column caption='Winner' datatype='string' name='[winner]' role='dimension' type='nominal' />
            <column-instance column='[date]' derivation='Year' name='[yr:date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:team1:nk]'>
            <groupfilter expression='[team1]=[Parameters].[Top N (copy)]' function='filter' user:ui-marker='filter-by'>
              <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                <groupfilter function='level-members' level='[none:team1:nk]' />
                <groupfilter function='member' level='[none:team1:nk]' member='%null%' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]'>
            <groupfilter from='2008' function='range' level='[yr:date:ok]' to='2017' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <_.fcp.SingleValuePerNestSorting.true...single-value-per-nest-shelf-sorts>
            <single-value-per-nest-shelf-sort dimension-to-sort='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:team1:nk]' direction='ASC' measure-to-sort-by='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:team1:nk]' shelf='rows' />
            <single-value-per-nest-shelf-sort dimension-to-sort='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796422586384:nk]' direction='DESC' measure-to-sort-by='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796422586384:nk]' shelf='rows' />
          </_.fcp.SingleValuePerNestSorting.true...single-value-per-nest-shelf-sorts>
          <slices>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]</column>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:team1:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>([federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:team1:nk] / ([federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796422586384:nk] / ([federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:id:ok] / ([federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[tdy:date:ok] / ([federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:team2:nk] / ([federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796415238152:nk] / ([federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796418088973:nk] / ([federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796421353487:nk] / ([federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:player_of_match:nk] / ([federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[usr:Calculation_126100796409585665:ok] / ([federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[sum:total_runs:ok] / ([federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[attr:win_by_wickets:ok] / [federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[attr:win_by_runs:ok]))))))))))))</rows>
        <cols />
      </table>
      <simple-id uuid='{C12EBCE7-070D-4043-A08D-9A9337A4C9B4}' />
    </worksheet>
    <worksheet name='Toss_vs_Outcome'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Toss Selection vs Outcome by Venue</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='matches.csv+ (Multiple Connections)' name='federated.1cf7txx1i9gxrl1g6acyb1adgwp3' />
          </datasources>
          <datasource-dependencies datasource='federated.1cf7txx1i9gxrl1g6acyb1adgwp3'>
            <column caption='Toss_vs_Outcome' datatype='string' name='[Calculation_126100796416364553]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [toss_winner] = [winner] THEN &quot;Toss Winner Won&quot;&#13;&#10;ELSE &quot;Toss Winner Lost&quot;&#13;&#10;END' />
            </column>
            <column-instance column='[id]' derivation='CountD' name='[ctd:id:qk]' pivot='key' type='quantitative' />
            <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column datatype='integer' name='[id]' role='dimension' type='quantitative' />
            <column-instance column='[Calculation_126100796416364553]' derivation='None' name='[none:Calculation_126100796416364553:nk]' pivot='key' type='nominal' />
            <column-instance column='[toss_decision]' derivation='None' name='[none:toss_decision:nk]' pivot='key' type='nominal' />
            <column-instance column='[venue]' derivation='None' name='[none:venue:nk]' pivot='key' type='nominal' />
            <column caption='Toss Decision' datatype='string' name='[toss_decision]' role='dimension' type='nominal' />
            <column caption='Toss Winner' datatype='string' name='[toss_winner]' role='dimension' type='nominal' />
            <column caption='Venue' datatype='string' name='[venue]' role='dimension' type='nominal' />
            <column caption='Winner' datatype='string' name='[winner]' role='dimension' type='nominal' />
            <column-instance column='[date]' derivation='Year' name='[yr:date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <natural-sort column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796416364553:nk]' direction='DESC' />
          <filter class='categorical' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:venue:nk]'>
            <groupfilter function='level-members' level='[none:venue:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]'>
            <groupfilter function='level-members' level='[yr:date:ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:toss_decision:nk]' direction='ASC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[ctd:id:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:venue:nk]</column>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Shape' />
            <encodings>
              <color column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:toss_decision:nk]' />
              <shape column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796416364553:nk]' />
              <text column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[ctd:id:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[ctd:id:qk]</rows>
        <cols>([federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796416364553:nk] / [federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:toss_decision:nk])</cols>
      </table>
      <simple-id uuid='{8A3FB03A-8D20-43EE-AEE4-F795E8743DAF}' />
    </worksheet>
    <worksheet name='Win by Wickets Distribution'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Win by Wickets Distribution</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='matches.csv+ (Multiple Connections)' name='federated.1cf7txx1i9gxrl1g6acyb1adgwp3' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Top N' datatype='integer' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='10'>
              <calculation class='tableau' formula='10' />
              <range granularity='5' max='50' min='5' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1cf7txx1i9gxrl1g6acyb1adgwp3'>
            <column-instance column='[id]' derivation='CountD' name='[ctd:id:qk]' pivot='key' type='quantitative' />
            <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column datatype='integer' name='[id]' role='dimension' type='quantitative' />
            <column-instance column='[win_by_wickets]' derivation='None' name='[none:win_by_wickets:ok]' pivot='key' type='ordinal' />
            <column-instance column='[win_by_wickets]' derivation='None' name='[none:win_by_wickets:qk]' pivot='key' type='quantitative' />
            <column aggregation='Sum' caption='Win By Wickets' datatype='integer' name='[win_by_wickets]' role='dimension' type='quantitative' />
            <column-instance column='[date]' derivation='Year' name='[yr:date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:win_by_wickets:ok]'>
            <groupfilter count='[Parameters].[Parameter 1]' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNTD([id])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:win_by_wickets:ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:win_by_wickets:qk]' included-values='in-range'>
            <min>1</min>
            <max>10</max>
          </filter>
          <filter class='categorical' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]'>
            <groupfilter function='level-members' level='[yr:date:ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:win_by_wickets:ok]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[ctd:id:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:win_by_wickets:ok]</column>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:win_by_wickets:qk]</column>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[ctd:id:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[ctd:id:qk]</rows>
        <cols>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:win_by_wickets:ok]</cols>
      </table>
      <simple-id uuid='{8E972B63-5661-4E03-917E-401D5F17AB1B}' />
    </worksheet>
    <worksheet name='Win%(Home_vs_Away)'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Win%(Home_vs_Away)</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='matches.csv+ (Multiple Connections)' name='federated.1cf7txx1i9gxrl1g6acyb1adgwp3' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Teams' datatype='string' name='[Top N (copy)]' param-domain-type='list' role='measure' type='nominal' value='&quot;Mumbai Indians&quot;'>
              <calculation class='tableau' formula='&quot;Mumbai Indians&quot;' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1cf7txx1i9gxrl1g6acyb1adgwp3'>
            <column caption='Home/Away' datatype='string' name='[Calculation_126100796421353487]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [home_team]=&quot;team1&quot; AND [Parameters].[Top N (copy)]=[team1] THEN &quot;Home&quot;&#13;&#10;ELSEIF [home_team]=&quot;team1&quot; AND [Parameters].[Top N (copy)]=[team2] THEN &quot;Away&quot;&#13;&#10;ELSEIF [home_team]=&quot;NA&quot; THEN &quot;NA&quot;&#13;&#10;ELSEIF [home_team]=&quot;team2&quot; AND [Parameters].[Top N (copy)]=[team2] THEN &quot;Home&quot;&#13;&#10;ELSEIF [home_team]=&quot;team2&quot; AND [Parameters].[Top N (copy)]=[team1] THEN &quot;Away&quot;&#13;&#10;END' />
            </column>
            <column caption='Win_Flag' datatype='string' name='[Calculation_126100796422586384]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Parameters].[Top N (copy)] = [winner] THEN &quot;Won&quot;&#13;&#10;ELSEIF [Parameters].[Top N (copy)] = [team1] OR [Parameters].[Top N (copy)]=[team2] THEN &quot;Lost&quot;&#13;&#10;END' />
            </column>
            <column caption='Win %' datatype='real' name='[Calculation_126100796423729171]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='COUNT(IF [Calculation_126100796422586384]=&quot;Won&quot; THEN [id] END)&#13;&#10;/&#13;&#10;COUNT(IF [Calculation_126100796422586384]=&quot;Won&quot; OR [Calculation_126100796422586384]=&quot;Lost&quot; THEN [id] END)' />
            </column>
            <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column caption='Home Team' datatype='string' name='[home_team]' role='dimension' type='nominal' />
            <column datatype='integer' name='[id]' role='dimension' type='quantitative' />
            <column-instance column='[Calculation_126100796421353487]' derivation='None' name='[none:Calculation_126100796421353487:nk]' pivot='key' type='nominal' />
            <column-instance column='[team1]' derivation='None' name='[none:team1:nk]' pivot='key' type='nominal' />
            <column caption='Team1' datatype='string' name='[team1]' role='dimension' type='nominal' />
            <column caption='Team2' datatype='string' name='[team2]' role='dimension' type='nominal' />
            <column-instance column='[date]' derivation='Year-Trunc' name='[tyr:date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Calculation_126100796423729171]' derivation='User' name='[usr:Calculation_126100796423729171:qk]' pivot='key' type='quantitative' />
            <column caption='Winner' datatype='string' name='[winner]' role='dimension' type='nominal' />
            <column-instance column='[date]' derivation='Year' name='[yr:date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796421353487:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Calculation_126100796421353487:nk]' member='&quot;Away&quot;' />
              <groupfilter function='member' level='[none:Calculation_126100796421353487:nk]' member='&quot;Home&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:team1:nk]'>
            <groupfilter expression='[team1]=[Parameters].[Top N (copy)]' function='filter' user:ui-marker='filter-by'>
              <groupfilter function='except' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                <groupfilter function='level-members' level='[none:team1:nk]' />
                <groupfilter function='union'>
                  <groupfilter function='member' level='[none:team1:nk]' member='&quot;Kochi Tuskers Kerala&quot;' />
                  <groupfilter function='member' level='[none:team1:nk]' member='%null%' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]'>
            <groupfilter from='2008' function='range' level='[yr:date:ok]' to='2017' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796421353487:nk]</column>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:team1:nk]</column>
            <column>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[usr:Calculation_126100796423729171:qk]' value='p0.0%' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[usr:Calculation_126100796423729171:qk]' />
              <text column='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[usr:Calculation_126100796423729171:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[tyr:date:ok]</rows>
        <cols>([federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796421353487:nk] / [federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:team1:nk])</cols>
      </table>
      <simple-id uuid='{EEFB7545-260C-4E1E-840E-29476C74A657}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Match Statistics'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <datasources>
        <datasource caption='matches.csv+ (Multiple Connections)' name='federated.1cf7txx1i9gxrl1g6acyb1adgwp3' />
      </datasources>
      <datasource-dependencies datasource='federated.1cf7txx1i9gxrl1g6acyb1adgwp3'>
        <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
        <column-instance column='[date]' derivation='Year' name='[yr:date:ok]' pivot='key' type='ordinal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='24' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
            <zone h='5250' id='25' type-v2='title' w='98400' x='800' y='1000'>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='4' />
              </zone-style>
            </zone>
            <zone h='92750' id='9' param='horz' type-v2='layout-flow' w='98400' x='800' y='6250'>
              <zone h='92750' id='7' type-v2='layout-basic' w='89400' x='800' y='6250'>
                <zone h='46375' id='3' name='Biggest Wins by Runs' w='49199' x='800' y='6250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='46375' id='6' name='Toss_vs_Outcome' w='40201' x='49999' y='6250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='46375' id='12' name='Highest Totals' w='49199' x='800' y='52625'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='46375' id='13' name='Win by Wickets Distribution' w='40201' x='49999' y='52625'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
              <zone fixed-size='90' h='92750' id='8' is-fixed='true' param='vert' type-v2='layout-flow' w='9000' x='90200' y='6250'>
                <zone h='8250' id='10' name='Toss_vs_Outcome' pane-specification-id='0' param='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:toss_decision:nk]' type-v2='color' w='9000' x='90200' y='6250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='8250' id='11' name='Toss_vs_Outcome' pane-specification-id='0' param='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796416364553:nk]' type-v2='shape' w='9000' x='90200' y='14500'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='30125' id='14' name='Win by Wickets Distribution' param='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]' type-v2='filter' w='9000' x='90200' y='22750'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1450' minheight='1450' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='33' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='32' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
                <zone h='5250' id='25' type-v2='title' w='98400' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='46375' id='3' is-fixed='true' name='Biggest Wins by Runs' w='49199' x='800' y='6250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='46375' id='6' is-fixed='true' name='Toss_vs_Outcome' w='40201' x='49999' y='6250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='8250' id='10' name='Toss_vs_Outcome' pane-specification-id='0' param='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:toss_decision:nk]' type-v2='color' w='9000' x='90200' y='6250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='8250' id='11' name='Toss_vs_Outcome' pane-specification-id='0' param='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796416364553:nk]' type-v2='shape' w='9000' x='90200' y='14500'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='46375' id='12' is-fixed='true' name='Highest Totals' w='49199' x='800' y='52625'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='30125' id='14' mode='checkdropdown' name='Win by Wickets Distribution' param='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]' type-v2='filter' w='9000' x='90200' y='22750'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='46375' id='13' is-fixed='true' name='Win by Wickets Distribution' w='40201' x='49999' y='52625'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{61CF28E9-CC08-4F80-A56C-BFDA7AA7CCEA}' />
    </dashboard>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Player Statistics'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='29' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
            <zone h='5250' id='30' type-v2='title' w='98400' x='800' y='1000'>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='4' />
              </zone-style>
            </zone>
            <zone h='92750' id='23' param='horz' type-v2='layout-flow' w='98400' x='800' y='6250'>
              <zone h='92750' id='7' param='horz' type-v2='layout-flow' w='98400' x='800' y='6250'>
                <zone h='92750' id='5' type-v2='layout-basic' w='59700' x='800' y='6250'>
                  <zone h='35964' id='3' name='OrangeCapContenders' w='59700' x='800' y='6250'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='56786' id='15' name='MostFours&amp;Sixes' w='29848' x='800' y='42214'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='56786' id='21' name='MostSixes' w='29852' x='30648' y='42214'>
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                </zone>
                <zone fixed-size='387' h='92750' id='6' is-fixed='true' param='vert' type-v2='layout-flow' w='38700' x='60500' y='6250'>
                  <zone fixed-size='360' h='46000' id='9' is-fixed='true' name='PurpleCapContenders' w='38700' x='60500' y='6250'>
                    <layout-cache fixed-size-w='379' type-h='fixed' type-w='fixed' />
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                  <zone h='46750' id='18' name='MostFours' w='38700' x='60500' y='52250'>
                    <layout-cache cell-count-h='1' cell-count-w='1' non-cell-size-h='43' type-h='cell' type-w='cell' />
                    <zone-style>
                      <format attr='border-color' value='#000000' />
                      <format attr='border-style' value='none' />
                      <format attr='border-width' value='0' />
                      <format attr='margin' value='4' />
                    </zone-style>
                  </zone>
                </zone>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1550' minheight='1550' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='38' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='84000' id='37' param='vert' type-v2='layout-flow' w='84000' x='8000' y='8000'>
                <zone h='5250' id='30' type-v2='title' w='98400' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='35964' id='3' is-fixed='true' name='OrangeCapContenders' w='59700' x='800' y='6250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='46000' id='9' is-fixed='true' name='PurpleCapContenders' w='38700' x='60500' y='6250'>
                  <layout-cache fixed-size-w='379' type-h='fixed' type-w='fixed' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='56786' id='15' is-fixed='true' name='MostFours&amp;Sixes' w='29848' x='800' y='42214'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='56786' id='21' is-fixed='true' name='MostSixes' w='29852' x='30648' y='42214'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='46750' id='18' is-fixed='true' name='MostFours' w='38700' x='60500' y='52250'>
                  <layout-cache cell-count-h='1' cell-count-w='1' non-cell-size-h='43' type-h='cell' type-w='cell' />
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{ED9E0BA1-2E0C-454D-89E9-0C07826D2211}' />
    </dashboard>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Team Statistics'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <datasources>
        <datasource caption='matches.csv+ (Multiple Connections)' name='federated.1cf7txx1i9gxrl1g6acyb1adgwp3' />
      </datasources>
      <datasource-dependencies datasource='federated.1cf7txx1i9gxrl1g6acyb1adgwp3'>
        <column-instance column='[team1]' derivation='None' name='[none:team1:nk]' pivot='key' type='nominal' />
        <column caption='Team1' datatype='string' name='[team1]' role='dimension' type='nominal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='18' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000'>
            <zone h='5250' id='19' type-v2='title' w='98400' x='800' y='1000'>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='4' />
              </zone-style>
            </zone>
            <zone h='92750' id='7' param='horz' type-v2='layout-flow' w='98400' x='800' y='6250'>
              <zone h='92750' id='5' type-v2='layout-basic' w='83900' x='800' y='6250'>
                <zone h='92750' id='3' name='Win%(Home_vs_Away)' w='24199' x='800' y='6250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='92750' id='9' name='SeasonperfSummary' w='59701' x='24999' y='6250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
              <zone fixed-size='145' h='92750' id='6' is-fixed='true' param='vert' type-v2='layout-flow' w='14500' x='84700' y='6250'>
                <zone h='8125' id='8' name='Win%(Home_vs_Away)' pane-specification-id='0' param='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[usr:Calculation_126100796423729171:qk]' type-v2='color' w='14500' x='84700' y='6250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='42500' id='10' name='SeasonperfSummary' param='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:team1:nk]' type-v2='filter' w='14500' x='84700' y='14375'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='800' minheight='800' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='27' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='84000' id='26' param='vert' type-v2='layout-flow' w='84000' x='8000' y='8000'>
                <zone h='5250' id='19' type-v2='title' w='98400' x='800' y='1000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='92750' id='3' is-fixed='true' name='Win%(Home_vs_Away)' w='24199' x='800' y='6250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='8125' id='8' name='Win%(Home_vs_Away)' pane-specification-id='0' param='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[usr:Calculation_126100796423729171:qk]' type-v2='color' w='14500' x='84700' y='6250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='42500' id='10' mode='checkdropdown' name='SeasonperfSummary' param='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:team1:nk]' type-v2='filter' w='14500' x='84700' y='14375'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='92750' id='9' is-fixed='true' name='SeasonperfSummary' w='59701' x='24999' y='6250'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{98ECD8F7-53FB-49A5-B136-C878761DE225}' />
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='worksheet' name='MostFours'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batsman:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batsman:nk]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F7FC1D78-2063-4B74-BC87-2C76D15F66E4}' />
    </window>
    <window class='worksheet' name='MostSixes'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batsman:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batsman:nk]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F703556E-8509-4BEA-963D-E3C78DCB7A7D}' />
    </window>
    <window class='worksheet' name='MostFours&amp;Sixes'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batsman:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[:Measure Names]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batsman:nk]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C0E390AF-5FEC-4AF0-8A66-A105CA4E887F}' />
    </window>
    <window class='worksheet' name='PurpleCapContenders'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[cnt:player_dismissed:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[cnt:player_dismissed:qk]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:bowler:nk]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:dismissal_kind:nk]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{587140D4-AB26-4814-B300-3C43E03F5ECC}' />
    </window>
    <window class='worksheet' name='OrangeCapContenders'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[sum:batsman_runs:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batsman:nk]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batting_team:nk]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E7C15780-77B0-472F-9F05-9F4B4E761F05}' />
    </window>
    <window class='dashboard' name='Player Statistics'>
      <viewpoints>
        <viewpoint name='MostFours'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='MostFours&amp;Sixes'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='MostSixes'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='OrangeCapContenders' />
        <viewpoint name='PurpleCapContenders' />
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{FC740C40-5CD9-4720-9AD7-BB662850609D}' />
    </window>
    <window class='worksheet' name='Win%(Home_vs_Away)'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[usr:Calculation_126100796423729171:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796421353487:nk]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:team1:nk]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{4FB06C14-78C1-4BA7-9B17-FFE6C6211AA2}' />
    </window>
    <window class='worksheet' name='SeasonperfSummary'>
      <cards>
        <edge name='left'>
          <strip size='159'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:team1:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796415238152:nk]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796418088973:nk]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796421353487:nk]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796422586384:nk]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:id:ok]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:player_of_match:nk]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:team1:nk]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:team2:nk]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[tdy:date:ok]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{FE484835-D0DA-4D1B-B7C4-65DAAF32B119}' />
    </window>
    <window class='dashboard' name='Team Statistics'>
      <viewpoints>
        <viewpoint name='SeasonperfSummary'>
          <selection-collection>
            <node-selection select-tuples='false'>
              <oriented-node-reference orientation='vertical'>
                <node-reference>
                  <fields>
                    <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:team1:nk]</field>
                  </fields>
                  <multibucket>
                    <bucket>&quot;Mumbai Indians&quot;</bucket>
                  </multibucket>
                </node-reference>
                <page-reference />
              </oriented-node-reference>
            </node-selection>
          </selection-collection>
        </viewpoint>
        <viewpoint name='Win%(Home_vs_Away)' />
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{CB1322D4-ACB0-48A0-956B-99A55ED9C0BB}' />
    </window>
    <window class='worksheet' name='Highest Totals'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card size='31' type='pages' />
            <card size='47' type='filters' />
            <card size='210' type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796416733194:nk]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:batting_team:nk]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{9604EF23-9F1D-470E-8935-7EA9881F01C9}' />
    </window>
    <window class='worksheet' name='Biggest Wins by Runs'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796417036299:nk]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:id:ok]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:winner:nk]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{ACDD42C7-C2AC-42FB-8759-A94862060107}' />
    </window>
    <window class='worksheet' name='Toss_vs_Outcome'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:toss_decision:nk]' type='color' />
            <card pane-specification-id='0' param='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:Calculation_126100796416364553:nk]' type='shape' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:id:ok]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:id:qk]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:toss_decision:nk]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:toss_winner:nk]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:venue:nk]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{2E95D870-A4E5-4912-B45B-9B7A094773C2}' />
    </window>
    <window class='worksheet' name='Win by Wickets Distribution'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:id:qk]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:win_by_wickets:ok]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:win_by_wickets:qk]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[sum:win_by_wickets:ok]</field>
            <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{440F76D3-4F90-44D5-80A3-8C8074AB34C8}' />
    </window>
    <window class='dashboard' maximized='true' name='Match Statistics'>
      <viewpoints>
        <viewpoint name='Biggest Wins by Runs' />
        <viewpoint name='Highest Totals'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Toss_vs_Outcome'>
          <zoom type='entire-view' />
          <highlight>
            <color-one-way>
              <field>[federated.1cf7txx1i9gxrl1g6acyb1adgwp3].[none:toss_decision:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Win by Wickets Distribution'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{C7D16251-8523-4B4A-A322-CCF8BDCF64D9}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Biggest Wins by Runs' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOy9Z3ccV5rn+QuXkd4gM4GEB+i9FylXrrtnund6ds9+pP5Cu9s7e+Z0T/d0
      SSXKkAQJ730m0nsfkWH3BShKKpESRRKqmkP8XpGJiMx7b9wn4sZ9zF9wXdfllFPeU8S/dANO
      OeUvyakBnPJec2oAp7zXnBrAKe81pwZwynvNqQGc8l5zagCnvNecGsAp7zWnBnDKe82pAZzy
      XiN//z+6rmOa5l+qLaec8qvzAwMQBAFJkv5SbTnllF8d4TQY7pT3mZ94B3DZePw/2a0MAJe1
      p5+zX+z+ag0DsAYdnn39kM/+9BVtTWP+0UO++HoBfdBnc/Ux25kW/UaBh59/xr/+y//gqNY7
      kXbkN+ZZzZRxXYcnX/6RUlP/yeOz2Qy28+PPG7UaNgA6mUzpxwc4BplskU6thvEuGn4CtI+2
      +bfPPuPrpysMrO86ael9DjJHZI4yLz77rr9t/vjf/40/Pfyaamfwur9EJtN86V+MfodOf8D2
      zs4b9+NbpH/6p3/6px9/7NIupWm22/S9Y4QGeQptDVGJk4x53/pHXxtBJD4yTsiqU9BdguFR
      psI9qnacyTEPtRKMTY0wNT2No2ukJsZRROGdN6NVLFLUDEZjHtY29omPjKB1DCRHo+/YHKws
      spsrU89n6Dg+tOoh27sZlFAco37E08VNAkNJus0G0WgUAYN8ro3idlheXqOHl4DQ4/HjJ1R1
      mbAMnoDK6tNHFLsQ9cL22jKH5R5DAZe5J88QAkOE/eo77+vP0SlUGLl7h5Rd56jvYVDeZf2w
      SjIaoFCrM2hXONg/wPUNoXdbRKJRBLpo1gi3rqXY2s6gWE2eLm8SSY7QrVfYOcwRUkzmnq0S
      jA+j1TLMLSwwEJOoRpH59UNCIS+GKeD067Q1G1uSKBWyJEIenjx5hhCIE/Z7fnF/XvoEcKwB
      K5sHqBI0q0UWNtL4ZYdGs8VLbmwnhiCIVPJ7aKEZRgMuqkfF4/Nimw5e9bvOGt0yljeBXz6Z
      TS1BUon4IbO1z/DZWUAjm63Tr9do9NpoTohEQGR09hJ6q4Kg+Ll3/xb5/T16/T62XmNlJ0u5
      WuX75lmrlpm9egutVWF7J8OdDz9iOOylUa1iWgYDw2Z/YYlyu4EnPs0wGrl6BUdWEfnLrVwF
      BIIBH71eladP12lkNjhqHW+e2K7IzdvXaNRqlKvVH0wwRQ0iOAM0rY9j1FleS7O3tcf0zCzz
      jx+h6S1WV3c5LLb5+JN7+KweT+aX0VtZ9jN1MvkC+0clBK1NVz9+kjRrZRzZi/SGM/PlM0aQ
      mJ6ZwnUsbEdgZmYK17ZxbPuNfuRN6TWPWFrLUM7tY+HnYHueZyt5YkGLhaeLbG6uUm71OTwo
      MDM7eqJtScVDrJcHjPoFwEO7vMvi2g6GAz6/H8UXIKgqSJKEM+iyOL+IqwaoVasEgmEE4ccT
      Vvb48KseFFlGEQYszS9R7x1fWF1voQ0EQj4PtqgQCvhQFAVfIISrtTjIvmQJ9augszT3hC9X
      c8ykEkRiYeJjk4Q9x5snHl8QnyIj/9lmSmZ7ma+//JLg8CTVWoNAJIJg24QTKWJBldhQDG9g
      iLHRIaxenfmFNXRBJhqJEIyNMjY+jNw9xPImfzBpfYEwjtbkIFd+o9785Euw69jYiMiigOvY
      OK6AJP16rgPHsdC1AQgCHq8P1xzgCBIeWUTXdRxXQPV6wXWQZfnnv/BN22HbCKKAZTlIkgCI
      WIaOg4jiUeD5EIqiiOM4uI6NYdrHbbNNDMtBVhQE3OftdLGfvyR8e46Aiz4wUTweRFxESWSg
      6wiijKzICAjgOri4DAYGHtWL/Ctei+/GwkQfmMiKB0WWsEwD03JQveqLcZBEEdtxcV9cFwet
      r4Mo4VU92JaJaTsosoIgcHzTsC30gYHiURFcG9OyUTwqONZ3Y+mYuKKC6Dq4goDrOIgC6G8x
      Hqe7QKe81/zgttlqtRgMXvct/ZRT/tfn9AlwynvNKxdN1qDHxuoK5VYfrV1lZWWVRs/A7DVY
      Wdukb5z8C7Hr2uQOt1nfzeC4DsX0LnvZCrguzUqOavv5TkD5iNXNXQbWydhyp5pjcXGRQq3z
      Wsc3mw2c501pV3OsrG+j9dq09R+Pma23aWkmzUbrHe3rmOysrrC8uklvYP2yUx2TRuvnfCku
      pcwuK+s7P/ADvAmWpdPv/2VDb15uAK7D5vIKgUQKnyJQq3dIDUfZ3dtjZXWTeFhhfSd94htx
      5qCL6foJ9I/YTBfJNU0GhS1yjQ5NvU4x28bpl1nZqzM6Ekd8yU7Lu6BZrBKfnmR/Yw3TdTEG
      AwzTwrFtXNfFtm1sy0TXdWzH5XB/F8cFu1dhdb/GaHIIp5MnXe0zMAxc10HXdQzTxmoecVjX
      ONg9xHEdBrqOZTvYlsVgcPxvx7HRdR3Lto9fFvUBzvPfNQwT2zLQ9cHz69Gjo6uMRgR20mVs
      03hxvGV+18bvt9c0BugDA9fqsXtY/MmxaGU2yfRkRhMhBpaNbdvHmyW2RTZbwLat5211sG0b
      0zS/95lNYX2N4vP2GEaDcvnY4IqZIwzXxRjomNbxjuO34+w+77/tvPtN+JdvnTgD6p0u9a01
      tDNXOT8xysHuAeNjCeoFidGJcapLxwbw7t1O3+HxhknGdPa7ceI+g6h3gojiId8XOT85yvq6
      S6fSRDPqrK0PuHn7NhH/u98ZcR2LdrMFkkyncsjy+hG4MDKaID42S+lgl7BH55vFPc7f+ZRv
      NwBblTbj56ZJDEWg0WJ/ZYnSjsm9m1f57D8+g2CKv7uZePE7he0FvlzcITJ2kUmlTdOVED1D
      DAltarqBI8YIWUU2szUu3LlHP51GTU1glXZpODH+5j9/jBcopXdotnzMXrvLwdoTnq4ecO23
      /4XG7hMkAYIz99Bzq9hGG3X2dziZR+xm63z6D//ws2ORrg+4cWmKpcffkLryAXu5Ay4lBfal
      swjtHiGxw//4Yo747F2Scp2e5WV2NMjDb54SmbxMuH5EX7MIXb/+g7lTLpVxRZ3t/SIIEiMR
      lVJHx7YUziRc5vcb3P/4UybiwXd6bV8+W0SZSGSIex8+oJo7JL23R2ziDGOJIfReA63TYSCK
      Jzr5AQytRbrY5dLVi4QkiXq7Rb1YxRv2vTjGF/aRSF3gykSEUv3lrvN3QbdWwhOJY/Z7TFy4
      yXRMIpQcJb36CCk6RrvncuP6RbrN+otzgjEfxWwF0xgwMC3OX7/H1XMTNLJFJq/dxi9qmN9b
      pdRrTS7cuMf5yWF84WHuf/QpMa/JQAzwwb0bKK5Jo+dy594HDEd8RFKz3Lt2ntmLVxjx9qg8
      X6FNX77Dpw+uUC/XaQ/g5qVJmu0e8fEzfPzhTdBNvLEUdy7NYOh9nECCS5Nh6q8RpjDsh4O6
      ydXzZxjYNo7r0O12cZ6v+QrVNrfu3MDqdhA8Ye7fv0On3eXGrRs4PZ2p2WkuX7+OX/nx7Gl1
      ely4dpvRsIRm+7nz4ENmkkHCYzNcmByiUn331/cVjjCZC+cmWJx7xpkLF9G6HZbmvmZhK8fV
      i5PMrx5w4fzsiRuAYxlU8mm++uILdHUYn1miJqUYkdp883CZQmGDqhtjWKyzWzWYSsVPpB2x
      sWlu3/2Q80Me1OQs/fwancAUIyEvmilzfmqI4WSYpiZybibF6PgEogCe8CgzEYtHz1YwPHGG
      gzKhSJyR2UmMWpWJ2fP4osOMhlXGJka5ePM2g2qOgSMwNDyMBAyPjBFVDf713z7HVsLcunGe
      Yj6PIAcYHY0jAIbWoe9JMBIA8KLVdvhm4YDpmVGGhyL0CDOdijGcSIASYnQkgtvO8+9frxKI
      RIgoLkJ0ilQsxMToEO1qjo6mkSvWfzQWI+evI1a3mT+sMRINEpZsMh0PcY9B3zCZGBuhUutz
      7uwkqdFRJAHGxkao1rqcOz9DYnqc/WfP6BsOiuQjtz/P4+VtUhPjnD13geLOElZokjPTI6ji
      8TjIjkm9YzI2MvTOr+3pLtBb0GuWaVteUonwCd4MXKr5NPlan7MXLxLwvH24uuvYHB1s0zZV
      Ll+cRRLevvXdepEuQVJD73aJctL8wABO/QCnvG+cPgFOea85zQk+5b3mlfkA2Z1l5hY3wBel
      kV7h6eIahhIhGfH/ao0ztAaPv3zE5vY2wcQwC988ZGsvx0gqyqMvv2L7IEci5uebrx+ze5Ah
      lhzD9w7WyH9OYXsbN+JnZXGL0dHhF+v9g80FRMkmU5OJh5UfnNNvVDCUAJ4/u8WUShksy8Pe
      5hKB+Cge6fjb9GaRlu3F/+0JVpftwyrxWAiwqVaa+AI+BGD5yZ9Y396jUB+QjMg0ei4Bn4Le
      apFvtYgET24dXt9Z5rPlNQ4zRcbGxlB+JgAtvbWAGxjFK1msP3vE6tY+siRQapvEI4EfHtw6
      YqFg0jncxT86gvLyr/wF6Hz5739kL31ATRMZS0Z/dMTLDcAxWN88ZGxqgmQiRKli8uGDm+Sy
      OUZHkm/drNdFlL1MTI0jGxo91yWRPMP5lMPGXpeJCxeYScpUSj1sj49IwEM4Gsevvvuo0Eb2
      gK1sgTMXrjCoHDI3v4wlB3H7dfwhP7U29Ns1JLvDoyfzDESVvbnP2ajoJH0OT+bm0VwviViQ
      TrPI/sY24emreAdVFpeWSBc7xAMSpsdPbmuRlfU1xGCS3N4GB4eH2I7N1w+/wfaGScUj1Noa
      H9y9Q72cJRz2o1sK1cNVFld3UWNx+oV9VnayxBI+tpe2qPQ08rvrZMp9RkYTb/XY71UajN29
      Q0BvIXh9bC/OsXtUJ6CY9PHTKOSwjRZP5hax5CDoddTYOPKgSc1SeHD3FhHFYml1jUz6iEg8
      wfriHOlim5GYQqEnI/cbBGMBlp4+pdpzoFdheX2NUssiQJfHc/OU2zZBscez+WVsT5BWMcNO
      poDTLbOwuk90ZASv4lAsthlJxREkFUmvMDe/iuCPUstssL62+aqxcBFFCUWC5dV1cF3cv0QC
      hm2yt7NDYOI8yeeJaD98Y3GxTBvV50HGZWD9Qtf/6yKIiIKLaZocFpp8/JtPqRUOXvx5de5r
      XH+UfruN7VrsbKa5ePU6D+7fw+53sV2bva295+mBArIsYBgWel9n+vItxrzQ6TRptvtYaoRP
      r4xR6dmEk5Pc/+A8LmGu37zNjfOTAAwaef7bP/8/COEJMLu0mxVaJPj0w7v4abCwcsig26De
      bdLVVS6fGcU0bRxbx3rrCJY+D//l/2Ov4RI0ijjJa1wfcSkZXvLpbartAXq7he3abG3/Wcri
      9y7e0NhZ7l4dpVJqoekG1aNNav3vDs1ur1Hp6tQqRVpNnSv3PiaITrrU4KPffISk91lbWkQ3
      DYqlCo1mh8uXL+E6NmCjPw/VESUJ1evFsS3arTaO2WNrP0vfFHjw4a1XOcJUxocD7O8f4g+n
      iKhd/vjZVwSGRt529H4RvVaeza00awtPMeUIRztPebLR4Nq1cTJr8yxulBiditMsZClU2yeW
      E+Dxhbhx9x61wz1iQZE/ff4nlOAwsseDKMrc++S3dIqH9PQBgqQQ8KtICjx7PEe7fxzTH/Af
      W7Dk8XPu2gfI3QwdS8anevB4VSTZg9en0Coc8tWzdQRBxB/wI8kePLKHfi3Nyk4WgODwNP/1
      H/83xH4V05VQfCGM6i6Pnq1gSjFGE35k1YeqqCRGhpFwkWQRTevzluE7SEqE3/3DP3JuSKQl
      xejtz/Fkr8tkagihWSKQSh2X1pFUgj4PiuJBFEAJhpE6Rf742ecc1foEAj4kRUXGwbRtAqEQ
      oijjUSQ8HpWR8VFEB/yBIB6vD9Ujo6oeIrLFF198Tbk7YGJ8FNsVCQb9BKMJgl4FURSxDQ3d
      tAEBo9tgb+8QzXKxTANRVvF7Fbz+AIokn+4C/TXhWgYrC3M0+i43P/yEqHrSrsZ3h9GtsrRV
      5Oatqy/ea06CcmaL9f0CqZnLXJwZeWv/yw8MwHVdTu3hlPeJH6wZOp3OqSPslPeK0yXQKe81
      r/ADQDm9weOFNQwpgNM84snCCobkobi1xtr2DrU+jA7HTjQgzrENtpbn2T6qMZKKs7c2z2FF
      YyQeppDepGn6iQQEFr/+io10kXhyBFV5936AamaTR/OrDAQfiejP77EXCrnjShA45A82Wdw4
      JBZUaFkqAfWH+w5Wp0x5INGpVgmEg+9gPHXmvviK3UyB4FDyl20L2xq5codw0PfKQ/qVCobf
      R6OYR1JUECSk16jF1Knl0fBht4v0LIGOZhDwemgWD3j0ZJGWITEcj/CysCTHMrCRePEzgw7l
      nkPA+/aeglc6wnLZHJfvfshoLEAmm+X63Q9JxcIMj08yEvWiO8prTYa3wbJ0ZF+CmF0g3QFX
      ChN3yzTFKF6fQbMskowOKHRDfHTvyolMfoBGrszsB3cpbq4TH09RPkrTMUVk10SQPWi9HoN+
      k0y2hC8YJrO/TTI1jtXOs1ODD25cQOwVWc93sQcDQn6Fw4MDBo6COiiQ1oN08lmSw1Gy6TQo
      AWytTaGQx5Z9yLbGYfoIV/Yimj3SRwX84RCDXpdyvQVGh6NCg/BQBJEurV6Ea7N+DsoDfPTI
      FuoEQiE6jTKFfBk1GEZvV8nki3h9IVqVHKV6j3BAZPuwznjq1VGXraMj2rJFtaITU3o0nABW
      u0q+VMYbCKO3ymTyVbwBP43iEfWuSSgUQBJsdra2KLcsZodVMvUByWiQeqPK5LkbOJUtOvIQ
      AY+E3u1h2SblQo6uISBpFTpiiG75iEpTI+wxWN0rYNs2oVCQt6mF9orbgwuWzuMv/oPk9GVU
      W+PrLz4jOX2J62fHyGZLjF268ea/+pooHj+ufkBNTDEctLGdKBFFJ68JDE+EqRZdsEWa5W3+
      4/ND7nxwn1jgl1cH+zkMvc43X3yJogRp5/cotgWE3AqNoSSx5Ci1owwxn8GzpxuUei7f3ha6
      TZ3hsQSy4kFWJPragKZZJRyQWF1aoCeG+C/3p178zuHyIx5t5fHG8lxNyijJUQ52dvEyIJiI
      sr2xg1XfI1PvM9W+iVupMnX9Civzz3DC00ydPfYTpDfmKZf8TF66TT2/wdzCBg3nH7Er24zG
      A+ykA5jNQ0b8JhulOFJ2i/W9I9y//z9eYzT6PPlqlw9/85+w6st0I8McrB8yPBoge7hHvakR
      8Vvkc7C5sMDMtbuMA4ovgqdXwp28j/i9Ila21ubJxpcoHpVh6YCWepby1jZyUMJQwuiFA7wj
      KnrAprS7yVa6iPCHv8VFQGvkyCoBpkdCb3xtX+4HcBz8Q6NcvniOXquCPzLGpQuz9FpNbK2C
      riQIKicfRqS1S+xmOwyFvaiCh1zhkL2dPMGIQrVcpdms0+rbnDl/gdGol27/ZF7gPd4YVy6f
      IRENYTkuoigjCTA8McHhwpf4UjNUGyb3P7yPaH6XUxsZjpDd3iefL9DVTUYnZxhJRGmmj5i4
      +YDxIS/frzXmSl7uffQbPr5zGdUfZXp6hoDq4rigyMf1g9TwCL/53R+4PDNCYuIM06kk569e
      Q27tk28ff09ifIaL5yZo1VtUuyaffHAN0zQIx0eYnhpFtB0EUUISwNR6GN4hHlyfpacf5+ea
      gz6mZdPXXlah1M8nf/tbyrubGM9rG0WTKSbGx5BdEyQZUQAXlZu3rlI52qFrQK9egNQVxPIe
      mv3da6fkDXHvw0/43e8+IqK4VMslKo0OSD6mZ6YZCqm4gNXrYAVHuHdlir5uvaizJLxlKPfL
      l0CCgGgPqDR6nL94Ca9oUGlqnL9wDtF2iA4n8ZxADc4f4TpovR59TSOSmiIkDpCHJkkFRfKF
      Jh5VIBhLYHWbiMHksTPmBJrl8fmJxBJEVQk1OoygNfANzxARdNLVAbeuzBLySXQGIjNTowwN
      DeFVvYgePzG/QK2lMZQcJeT3EvT7iA4PozXqpCamicUThPw+YtEQw2OjdGoVFF+EZCKGx+PB
      7/djtAo8XtokMX6RaxdSVGtNQrEkQ5EgqkdB73dwAilmUxFEQcLsN+maEmfOTBH1K2iun8mx
      YYYiITxqAL/fS+VwjdW9Emeu32PYYyIEhxlNJhiKBBBsHUdS0HUDn/eHT1TZ58PvCxIL+VAC
      Q4QCASJBL6rPh9/vp7i7zGa2zpnzFxGtHpHUNMPRAI5tEx8eZngoiCkFiAS8eBQZj+rFq6rI
      kkggFKTVaJKamiGZGMLr8eDzyuxu7ZM8e5GQoyGHR0iNDCMOWkjBEaZSsbe65qe7QG+BZegY
      joTPq5xoQoze76ENLELhCPI7cDK5rku/28ZwRCLhIOK7umu4Dt1OBwuJcCjwbr7Xtel0dYKh
      wImM8WlCzCnvNadPgFPea37yTdbQ+xiWi2Nb9PrHohDf//dJ47ouWq9Du9PHdV30XpduXwfX
      xRj0GZjHNWm67Radbp+TMmVzoNFoNtEGr1fEyTCMF20xBxqtVud5QdgfN9C1jwvFGob5juJt
      HTqtJs1WG+tlKh0/hetgmD8dUWubA5rNJt3+4LXH+3g8XHRde1Gf6K/ltvtKA3CtPs8++2+s
      FjQK6V0eL64AkE/v8WRh5VdpnDlosbm2yfqzrzgs1Xg6v8j8o0dUOx12dhfY2Kljax129/dY
      XHhKuaWdSDty60tsHOzz9eMFXieaeH11CdsFZ9Bi7sk8+/sHtIs77FR+vLw0KtusF7usLa2/
      I+2FNnNfL7O3uczaYeWXnWq2WVpP/+Qhjb1Nlvb3efJkju5rVp7b3FjDMjX+9MfPafZ0tja2
      fnIc+606jc7JXMs/5+V+ANcld3jA1NnzlIDxM5doDTYAmDhzkba+8as0TlEj3Lh9hY2VHXC6
      zJ67QUQukm9LXL16kfV1FzkQJShbtEQfAe+79wEctyPM1UsX2XnylG6zyMKzVRwlzPREhETq
      DKXMPgGPxdZhhemL11+c1y5WSV2+xplEBBp7fPboG3KqxId3rvJscRlPMMnNceF7xx+ysp0m
      lJzGr+XJtzUC8VmSYp39UotgfJpRb5/9QoPpixeo7+0x8McIWg1qfYUPf/8AHzDod+j4AsyG
      fGS2Ftk7qnLm1gMK69+gaSbj1z+hl1mi2W6RuvJ73PI65abG9Q9uv8ZoeLh88zz1tSUKm0v0
      Lt2lebBCKiTx1UYFyePj40sjLGwdEkpOcefyLKNekUy9y/hwlEqzhytJ1DIbrO0VmbxwDbu6
      S1XzMBITyZV6TM1M4vUJ7M5/RcsQuXrvAZnlL1AS57Fqh5jeBHfv3ML7DqLfX/oEsI0ea5s7
      bG5uc7C7/1p3vZPAMftsbqU5d+MGMVmkP9DRuhoe33cT3bZMZi7dYXpIodbp/8S3vTmGVuff
      /vn/xo6ModUrzNz4mEsJB9Eb43BvBUMM0aw3cSyNw6Pci/NUv0K33cOxbSzH4dLtj7h2fpRm
      uYLhQO5oj++vqg421+kaNpquIXtjfPL7vyUkdOi6QX7/u/uIWov1jV1sx0Ef6MjBYT66fZlQ
      0A9Wh+7zm+b05Tt8dOcCtUqTWq2Gozc4zDcIj0zzh9/eRm/28Q6N8dubZ2j3NRqdHnorT672
      OnddjScPv8QJjhFSbEzbpts51o67dv93TA2HyGyv0xnYaNrxUjk5nSS9ukH07FW66SVE/xiN
      Wh3H7HNwVGAgePnkwzsIrsjdDz8mKBlY/TJO5AK/vTNLrtLGFxvnztWzhEMBBgMN82eWaq/L
      S21IUoP8/X/9P7FbR6TNBAcrTznIlNBsD2FqHKQraLaHW9fPcpKiqoN+g9xRlkq1wpVbd+kd
      LlImwu1kl28ezlNvy3gDZyhl0piin1szJ6NfFhme5h/vfERtbw85NkZxbQ7Xl+SDywkerS9y
      6/e3qO6UUA2FRDKCVzARAF9iDG9+gYffZLhxYYyQV8IrB3EVB49UYWJiEo8/TESQcWMRhqaj
      tFb38fv9BPwSIhCKxDDbFR5+9QRBGeXK5TPsFdr4fAGCkoDwPFdPVHyoEoBCPfeMUllm5tJN
      TCuA7ipEYwGCogSSl1hMopbZ5avdEv7L43i8Kkpqiojfi4lAu5pDCAzRbmk/CovwBIf5zW9v
      ERFFtJrJN0++RvEHUHwh/DKIoRCRxBWqK8f9AMCbIuQ9IBEN01a8jIyH6RkB1L5ALBkl6hUA
      gXB0CI8k4viCCGKQUG2Fr9cEbty5jdZyAAcXAVnxPBcqeXtOd4HegnbliHxXOU7MOAkPHAAO
      2Z019gptrt6+RyL09sJ4rm2xsTxHTfdw74M7+OT/dRJv3jU/MABd17FOKq/2lFP+CvmRUvzJ
      3clOOeWvj9Ml0CnvNa/IB3DI7qwzv7LGQPTTye2wvLGHJziE3crx6NkSrjdKLHiyotmW0WXh
      8RO29o9IjCRZe/aI3aMGqeEIe1sL1PUgcb/L+voKLcPD0AkV7aplMhAOsLu1h18VcUT1NWJy
      XArpfVw1RDV3gOTqFHWViE9if/0Zi6ub1PsuqeTLg7l6rRqu7OeF9HE7S0YPEvH+ZZ/Q7aNt
      /jS/TLHWJTWS/NlkmGJmG8cbR5Uc0tsrLK5t4VFVGppFJPBn86dXYrtm0Stk8caHXhWr/wsw
      ePbwS7b2D9BFP8mX5K+8MiNM8YWYnUqROzqgo8ncvXmO3cMsjWqdO/cfMBT0IZ54RKhAfGSc
      sFUnr7sEwqNMBbtUnDgTox7qJUgm/ah+L932gPhQ+ERa0chmqXRqeMOjyGYT1+sls7HBxmGO
      5PAw2a0FVneLxJNR1p89pjaQSQ6F8SouaytLDJQEEwGd/CBEMihTrLW4e/cereIBuikRiPio
      Fmvo3Qbrayv0hQBeRwNVZf3ZYwoti2GfxpdLB2gDk2Q88u4C2H4hnUKF1N27qJ0qeEPkd5bY
      L/cJyxaG5Kdbr2LoTZ7MLSKHE+j1LEp0HMVok6nrfHD3NgFBY21rm6NsiURyiPWFJ+SaJqmA
      zUFLhGaZSCrO2tMntG0vstFhY32ZhqEQUS2ePH5Cx1QIKQZzcwuo0QRaq8Z+OuEzur8AACAA
      SURBVItktnm6uH1cGEu2aXREblyZJl+s43e7PJlfwxdL0q0esbqy9ipPsIA7aLO2k+Pqjbuc
      HQ/wbH6FZrfLoNti7tFXPFrYOnHV+GOl+H16oWlGAy5ej4rq92GZzndhupKC7x2kxv0UxqDJ
      1n6JcMhHt1FBszTqPS/nUlFahVUq4jTjEYVOu0qtY6MqIrgge4PYnRaBoegPIhnNdpk//elz
      Om6QZiGLiU3uKE+1WGL2xl361QKDbhvdHKCbDpndFeo9m8nz1wlYTRrdv2TAYp+v/+e/sV3u
      4x3kqEsTTMoN0h2T9OEB2UIVS9NwXJOlpdUXZ9mWhUdVkUQRWRLxBJNcOxMiV+owMG3y2wtU
      vl8Ya32BTKPHzvoK+WyesSt3oF1hc2uX6/c/oF+rsPz0ER29z8rKFgfbO6TGp6kUi/gC/hdF
      uKrZXZ4ub+ELBNG0PvagxfLmAYVilZu3Lr9KI8xg4ekC/X6Hg0wBfTBAxGVi8gyp0QQe768j
      0txvZlleP6JWSB8rxe8s8Gw1TyxoszS/zPb2OsVyieXFZTY3Nyi3T8Z97vHG+M1v7rG/vvHC
      KRgKh1EUBcETpJXdYOewgCCqhHwCO/uHOLjkDnaZvP0p/cwmPfO7Vy0lPMzvfv8HHty6SEAx
      mZ+bp9jsI3n8BHxelOfJRla3QccSCQZ8OK5Ibm+VXL2PVzk5UfCfx8/933zCVNRLHy/d/DZb
      +S6JeAKrfIASH6FRraIEonjE726RajDIoJrl8ZM58vUuwXAIRfFgdTv0LIdw0Mv3Q5f8kQgB
      X4CJqUlk2Uco4EVRJLyyw8rSMo2+QSQSxR+MMjExTGBohETER2QoRrt4SKFxPBckRUFVJJqt
      NtVqlUAogii4ePxBfJ5XFcZyXXS9j2k5yIqKLNgYNvh8PgTXot8f4PH5frYw6tvi2Bb9vgaC
      gNfnxzF1bEHGq4j0+9qxUrzqeRF85vX5UOR375qzLQtBlrFNE0E4Lrfn2ByL8tk9PvuPh/TE
      IH/7+48RrAGioqIqMrZlIckyjm0hCCKOICKLApZlIUkSgiDg2CZ93UBRPMiigCjL2FqdL79e
      4/7vPwFdQ5BkVEVG0zUkWUX1KCeS+PM6OJYFkgSOjYOIberYroRkd3i8uMe9Bx+gChb6wELx
      KEgCCJKCKIBtGWi6idfnBQQk4TjbzdB1BElGUWQcBATHOa5k1+8jSAoeWUKUZRzLopze4NnG
      IcPT17h3ZRJN05FVL5IgIMsSljFAN218Ph+SCHq/j+W4qF4/omuiGzaK57hanSyJp7tAp7zf
      nCrFn/Jec/oEOOW95pWLeFPvcpQvA8eq8Zl8CYBOrcDy8jJH5ZOTJP0W17UppHfZ3DvCcR1K
      R3sc5CqAS+loj/1cBdd1yB9ss5vO85J8k3dCp5ZneXmZYr37i891Bx26Lyuu8GcY3TorK8sc
      5quvlSyidZr8UiH4d4HRrbG8vEK23PxBOx3LpN3p0ul0XnYW2ysrbB9ksZzXvUgGnZ+RbW02
      334OvsIAHKqVKvliAYBKuUyheKwgvpfOMTY2Tiz06uph7wpz0EW3VNRums10iaPagF5ui8Ns
      jnTDQCvukN7bJatJWO0SpTeYoK9DM18hMj7K3voqputgGgaWbdOtV2j0dCzTxDBNXNc9/ptl
      08ptkK4b2M0MmYaJaVm4joNhGFi2g+vYmObxsQDdQhl1eJhW4YBaRz/OIDMtHMfBcV0cx3lx
      vm07lLM7tAYupmlgWvavpt7QzhbxjY5QP9yg0NKwLQvDtLAGGofZLEfZzHEbHYf8UZZjG+3Q
      7qv47Dor23kc28IwjOf9sp+Pjf3dZ7aNYdTJHDWfH2sej4Pj4joO/VaNaqvPzt7ud2Pyhiry
      r9hPExmdnKHRXQdgdHKWRvc4CUYw2qysrjF76QZB39tHJv4UHm+Y4cSA/V6CId+AqHeSiKKy
      vNNi5sIUPtdPo+bQLx7QFhU+OHsynmnXteh1ewiSjNGr86d//yNdT4o/3J7FFX0sPf2fbGQ0
      fvv3D5j742Nmb95HLG1w5GpEz0lsbsyRkW0+vjHLv/3xS9TkGe6OwGrVRBBV/tOn9wCXfq+H
      7YJoNfn8j2sIIkzNjuOoI1j1LOOpEP/+2SMCYxe5kgD0Cv/vf3/I1OXb3Lt+5sR1m4+RiMYT
      nFM0npZrbHzxNaUOfPJ3fweA1iwx96iEHD+LqFUZm5wAwB+KMnkuSeXZM462cnyzvMWFO3+L
      WdzCCgwTs8us7BeZvvIhaj9Dzx6gBi/x6PN/JVPpcOHqHQKhCEq/jOQJ4ISPe1vcX+GblQy3
      P/4tsyORX9ybX7iPaTNx7hafPrhGLnN04ncdQ2uTLnS4dPUCYUmi3mlRL9aIxf1UG23a1Sr9
      fofE+etcHotSbb3s8fsOcF2apTxKJIHebpCavYrf0jhe2egYQozzowG6psr1G5fptapMn73A
      1RvXCagKV+5+zPmpYZqlKmeu38QddJDUIHcefMJ4/NvwDRe9U6dreQgKPfzjV7kxM4QdGKWX
      XcHwRunWmpy7cRNLe/7ol0PcuH4Jq1PDOGmv5A+GwyWTrRANOAyIcv+Da6jP92V90RSffPQB
      oT8XRwO6tQy2HKHZd7h57RytWotAbJSP7lyl1upx484HpKIe8MV4cO86imPQsTzcvXuPsdEE
      ZrtA2/YR/N5tO5Ic59LZCWqVX5j++ZxXPAFsdpcXKFRa9BwPMadJodxCsz1MRh2+2ahw6cbt
      X0EpXqeSS1MuZrl650O8g1Vq0jA3zk2yv7ZIXYpz/foYm4vzZIUQt8788jvA6xAbm2YkkaBf
      zGH7wpi9daYvnEPvtpF8MYbCEl17nGTQQzrdYCh1lkDcy8biAonLUyRVEIUEqmhztLrP2XNn
      CA4FESRIJo8113zxFNfPRKBdpy36SDgb7HVD3J72sZ2VGRoeJorM4doR586dIRpWkD1w1GwQ
      Sk7j+ZX8Av5EgMcPHzIyeZ5Lo6PI52tkK12uj3lJiUkEHJBUkvEI0Rcz1Ue7+Jg1fZib1y/R
      zFkc1jXOTibxqSKiADdv3WBx/ZDpSzdIhVrMLWWYmbnCSNRgJ1shNjpFaiiIHZrC7/aRFC/q
      2Dg4JvVml5mr59+oP6e7QG+Ia1tkjrKMTU6jnKAiiqW3OSprzEy9vRrKKT/mBwbQbrfR9V+n
      5Mkpp/w18COJpFNOeZ/4UUbYKae8T7wyIeZod51nGxlmp1Jszj9ieX2btq3QyW2ytLpJ01IY
      jZ/MS+e3fKcUv0MokWTh0UM2d3MMp4bYWPmGcifEcNjm4ecP2UnnGR6fOBGFwsP5L9nqiozH
      AvzxX/4ZT2yasP/VIdh7e9uEo/EfCTcUc3m84RAiGjvbJeLxP8tfsHW2D/IIWg/CoXeglP7u
      qe+u8NnSGplMkZHRMTzPM3bMfoftwyMa9SrxeByA0ov+NviX/+szMvkMcniYiP916jc12N7u
      EY//OMlJb9dpDVy2t9ZJjaTeqj+vMACByNAwWq9JMjlEqVAhlkyAoHB2dhLbMhHkAMMnlIDy
      Ld8qxStGn873lOJLepwrF6LUSi5eo4o8fYnpiETHkIicQJZar96gMTBIhuAg1yY5HKNe7iFb
      XdqOyfrjx2yns1TyR9R0CaedY2v7EEPy47RzPF1YQw7F0ftt4rEYYFIudbF7BRZXNqgPRDxG
      jblni7QslYgq4vWrLM99Q6aqEfHaLC0ssJ9tEPJZzD1ZAP8Q0cDJ+mFeOhblBmN373I+YLLT
      dOnm1lnfKzIUj1JvtTHaZXZ399GlELbZf97fPiajPPjgAjubO0hGk6dLa3jCCarZfbYzJfz0
      eLa4hhSI0cpts7CyhuNJ4nYyLG3soXg8aIaL0SzRMwUEj4d6pURIsXk8t4gQGCLyBuPx834A
      xwFRRpIEBoYBCHhUFcd6V7Usf4LnSvG+8Vcpxf9KCArRoMzuZpbxM2OAQa3Wxeh26OkaamSC
      qdEhLly+gWj1kHwRPvzkPv1KiUarhWO02TosUKvVf/C12sDg2p0HSFaPQrnNh59+wnDET6tW
      Rzf69DWL/OYWNX3AyOwVpoMSXcvEFQSMv4KgRctssLx8iNYsUu8fe7QlNcSDB3cw+v0f9RcA
      93izxbU7bO/kqNe7XLtykeXFBQxTI5cr0jREfvPb+/isPkvrWxham1bPoFgscVRpIQ+6dPXj
      /tvPx2Ogv9l4vMIAbHaXn7K+vs7c+iGu2SOdzuIILlsrqxymswx+BcdLr5Vnc/OQ9cWnmFKE
      zM5TnmzUSQY1vnn4hPX1ebreMLnFxyztFojF3lwq56eQFIWxkSj5vkjSpyBLfnq1bZ6u7uAI
      Ej6/F4/Xf6xm7lEQjC5fPfwKIRjFHgyQFC8+j4TH8+2jX0BWJBSvH48i4VVVVHHAV18+pqWZ
      yB4PrmNi2S7BYABRVvD7VDxeL5Io4lom3f6vUzvzzxFlk7k/fc6XmxUujE+QTPrx+IN4ZQlF
      fq7ALsuoHvl7/RVJbz7lPz77kpGZMwwMA1n14VUkwkMJAqrMxOgINgrhcACzVebLrxexvH5G
      hqIIso9QJIrfyiOFJ5FlGVkU8Xg8iKKIaxn0tDfbvTz1A5zyXvODXaBTWzjlfeNHSvGnjrBT
      3idOl0CnvNe8si5QJbPJ4/lVDClAIuInu7tGTwjjdvI8fraCHIwR9p/sNpxjG2yvzLOdrZMa
      ibO/Nk+6qjOSCFNIb32nFP/NySrF20aflfk5il0Hj2vhCfh/aRgt4GKax8nwRrfCo0fP0FyV
      ePSXqcO3WnVEQaFeySF4/Aii+KvWCOpXqxg+L81SHlFREQTptepDdWoFNMGP0ynRtQS6mnms
      FF86VopvmzLJoVcpxZs431eKNzpUuietFH+U5fLdjxiNBTA6Fdb29hA8w6iKy7mzY+wdlBhL
      xd+6AT+FZWlI3gRDdoHDDjhSiLhToiFEUX36d0rxnZNVik+vLxOavc7EUIBi5oCO1kdQ/IhW
      n8xRAV8oRK9Ro1gqowRC6K0a+WIFjz9Au5Kn3OwTDHk5SheIDUVYWVjgzI17RFQRy7SQVJl+
      p4856JHPF8DjR3IGHGVyKP4glt6nWm8RDPgplws4eo9s0yYu92jaXgadCsVyg2AkTK9eJleu
      4fUFqJdyNDSbSPDdJS+1MhnaikWlpL1Qirc7NQqlCt5AmEG7wlGxhtfvp1nO0eiaBEP+Y6X4
      zW1KLYPZpPdHSvFWeZOeMoRflRj0+li2SaVUOFaK75VpS2H6lSyVpkZIMVjdL+LYLsFQ4K2U
      4l9pALVcmo2tHXqOQqtaY3IyTt8MMD3iZWMzw9TZWfyek61PI0kKWjNP2QyRDDuonhjRsEtL
      DzI1IlOpQDIqsbG5xn46R2x4FN8JGEE6X+bc7CQeRaaYOUDwByjmy+Q2F1jZ3qFpiDQLJXx+
      gVrLJHewh+pRaGoG9fQ6j5fWGUpNUC/WGBsfJhoOsL48T8vw0ClkiYwn2V7ept+q4PoDHB5k
      aaZXeba+Q6Xn0M4dQGCIRDREu5Lh8ZN1rj/4CKeSoSV6Se/tELRqVJwhCrlDVKNCeeBhbXEe
      NTzMyJ97nN+CfjXDV4vbXLh+G6V1QMOTIL26idfr0G51SOfrSE6H/sBmcW4eNZIkmYggKyr1
      vSWc1CXGAi6VvksyGqRZSrO8tkfXEJEdDTkQIbe5SVdr0LZlGvkiYdVF80fJrc6xsLhEZGyG
      VneAOKiiCyGiwTdfibzcABwb3RZIDccpFgpYepv9vT0qHZFOPcfIxCSqoqCqJ6mPC3q7zOZh
      nfFUHI8A6UKJbqVCdHISo1Mknx8QjngJhGN4XR3XG34jb+DP4bRLpFsmtmngWjB94QLdWhHb
      Frl08zZjIxFsR+XMbIpOu49H9TMzOUavm6Ohh5hJBRHUEEZPY2x8mGajQSSepF2rIWJhiVDI
      N4kEFPyRMO22hiLCuWu3mRyN4+Dh0vkZBEGg1etx6dIl9rZ3CXlcDDWCT1U5l/SQ14O4ZpeQ
      ZKD5JphJ+snsHpI6N/vOwir61Rbjt69S2tol6DHRfSN4XJGZqSS9douerRBSbVw5ysRolFzm
      gPjEGex2gZY0hFPLEYlHaWrHBtDrdZiYvcrFC9MYzTLtgUU5VyI0FGPyzFncbgtVAQ2Frm4z
      m/RgSBEcQcQnDlD8CSLBN5fGesVLsEunXuKo2GT63HkCHgnL6KNbEq1SmkbPIBAbYWY8eaIG
      YGotdvaOcBCYPHuRQe0ITQozHlPZ2z/EdETGpqfpVXIYcoiZyVFOIjTfdSyODvZwfHGSYS++
      YJB+t4vkDjjIlBiZnEEVwe9X0LTj3GC/V0U3DVrlPJrgI5WMYw5MItEQWrvKwVGZ4YkZwvKA
      vWyV2FCC9tE2fW+E2dkz+FyNvcMcQ6OTBBSRYDAAgKb1URQvg34LxxURvT6wbfyyTceSWfn6
      3yk0NO79zf+O0Mzg+uJMjyXe2XUyul3cQACr08LFQfBGcA0Dn1diMNBZevSQdNPg40//BqFb
      xFJjTI8PM+g0EQMRxEGLgXC8JAv6VHSth6T4UGQRe9Bl9yBLMJIgGvah+vwY3QabSytM3P8U
      s3CAJXkZGkpQLaZxPFFmJ0beagl0ugv0V4RpGMgezxtPVtc9lki1BYVoOPTrV49zHTqtFhYy
      kcg7UqB3bdodjVD4l20WvC6nSvGnvNecPgFOea955Xa2Zei0O12cv6B9uK6L3u/R6Wm4rstA
      69HTBuC6mAMdw3KwLYN2u0Wr3cH8pcror4ll6LTbbQbmDwVjHdvGsp2X6qo5jkWn1aanDV47
      atZxbOyf6oPrvDN50DfFsQza7TZ93XijyFzL0Gm122iD148mdmzz+fhb7zwC+eX7mPaAlcUF
      bEHEF5/i6pnRd/yzr4c5aLG2vM1AazJ2+S7Z7TVsy+bavbsUM8uY4kUuTQjs76apFItcePAH
      pl+SQPG2ZNcWyToyVtfkwacf4Xu+09orZci7Qex2hSuXr4DrUCiUGRlL0evkePo4g+qzmbj8
      gKnEz+/F9/slarUA09M/TjTqlPO4vgBbhyU+uH7hXXfxtanvrrPatXD7A+7eu0evVWd09Pn8
      sDVylR9Lq36fo/VlirZIr2fx24/vv0io+Sk2l57SdxX80VEunx1/g1a7/z977/nkyJHmaT4R
      iAgAAZlAAql1aS3IItkkW0x374ytzazt/aFnd7Znt3u7sz1s6tKVWgGJhNZaBRDyPmSxyG5W
      kaxiZU/bMJ9PkUBGwN0jPNz9ff19f9RKJUJTs/x1tpaXdwBBIhYNksq36Bj5f7cOILtDLC1M
      0jZmUZweK+dvEXKVKfZcXL12id1dB09wkmvXZA48YeYjpyORJLuD3LhyBTm/yebBEc3jAxzT
      4OL1G+AGrd9j1C2RacsY/Q4zs9MgSqxdusH8rJv17UPElsB+OsfchZu0jnPcev8Gjz77FENw
      CE+u4PapLE27sLUa//3//QpBsFlbWcMVmcLutvAZI9wrJ/VLbj5E88Q5v7KA55Scf6/GYdDv
      4xE9iDi0Ox2ahSNc0WVWp1VaXY1xc4vo6nnK6SyCpTN//hKpwz2uXbuO41j0+0MEUSW/s0vs
      5jWyO9vEvCJ6ZIV+JY3VKlMc2oieKL//1S2Wzl1gb3sbw3bY3tnh+oU5to/7KFaP5dVF9g6z
      jOoZBja4g4uIVo/rt+6QSexxYW2K/YKDOm7jC/t48nSD7sjF9cUJrKnlV3QAUcAfjrNkWzSt
      V/fm02bUq5As9FhemsYtiiRzGRp6m9jVRWrVOq0WDMcT1I6OmVm7eSomUADbGlMrF6mlOixc
      mMAZzLM4F0EyDFqA1x/AowhYhv1CHR3Hpt2sMerU8YUXyZdLLC/G6Q2GhONzeCWQfWHWlpdw
      ixapcotazcGyPfgiM5xbjBOKhtl7+pDQ7BXMbhvp+fgfn18idbDHnujm9rm/9cvJw43b8zTT
      1ec6EiOWFpdJHh6SshbQRjJeScLr8WDbOrY+pl6r0u6dxC+I7hC/+vgSqiCQfvaIYj5Hsdom
      thjB6/XStW0c0c3KuSX83pMO3+v2mFtepVBqY5kd8jmbesdNRBpSr1UZmzai28e5xTW8skCt
      78PndjHWBlQrFXpaGHE8opxOE5hdwsykMUbgD6qv3guk9Vp0DTeXzy/8LDvrz8KxGQ0GaKMR
      oalFAi4deWKeKb9IudxGcYt4g0G8gQATfy249haRFJFmvcPihStMRcJIlsbAEIlNxQmoXkJB
      P4rbh9frJTIRxON24xIk+p0W7ugCqwtxvC4DwxVifjpOOOTH7fEyEVCot3pMTM0TkkxGtpe5
      +UUiHov20CQyESHkV4nE4/iDfrxelZDfh4zJwHazujj3k6YQb7UtvCp+f4hYUMUUJSbCIUTb
      wHAFWFmeJxTwEQoHURQFn1fF1urcf7xFaHqJhekobq+K2+1GFAT8IT/tZo/FpUUmIhHcbgW/
      TyU+HaNVb+ANTuDzKmCNqTX7LJ1bZSqk0h4JLC3M0qkVsUQv5y+cZyoaoN5oE4zEiIT8uGWZ
      dinJk51jppcvsboQIxqP0W22mV1cIhqL4lWUMyvQGaeJgz4aMtAM/MHgW1cUMgwDWX6Fj9tx
      0IZ9xoZDIBh4pZrlmR/gjF80ZyPAGb9ofnBM0rUBumnj2CaddpuRbmKMh7RaLQajn6D68DNx
      HIdhv0enN8BxHLRBj/5wBM7J0PqNXd5xbIaDwanJtjqOTb/XoT880QL4uW8MxzLotNsntvTX
      PNc0TWzbwdDHWP8O7y7LGNNqtb7nB3BsG8MwMAzjZWfRbbXo9gev4VeyMP7K7/LX6PrPfwZf
      2QEcc8iTP/8/bJdGJLefcpA8ptEdsrf5jHQ6Q6MzfNWpbw1j3OFg94C9p1+RLjd48myDZw/u
      U+/1SBw9Yy9xknajVznmf/yPzzmtYM5G9oD1nUNSuRLpxBEvu8U/jkmxcKKyc7S3QTJ1TCpd
      eO1OWyxm6Hd7bG3uMmhVaAz+to6x1tE+W+ljnjx8SHP47QNoaH32kkckkokXn1UKxecCGW0e
      frXFwdYzDrKNn/hLbRKJl//vqNuk0R2ysbX5xvX4hpebQR2HQvqYxbXzVBhTrXawFC+C6GLY
      bzOWRBbV01eIkd0hbty6zN52Apw+K2s3CEllil0XV69eZHfXwbFHHJU0Li7GTq0chcaI9997
      F0lw2Pzqz3zxSZ7Q1HmmlB7JfI35c5doJPcZWDrzF+7SSW3QNRwWLt3ArCQp9S1u37lNs9ll
      dm4Kn9fDcbXO1aXzpLa2Wbh+kdTWEYrdJdvu4w0tsDphsX9cIrZ0AbORpW15+ejeTRj3+OzP
      B9z7/R9wmsf0bQ87D+6jawaXP/oDhe0H9AZ9Fi+9S+loGyWywPs336bjzM3lmxeYaGfYLLco
      Ng+p9eD6rWsAaK0Sn/ypQHjhCpLeYmpuFoDZlUtcuRzlydMNimaZ/UyJxYt3GRQO6Dgqa5MS
      yVyVmdVrGLUElW4L/+RNDjcfU2j2mFtYxeMLIA2qWJKK4D/xf9RyB2weFlm7epvl6fBr1+al
      I4ClD9jZT7C/f8hxMo0nNMm9926TOdzn+vv/wK/eucj+7uGpJ8ayjSH7hxnO3bjBhCwyHI/Q
      +kMU77f7v6tH++QrRbb2dihUu6dSDtXl0B2dDO9qeIaPfvcHVLvF/t4hlgOjsUYgvszHH72P
      MO4TiC3x0Xvv4dLrNLtjBq0a1Vb3RfKmyPw5/uHj9ykl9+kPR1iWSb8/BNnPBx//GsXucbC7
      h2HDeDwCKciH926d7K50B7h7bYliqY5ljDFMm6nlS/z+3hrVmkZ4fo33riyioeBXPei9Hm9/
      surQ6QxwS33290uIgo42PnkavBMz/O7X7+MWbEZ/laxK19o4oodGs4XgaKQzZQQlxIf3brK/
      u4PpCGiDHrZ3gt9+/C4eQ2MveQwIyB437VqJ6tBBdQwM62R65FX9KJJAt/dm8lgvHQFcbj//
      +M//FauTI2PECRtFHt5/zPTKJRrZBKlSi8WL1089X/142KKYy1Or17hy6y6D6jo1QtyK9fn6
      86c0uxLhD+7xL+dvkk8eE4ufTqrGxbUlnjz6Cjkyx0I4gAgEwlEuX3ZxmGuiqn4UNwiijN+v
      Yps2oiTh84fweZvgmSOkepAnTsrXLmfYPy4RmV1jxjPk4VeP8fljGIMqX35WZXHtKotRla1U
      GdWr4vOrL5x8qurDH1vELKfRRT8+j4IjqOCWmIx4qexvkW/XiV9fRAAUr/cN4pdfjRKQePDp
      ZwQnprl1dRHrYoH2WMLrUXACAVw4IEoE/V4U8Zs3skI1fZ9GK8jVm7fo5EZ0bRfhiSAhVcIl
      wJWrV9jLNPAF/DjNOl8+qjE9e5XL0hLFlo7XF0QZljCCF1DEHj5FwQpPPE/lI+D1vpkf6MwK
      9HdEs1ojGI+9SrbnR7HNMdvrT+g7fu7euY77FIU7/qPwFx1gNBq9dGfjGWf8R+V7+gBnGgFn
      /JI4mwKd8YvmFesjh2o+xf2n24DN8e4zPvnkzyRydYrJbT755BP2MpVTL5yp93ny1Rd88umX
      dDWNp/c/57OvT9JoP7n/BZ/ff8Zw0Ob+F59x/8kWI/N0+nJx7xk7uRNV+kdffkKl/cMeh0I+
      y8viWtqNJie2izG5bPX7/2DrZAsVeo3mKVhu3g7dXI6ObZJKJNC+46jqFA+ptrtkS53vnWNp
      fbSX3JvxuEmlMqCU2qM1+vZ7czyk0/9O9mvHJpvLf/MHg37/hf+kmNrmT3/6Nx5tHGCaIxrt
      4fNTbPK53I/W55W7QV2yl36/TTwWxx+KEgspFBsDFhcXWVqIUa50mI6f9lZpgejUHEGzSWnk
      4AvOsOgfcFTUCMwsMOvXSR9VCS6dJ+rS0GwvwVNIi9IplygPdWYiCju7KaJTU2h9HZc1Ymib
      HG9vcFSo0Sxl6NlehvU0h8ksSjCK0czxaP0AfzROr90kFA4joFMsdJDpTvX06gAAIABJREFU
      s7W1zdDx4hMGPHjwkPpIIuhyUHxuth/fp9yHCa/Awc4m6eqAqA8ePnyC4Iucema+l9ErFWkY
      fcaWj7gfHt1/iKkEcQ1KaFKQwcBE1DvYjsnTR48Y4Kay9SX3UzWiQS8760/o2W4mw350vUU5
      W6dlycxHFA63N0kUWsTDXnq6jd2r8OjZJi41Qi13wHEqi8sj8+n//N+0bZn5qUlanRYXLt/G
      6WRxvEF6AwtJr/Pw8fpJihZxyJPNQybiUbq1KslcBatTZPOgyMzC9KtGAAGP1/s8ql/A6DfY
      SRQIBnxg9jlIVrh4ceXUG1sQRGrFIwaBJWZ8Dh7FjVv1MNIMvIqM4vEQnlnErKQ4OMoztn7Y
      df7G5XB5CKmQ3U8RX1sBNPK5JsNmndagi2b5ifoEppcvMezUECSVd969ReHoiP5wiKXV2TzM
      Ua3X/6LBG9UKy1duMexUOUykufP+B8QCHlr1OoapoxsWqWcbVDpNlOgSMTTyjSq25DkxN/67
      MGJv+whfKMDe1i6X33mPWvYQ3Topz/HmV+T6IqIxwrAs9td3mDt3gbvvf0BQtjEti4Nnmyde
      e9vicP8Ajz+ArvWwvXEWXCYNbUh7MCSZrfDB9WWKzT6Cy8Odd89Tqztcv3mLd29eRBDAHLT5
      9E//H5meh7Dcp97scJRtcu9XvyKojHj4cJ1hv8n+UYrd7WPOn1ugVGni93kwrR8QyMge7nBw
      cMD2YYpsoYzL5VBvtXl8/yFDrUcmVzn1WzBs59nczdEopjFROT58xpPtImvn46R2N9jczRIK
      KRgISJ7TlWyajgbYrY6ZUQVAoVs7YmM3gWGDV1WRvT78bhnJ5cLW+2ysb+C4VRqNOv5gCEH4
      fmtJbi+qW0GWJGRBZ/PZJq3hifNoNOqgjUWCXgVLlAn4vCiyjNcfhFGHVL58anX9Yby899uP
      6WQOkT0yW8+eotnyCz/F8tW72K08hWoNJA+q4kJQBPbX18mXq1iCG59bOpnCiBI3732I0MpQ
      HzoEAj5k5Tvbm/Ue61sH6JaNWw3g8SjIgoDeq7J9kMZxQPKF+eBXHxDxgTYyQXCB3mFjfYO+
      7iIcDhEIR5meDBGbW0SVXITDASqZA9qjH0iMNdY0DMtGlGQkwUE3LTweL5Y+wrBsXJKCx/Pm
      OWx+CrZlomkjHMDj9WEbI2xBwuOW0Ecnx27FhaZpuCQ37lNK1WibJrhETMNGcgk4goipa1iO
      iNut4NgOggCiKGLZNtgmY93C7fGCraMbNrKiIOAgSRLgYJo2guAgii4s20Z0bLSxjqy4EQUQ
      XSJjTUMQZWTFhYCIY1sgwGg0RvF43/r++p/UFpYFoohjWSAIjEcjJLcHSXBwBBHHAcGxcBAY
      j8dIsoIiu9C0EYqioI/HuCQFxS2DY58ocGFjOgKiKCDYNo4ogCNw8PQzjss9Lr77G5ZjPiSX
      gGkCjoFugdftxrYtRFHEti1AwHEEBMdkpJsobjeiYzHSDRSPB8EBySWi6yMMS0D1es6sQGf8
      svmLV+ZZQMwZvzTORoAzftG8chJpjPrkiie2fq3bYGd7h/ZAZ9xrsr29Q2tw+iOF41gUMwn2
      j3LYjk05e0SqUAMcKrkjUvkajmORTe6TLtZPbVHuWAaZ5B6pQo1Br/ezA29svc/u9hbFWue1
      yzwcDjBNm36nydj627+79F6DzY0NMqXGT0qMNei10J8b57RunZ3tXbr9Ib3hS54fY0hrMKbX
      avN27HkWueQBm1vbr3xeX9EBbOq1BsVyGbBpNLvEJoMkjo6pNZrEJoMkk5m3UsQfwhj3GVse
      PP0M+5kK+dYYrXBAOl8g2zLQqkkO9hN0BRWtmaXeOZ1OWUzu0HcF8coCpWwOTR9j2Ta2bTEe
      69iOg2Wa6OMxtn1yPB7r2LaDaejouoHjmORzJQB2t3cIxaZwdA3TsnBwsCwL2zLRn1/bsS30
      59ewLQvDOMk6Xa+XGXSa7B+VMDslan0D0zQYj3Ucx8EyDcb6yXmGoaO/5Uxy3UIZ79wsjfwR
      7aF+Uj/DxLYtbMfBtr5plzGW7VDJJenpJ1vbt/ZSTE7FsIcNMuUGY/2kzIZ+cg1nUCVZ6pBL
      HjF+/rlpWdi2haHrGKaF49jo4/HJsX1ybH2njWzLfHFPQKfRMZmNh0kkUy++s2wHyzq5X68w
      m4jMLCzR6g8Akbn5WY6PUszOzjI74eE4ccTM3PxbbdiXoXiCxCNjUv1JIt4xYc8CIdnNZqLD
      8oVFvI6XSkmjnk0y1nSkyDKx0Nt3DtWGcOPiHCIOW0fbPH1UR/ZN4R8V2ElXWb1xl3Exi6M4
      TMxdoXu8jeGSia1cQEtvsl8Z8Ls//p5KucH8wgzzM3Ge7Gwzv3aV1tN11t69zv7TPTxCn7rh
      4LjCzMhtnh7kmb14C3e/hKHG+ODOVRj3+OT+Jh/9l//KOL9Fx+9m6/4DJENn9u4fqB48whz1
      iKze5XjrPhNL1/no9tsMiLEZ9PpYCDjjBp9+tYeAw+LaHIJnGq2WZSqi8MlX68RWb7F0ktWd
      8UAjGJtmKhaDYZ2Hmxs0jg1Wrr3H4eNPaY4k/unX1178SreY5POvnqIEZ7kUVyhrJrbtZSUq
      kG30GJkqqxM6T/ayTJ+/iW9UQXdH8esV0m0XH/32QyIqtKs5Wt0K8aVLVNM7fPpgm8WbHyG3
      E4wt4dWeYIBavUYsFiWdOCQ8t8ZU2EcqsU9k/uT4tNG1LseFNhcvncM17lPujHE6FVyBML2x
      idCvosTOceXiKrbWIhRfxO95+6ZQrVFgKIeRHIPRyObq3bsMGwUajS5rV64xEVJxyUFuXj9H
      vzPAo4a4fvkCw36Rrq4S8YGohl8IZOi2wPlzK+QSSWzbYSI+QS5TJRQMcPHGNerlEsNOi4WL
      14mG/YDCnZtXEJ8LZKwtzZHO1wnLBiMlhN8f5M5KkFzPg9fv5ULcTdsVZz6i0qs3iS0vvEWB
      jCpVrYdueliacOhI81wIjxiFVuil1yE0j9NrEpmbo9loE/W78EzM4ZMtMpkisXgUfdDD9k9z
      dSlEtTxEDPhw600CkWl6powy6jIad5EiSyzPRBEsF5feuYPQb9HXTW7evkGr1kLrNZi7cI3J
      cADHcXH71jUURYZxF8MTJRpwMTS83L19gXSmgDkeMTsTo963iE6EuHvz0qs6gEVy8yn5Sp2G
      ZiEM2hwdH9PWBejXOTpO0xmLxCfDpyuQMepwuJ8gm8sRWbiI1TimI8W5cmGBfjFJR4xyflbl
      2ePHyJMrLE+FTyUnfnBigszuOo2xxEwsjFdVEUUXM/EQqeM8E1PzhP1eVJ8X0SXhVU+OXYoX
      u1/H9ERYmI7j9XgIBHyMOhUer+8yvXqRpbiHZ1tHxGdmsbol9o5LnL98nYXpMMepDIHoNNGw
      H5/vmxBUAX8ohs81xlH8qP4AqlvB6/UiqQEayWfsJgvEly6g1bJIEzPMxd7mfXIxtbzKtCoy
      kiPYjQRlM8zlxUnqlQozK+cJeWwypS5LS3NEwyG8auAkUZak83Rjj2B8Dr/qRfUouH0BOuUc
      /vgCU7EYbo+HoNfNzPIi9XQKU/YzHY+g+lRcgoBfNvjsi4dYcph3bq5xnMrgj0wxORHA51Pp
      tyoU2gZrK4t4ZJFaNsHeUYGlc5eIeB3ydY2lpQUiAR+qqp5Zgf6eGHR7eIIB3jTbp2MZHCcP
      GQl+Lp5fOrVUkS/D0DoUGjpL86erGtStF0kVGiyunicS+PnZAM8SY53xi+ZsBDjjF83ffjPJ
      GWf8HfFKK5DjmDz53/8nDe8qg8w6j9d3MOQQrcwWG9v7tEyZmej3hRzeJrrW4sEX99k/TBCY
      jPHs68/ZPyoQn4qwt/011V6AqHvEV/cfsJ9ME47PoipvP19+duM+9/cOSZfarCzMvJjjDlp1
      hrYLz0s24em9On1U5PYhqVGUyI+kUWqldvnzs03SmTJTM7M/mvU5n1hH906jvi3zzk+kmdjk
      i3SD1dlJ1j/7b1StKaYnXl25Wu4QXYni/atyNsplRI+KJBokDnNEot9fqB8mErix0QT51HQQ
      XimUXc8lEWQFTQlhDCzef+8m+XyBC+dXsUwDUT7d7ccAouRhfnEOWR/ScxwmY6ucn7Ypj6Nc
      vRCmUXGYmpvE5xbRDZOJySm8p9AB+s0ua+++g1Ep4Yv4WH/wgHLPJhrwILhkMnuP2U6WiER9
      PP36a9qGTHHnU9bTA+ZC8HgnTbXeJB4Q+fr+I7qGhKJVeLy1R6WjMzcVQau3mbp5g5A1wFE8
      HG0+JpGr45MN+o5Kp1oEW+PBw8cMbDeS0Ubyhdh6dJ+6xqlb5L5hUGvRtTUiYZVSqY6kRtA6
      XXweKNVaZA+22D08olKpkG8MCdBhfTdF3xBQ7S4PHq2jS34cUyMQCOESLaqVDh67zYP1PQqN
      ARG3wcNHTyh2dGaifgTJS3Lza/azLSajKpsPH7CbLDIZU3n89UOGgpfJsP+N6vOKxFhDHj3d
      opDPkU1nsB1wnjvtBQQUjwf7LeTI/FEsg6NEAnXuPPHnC37H4XumTtEl4ZEljFPKaKFrTf7X
      //1/0fdGELQ+I90itX9ATxsyMkZ0OgP65QyF9gDTctD1MRcuX+ed994j4JFZvnyb6bBEr93G
      sB0ODvcZayPWbr6PKn4TXqnx9f/67+xVdMJWhfHEFW7MSFTGbkqZA+ptDb3fwbAd9g8Pnp9j
      n+ik6SPsv+FKbmo6zMFmiqn5acCi2ehiGmM63S62PMH1q0tMzVzELxmIspfb732I0K3R6nWw
      bJP9wyTtdgv7O3Gj5njI4pV3Ccgm1WKNa+9/zPJUiGGvizYe0O2OaR6nqA4H+KJLXI8H6dgm
      lu28SDj2Jry0A4iyyh//879w79ZVVlbOE3b3+LdPvsQ3McH+1jbpdI7xaWWi/Q6DTpH9/Qw7
      64/RpRDZxGMe7jWJ+TS+/vwhu7tPSaaSbO8cUKq1EcTTWdJ4g1P8p3/5ZyJ2l7Y2xrQg6Pdh
      2zaO46DrBl6fDxcgitAfDEBS2H70FX1TwOd1oyhubMPAxoVf9SIpHjyKhNt94rkWpQAf/vGf
      uBRXaAkTjDKPeZhoMRufQO7XccfiWIaBI0j4VQ+SrOBywOWCwWDwN+sAoiQRDsfoDQdEQ0EU
      yY2jlfj6wTq6KKM+r5vqkU/qZps8vf8pfZcf0dCxBRm/6kZW5OcZSARkWcIlu/G6ZTweD6pP
      5NFnX1DuaEiSjCjY6LqN6vPhEiVUnxfZ48YFCDj0h2+ep/bMCvSGOKbOs2dPWbt6l9ApTsSN
      YZNnu3lu3rqOWzpLWfO2+YsO4DgOZ/3hjF8Sf2G+6PV6Z46wM35RnE2BzvhF8wOrRof84Tql
      jkGvnueLL76mNTyRhsgndyi1Tl8gw7Z09jce8dWjLQzLJLH1mCc7KWzbpJjeJVcbYOsDnj74
      ggdPd04tQMTSh6w//Ir1/QzNWv0NgzWcF+op416NLz77jIN0+bUtaZ1OE31sUivlGI4NzL9x
      UMywnuXf/vxntpN5rO+svC19TKVWp1arvfjMeGEpHPL1v33C/Sfbf5FM60d+iVpt8NJvbMvE
      tGwKxeIb1+MbXukIG3WqHB8d0ldnaObyXL22RiJVIO53eHZwjFuJEJ04HWHqbzBNDckbI2KV
      SPfAdgWJ2hVaQhi3d0y7KhKNeJiYnsfqFjFcYYKnsCDN7G4SXL3OfMRHOXtMdzhEVFQEc0g2
      W8QbDNJvNSiVqyi+AFq7fnKs+unWilTbA/wBL7lMmYlIiO31Z6zceIewW8Q0DFxumWFvgDEe
      UCyWQFFx2SOy2QKK6scYDak32/h9PqrVErY2IN+xiUoD2paHcbdKudLCHwoyaFbIV+p4VR/N
      cp7W0CLkf3v3qZMtEbt9G1fliJYQQNSalJtDfLJAplxB6zbRhhooKrVinuDEBCJdetok5+dd
      7KaahNwW2UIVbyCArg2oNTp4JJtsroTbF8Actsnmk9Q7HgLuEflyE49XxrIEHGNIr9Ohbwrk
      s8dMRUNkMjkEt++lDskf4+Vn2CbpfI0LqwskbBPZG8Kn+pGECodHJa5cXqH7ZnoEr4Ws+GCU
      piZME/dbWHaYkDyiqAnE50PUyw4uxUNx+yH5ts3dtdPJlNYxXdwIq4g4GOMhQjDIUSKJXkty
      XOsx0+zhHQ2IzQTIZEr0yhkisSi5YplRYZeNdIPf/PE/0Wp2YG2BS5cvs77xACm8iHvY4ty9
      6yT2j1AlHTEyyc7OHuqoyG6+RWThMhG7Q3jpIjMA4x5fPEvx4b/8H4wLW/T9PqrHx0x7TJLF
      EP1KgQlpSNKWSG+vs3T1HRbecnsIgsDC3CSPKg02Hn1Cb+zw3j/+F+BEV85SvaQyJaxhi+XV
      b8/zRxdwpZ/SrrR58mSL8uC3SM1jJlYuUfjy30hWu8SX7xCR+0SnVOhrfPHJfer9EauX3yMY
      DiJpDQKqj7H/5EVXyRywk2rzbvTNBMNf7ggzDfrtGg+fbnN8lMfU6mQyGSzLot9v8/ThEw5S
      GcxT9gVo3ROl+MkJL25BoVDKkEoW8YdkGvUGnU6LVrOOGllgOqDQ6PROpRxxn8BOMkuhXMPt
      i7C0vIoqW8i+KB/++ndcXZsmGJ1mcWEBWbAIRadZnJtHthsMpGnuXF3BGH+b7bM31Fg+dxFB
      6+BgUSmVaPVHCC4JjyIjiAKiEuCDj3/L7cuLBGLzXFiaPbGbuwP87g+/Ib2zhWGdiENEp+ZY
      mY+hGyd5nGRRwJb83Lx+mUrykLc7WbVo1qpsHBSYjXqJzl3kD//0ByafByK5AxFWF+e+t3Wh
      32mSSWwi+uJUOzoffHgXZ6gRjC9wYXEGlxriV7/+PdfPxbEBtyxh2zb+yUV+87s/cun8AkIv
      y1AM4f7OUzsxs8y5mSCJ1JuF6P7gItgZ9+naXrx2j+N8g6W1FTySiKFr6KYLn6q86tS3gqF1
      SR5lsQWBhdWLjBo5Rq4QsxNujo6PMSwX03PTdGplHCXIyuLsKwWRfw6ObZJLp3C8EWIBDx6/
      n2G/j8sZk85ViC8s4xZAVWU0zcRxHFSPwsjQ6VSLaKKX6ckohm4QCgXQug2O81Xic0sEpTGp
      fJ1wZJJuPoHmCbKyvIbHGZJKF4jMLKLKAn7/SQSepg2RZQ+61sWyBUSPCpaJKln0TYnNr/6V
      UmvEu7//Z4RWDtsbYWl28q1tk9D7TRKZEhPxeWYmgzTLOapdnaXlRSxDRwD8qoe+ZmKZY0Kh
      EKCT3EmAb4KVxRkGzRKVns7kxCSydFK3cb9FKlsmNreEbLQpt4dMTS0gjpvka10WVtYQtCa2
      J4IHHVOUMUZDPJLDcbbE1OIaE77Xfx7PrEB/Rxi6gaTIb/ywOo5Nv9vBRCYc9J9KdNx/NM4C
      Ys74RXM2Apzxi+aVAhn6aEin28WwHExjTLfbw7RsbNOg2+v9hQ34tHAch9GwT6+vPT8eMNDG
      4DgYYw3dsODF/wxfQ4X8dcthM+z3GGhjTNP8+Urxtkm320Ubv/6OWssyX+QbOq36/hC2qdPp
      dE7K/tdK8ab5Co05m16nQ2+gvcZWGxvT/BGl+Jeq0r8erxDKtimkUzT7Q2wliDJsoLtcCGoM
      dVSho9uokyvcPD/3swvwQxjjDrtbh4yHbWYu3yGf2MMyLK6+c4dKdgtDvMC1ZYmdvSTD4Zjz
      1+4wfQq+iUbukL1Ch+BEDJ+ts3jlEq+/3DIpFhrMzk2R2tugqYHHN8GVy6uvFQRfKGQIB2Mk
      k0nWVmYxPZNEfaeTFftlNJO7bA9MxP6Iq+/cI/p84WloffazRSRsrly+ApwoxUfnZpFo8fVn
      W4SiLkLzV7i0GP0Jv9Ti8NDiypX4974ZdZsM8JBK7PLu3Xd+Vn1e7ggTRGTBIJsrE19YQTG7
      1LtDIvEYpiFx985lyvkq8em3Z114GaLLzfTUBL3OGFkVmYyusDItUNVCXD4XolmD+EyE6fgk
      g36Pydg07lOIHEoc5bjz7jvMxsLkE9vsJ49ojSTsbp71rT1M2U3y2RMOjw4wlDCp9fvsJ46w
      lADV5CZbiQzh6CS1UoP4VJRRt0m+2mHp3AVqyQTq1ASJrSSdSor1/QMqHQtZr/N0fRsNhdLR
      Dge5BgtzU3RrWR493uHSu+8jdcv0BIXNB38msbuPZ3qB/cdfsn+wg62E2Hn2kFLXZH7qpzxw
      P41hvU3s2jUuBG0O6zaN1DN2D7IEY5P0+wPGrSKHh0e0LA9av81MPA5ojK1Jbt++QOboEEZN
      nmxsYikT5Pc3OMg3kPUmzzZ30F0+KkcbbO0nwRtjWEuwvXeIYQkMdJthJUtfB1OS6bebKFaf
      B082EbwRwv7XzxLx8imQY6MEYrx37ya1wjHtscL7927TrjcwDQ1T17FdrlOPQLINjb2DNKvX
      rzMhC2jjEaOBhuz5zvvXGrKznWT18g0Cp7Qt2ety6I0NDMM8UYr/7e/xWk32dg7QLQtN0/DH
      lvjoo/cRRn0Ck4t89N57iEaNRkej16hQaXZfKKdPLpzndx/fo5TYozfUsCyTXn8I0olSvGx1
      OdjZZmxaDDUNx+Xnw3s3XijF376yRKnUwNLH6KZNfOkSv7+3SqWqEZpf4/3LCwwdBZ9HQe92
      T0Upvtsbori67O4WsO0R2uhbpfjf/Pp93NiMRn+ppWaMujiih2ajiWUOOE6XQA7w4b0b7O1s
      oVv2Se5VzwS//fWJUvzu4RGWZeNyK7RrJSpDG9XRv6MU70MSodd/Mx/QKzzBFqm9DcqtIbOr
      F1EGZR483GBm9TITTpPP729w8fqdv4FSfJNCrkCtXufKrbv0jtepEOT2c6X4RseFV5mjWCtR
      /7zF1bt3iQd/JPj2DVhaXeTxwy9RJuaZD/sRBYFAKMKlyyKH+Saq6kP+Rinep2K5rROleDWI
      6mniTM8R9HqQwychpK3yMXvHZSIzqy+U4lXfJMagxpefVVlYvcJCxMv2cQVVVfH5vbie2zS9
      3udK8aXjF0rxtqCC20V0wkvl4Bul+AUEAWSP5+0qxftd3P/0M4LhKW5fW8K6WKSju/B6FGx/
      AJdgI4gSAZ8XWfhWKb6Svk+9GeDqrVt0shoeWyQUDhJSXbgEgStXrrCXbeIP+LFbdb58cKIU
      f8m1TKmto/pDKFoJI3gRReihuhXC4TCOYyMIIh7Pm+0COLMC/R3RrFYJxuNvQSnex907N86U
      4n8CZ0rxZ/yiOVOKP+MXzdkU6IxfNK9cHzVLx3z25z+TLneoF1J8/XQbcEjvPT1Rjc/XT71w
      pt7n6ddf8OfPvqKnjXj24As+v7/OWNc42H1IItsBx2Tv6X0+v/+EoX4621PruUM+/fRTtpOF
      H/3fYb+Dpr9GyIxjkcufBHZkEsmXWGwscrkfD/zI/ZAq+rBOrqG9+vvXoJtP8HAvDUBi/XMS
      xR+2vrSrOXov2V3Ta7cxLBswyOVeHhiUy+UY9bsM9dOblr/cD+Do7O1luPHuPSJ+Dy7Zw6Df
      IR6L4QtNEg8r5GtD5qZOWykeJmJzBM06hZGDLzDDgr9P3YoyNy3TrEBQrFOworx77RyKJJ7K
      FO5wd5vFq3eZmwzQajTx+N3UKy1G3Spb29tY7gkYtUklMggeAUFSSW0+oNCxiPjh4YMnSIEo
      +qBNPpvBNjSerO8SiE7hlQXyxTKT0Qi51DGSV0aSVfqNBogGTx4+INs0WI55uP/gGXIwyrjf
      JHecwdB7PNvYxx+JUz7e4ihdxh+J0y4c8GwvTSQ2xaB6zKNHjzEDC8yEf3425V6xRn7YYW56
      gqP9fRxvDNHUcSvQ6vapZY/YSaTptapUejbKqMKz3WMETxBZb/Lw0TNc/knGwzZefxBJtCgW
      GgQUg43tPep9m6hP5OmjhxzXBkyHVWzRzfHOQ1KVAfGIj+TOFvvpGtMxP+uPHtBHJRp6M72K
      l3cAWyd5eECxmCffHLO2NEu9XicWi6F3KzzbzxKNTREJ+0/dFFrJH6F5Z4l5dRAD+N1jOkaA
      6YhDrQY+YcBhNkXmKI0cmiSkvv2gmNhUnPTuOrmWzqjVIDoXIbGXxRx2WLp5l2rmiFYxTfTC
      DaxmHltxc3xUZHIqTnr3KT3DpFIfMe4UmFy8QqeUwpJ9RKMRvLLI4dYT0vkS+UqXlbkQ5Y5O
      o16n36iydO0OjIbkk5t0dZNqc8ygmmLu8h2sToVqtUpt6KAqEreurbKXKCLbfWqlPH3JT7va
      5t2bq7QtlXjw57fNsF5HjrqpZeqok0FM3LQrTSJhiXy5Qa9vsroYYCzGMYc1fIqL6fO3KCe2
      8PoUarUmmUobt2AQicSQJId6rYtiNbGilzA6RcbNBrFLt5GMPqI1xpZVWuUiuWSOwMIkvZ7A
      vGTS8jhUij1isRjhwJvtAHj5FMjlZnYqikf1Ibsgn9wjcXjI3tExmVwVjyLSaHR+Tjv+JIbt
      PJt7edqV7IlSfGKdp9slJvwWm+tbJBJ7jNQAQVk9ET0+pXIUMkcYooJj6Yhmn2ePn9EaWSge
      Hx63giy78E9MEwt944OQiYTcpI6SeAMhVH+Upfk43lCcmYiPiUiUXjVPoX7ShpG5c/zmN7/h
      wkIMf3yO9uEjfNMryKLD3tYmta5GMDiBPxhhaT5GIDbHpF+mXmvgD4VxCTam1mZ9cw9FVanV
      m4TDQRxHxBjU2dxJYLzF6KVAOE6+VGIq5ANc6L0y6xs7DC3wqiqSx0PQ60WSJBxL52BnHQ0P
      3UYNWQ3xsshFlyTjV1VkWUaSHRLbW1TaJzHBjt2n1bEI+71YCAQCfhRFRlFUVMnk8PjN9epe
      uQi2LZPhUMPt9WHpGrpp4ZIUJNFmbFh4Vd+pK5XblsFgoOEAXp8fW9ewBBmPLDIcDrEdAY+q
      gqWjm6CqnhNv6VvG1MdoYx23V0W0DTTdwq0ouEQBUZKwnpuOXZKEbRoguhgPByC58Soi/YGG
      rHiQXAKSJGEaY7TRSTY5SQDTsp5/bqD1qjzZLfPrD++CbTAYjpCekeV+AAAM40lEQVQVD25J
      oD/UkN0eJPH5dfQRI91CcbvB0hmbDqqqYukjDMv59nPDwu1V38r9sk0TXC5M3UCSXVi2gGOO
      0C1wuxUEQBRPFNsdx0ZwbIajMW6vDxcmw5GBoii4RHC5JAQBTNPiRBxewrFNRAGGQw2X4kZx
      iSCK6NoQR3Dh9ig4DoiOgyOCNtCQ3N43igeGMyvQGb9wzpTiz/hFczYCnPGL5pWTQq3XYHd3
      l87QYNits7t7QH9kYgzb7O4nXs/W/YY4jk0pe8RBKo/t2FTzKdLFOjgOnXqRZm8MOHTqZZq9
      0Y9e703pN0psbW1Tbv60XDDdTvtFtuZeo8TeQRJt2KM3/n6b2eMe3ZFBp919S+nmDVJ7u+zs
      HTJ4Xfu5bdDuvjwZ1Tfo/T5jx6HXbb/WwnrUb6OZDsawQ18b09NOZhrDTo3trS1yldZPL6c5
      oqf9/GAYeGUHsGjUu0QiIQ4Pd9nfTREOedg7TLK9tUvA47CbzJ66PoAx7qEZEkovzX6mQrau
      0c/tUWz1aAxqFHJdGPcptdpUy41TK0erWCEwHSe5u43hOJimcRId9zw9uv1cNd4wDGzHIXWU
      wHbAGtbYTFaJhAJYnQKZ+gjTtE7U0Q0Dy7IxWlmOGxqpxDG242Aaxok6vG1hGgaW7ZxEWxnG
      cwV5G8MwX/yuaVnPVdK/iVQb0OyKRFWLRKb67XfOd9TU/+rYMk0M08QxBySOyz/YFt18nqbW
      IXFUYNyrUOsZWN+7rvniuqZp4QC2qZFIHrN3kEK2euSq7ZO2bdVQgzGaxzvUte+2p/2inYeN
      HE3tO+UctchU28/b8ufd21csnV3MLsySTqWYm1tmWNxjdz/BzMp5HGGS+aVFWhsZTrLSnB6K
      J8j0pM7RIPpcKX6RkOyhOBQ5vzTH7q4D7gBrSzOks6eXqctxbDRNQ3RJ9GoZ1reOQXAxMxsl
      OrtK5ThJUBnx9foRF+5+/OKt0ql2mT+/zFQkBK0+yUdPKO6b3Lt9jU/+9AlCYIbf3/g2WKWc
      WOeLZ4eE5y8y52rTMAUkb4yo0KEyGCHIMUJ2mb1sg4t332GQTiPHZ7HrKZpmiN//40d4gFr+
      iG7fw8q1WY42v+LJTobrv/nPNA/vg+MQWnuPUWGTsdbGd+4fsLL3OSq0+Oif/vEntMaQrz75
      kvc/+iNWc4N2KMTuv36F43aYWb5EI3vEYDxm6fwlDp88Irx0hfffvYIankba/p/oi/dwi98Z
      ORyb0VjDQiR/uAura1T3d5F8AoVGH9vycGfZz8Ctk/j6T6SrfX792w8pHO1SPbK4dOsDZn9M
      f+oHeMUIYJM9OiI4s8JsVKGhufn4V+/SrjcYDdto/R66KJ66E0zXuqRLXS5dvUjQ5aLV69Cs
      NPC8BX3Y18KxaZZyyKFJjEGfxSt3WY1KBCZnyew+xBWaoTtwuHrlPL3WtyORP+ylUqhjGjpj
      w+TCjXtcv7BAu1Bm7soN3AwxvjNLadSarF69yfJMFG9wig8++g0Rj8FY9POr9+/gdnSaXYub
      t28zGXATmlrm3o2LLJ+/xJRXo/78HbB0+Q4fvXeVZrVFbwzXL8zQ7PSJzq/x8Ye3YaTjiczw
      3tU19LGGo0Y4P+un2f0pBhCVd391h0o2/WKaF1s8z/v37iJrTdxT57l1dQXBcXP5+hVEvY2m
      gz5sYwZnGVfyf5Fb1XEcDN1g4eINwrKDZZn0BxpIPt754ENW4n5swBwNIBBnZcpLq6czf+4a
      V8/NMNJ+ntHmFZ5gk0LmmON0mo6hsDwpsb6bYu3SNeYjCk93Mly+ehnvKQmXfYOhfUcpfv4C
      RiNF2xVjeULg0YMNmu0Gsltid2uHRrOJJxwj4H37yboEl8zi+UsErAGuiWnqqS3GvnlWZ8Kk
      j4vcuHkJ0ehR6TosL00T8vvxBwJIHj+uYYWNgxyT0zO4PT5Utwt/OEgpnSM+v0h8Mors9uH3
      SMwtzVJIHaMEJ4lNBPH6VERBRNLbfP1kGzkwx7VzUdK5MtHpeUJ+FZ/qplUtUB97uLAygyRA
      Zm+LVLnD2oVzuO0+LV1mbm6OkOrBp6qIsod+8ZCNvRSR1Rv4RjUcb5Tp6Sn8XgVn1EQXZOqN
      HkH/99+u3kgMn6MjKCpefwhVduFTPYhuH+3sNltHBabnltCaJYRAnIXpCFqnxcTcKtM+i4Hg
      x+t24/MoCKJEfHqOkN+N6nGxvb1LYHKGeCyCV/UiCQ69Rh15ahGnWUTwTzI9PUsju0vb9HNp
      bfZn+X7OrEA/g0GrQtvwMBsPneJo6FDLH5OrD7hw5Qr+tyAC6NgWmeQeHdPD1ctrSG/LeWgb
      pA4PGKJy8cIK8tvI0meNSRyXWTu3dCqavn/RAbrd7vfiOM844z8y35NIOuOMXxLfiwg744xf
      Eq8Uyi4kt3n0bBe8IRrpHTZ2dmmNJWhnebC+i+MOEwm8/QwM3+UvlOJjcZ7d/5yDZJGp6Ql2
      t06U4uMTLh599hlHpQaT8WmUU1BSzG7e5/7uIZlSh5WF6R+d7+9sbxCZnEZwxjz+8gsSx0X8
      0pDCKPC9JFZ69ZCDnkLl6IjodOwtzHO7/Ot/+4RMLsVIDhMLvcY2YaPDxkGZ6Vj4lf/STCYZ
      hvwcb++gSDZ924uq/HipW8Uk5YFEv3CI6XJRaAyJBlWKRxt8/XiHdK7K7MI80ksuNWwW6AtB
      vN803aBKom4QfQvWwFfGA+ztpZlfWSI+OcnU7DyTIR+aYVApV1haXmVyMnIqSai+ywuleGNI
      zz5Rij83ZVEZR7nyXCneb1UomCor8zOEg75T2Q3ab5woxZuVImrEx+ajhxQaI0R7iOj2Uy0U
      GHbKPF7fQwlG6TUqxKfnGJaymJPL3L12AdXq8GArQalcIR7x8eD+AxoDm6h7TM0OYrUbhPwi
      Tx4/RcPLsHrM9t4efcsDvRKPn20xsBSEQYWnm3t4wiGq6WOOig20epatgwIzS7NIaFQrOjPT
      QQQlyKh2xLOtBL5ojMz+M/b2DnCFp6gdb7G1s43om6ac3GDvqEA0HqVSGzA3/epAp0G1QKJU
      JBhbJiz20GQ/2a11dhMJ3MFJKslN1neP8AQDJDeeUGiOiU9HUVU/2d2H9L2zrEVkKn2LWNhP
      b9Bj+cJN/GaFUs/Bq3poZHMMtDbb21sUm2PiAQVD8ZLZfsJBqkQ06mdza5diuU40PoXysl7z
      E3llblAEAcfSWd/apV3JUOxYnFuZR0TAMkdsbx28oVbWa2AZHCUTeGfOEfums//V821bJ+LU
      7VL2/2/vXnvbpuIAjD++No7TqimsI400NloEtIxu6waUUfGOF0h8V77BxFTRUW3qhfWybitJ
      b0mbS3OzHNs9Ni8yiXJ5wdRFQvL/9wmsWI9zdI59DuW3WU5/C4OT4n+i6+Txqge8P7PAlHVO
      J9A4OinT7ER47S4q9Hn5+m/vpl+63sKtOaancrTqTQIVU3q9S//SOsCr39ZpBxHHJxV8X3Hn
      64fE3SrVdsjDpQf4tSobG9uEoU/l9Ixaw+f2Z9OEQYhORPDm7YAkAdO2iKPBHqSxd8aLgwaR
      luGbBx9Tr7TwNZeluSKVtk/X8+k39inV/9uceqwUF0oR9Rp0Q0Woj3H/7ixe5RXdTJE7s0W8
      jk8QXhCrkDd7WKGhoeK/vj6h/A5Plh9TUxM4UYsgUrQaDTodj+n5L8nrIX6vTS8I6Xp9vPo+
      h42QwkezzN2a4PT0at+l/HsA+gjFSZdy+RAn57K9sc1ReY/nL08oXh+ndHCEnRsdyrTUZV77
      mJ2dEtsbz4iMscFJ8VtNruX+PCm+kxnHaNc4bXnkssMZkjmjk3z/4w/kVZfEyVPaXOFFDW7c
      KHC2s8XUzIcEQYBuOzi2jmUPdqjLFaZo7a3z6OdfqHsXuNkMljVCEkVcJDpu1kHTTSxdw7Is
      rhcLoJLBBx+ZLJZpksk4mME5j5ef0IstCpN50E1ybpb8tUlGTB3DNOh7LfoRgI7XPuP30hER
      CUG/j5XJYpv64PsD08ZxbHpnZZafbkESE4QhjjuKoWlYlkGnfkzX9zmuNv/xW+imwyfz9+D8
      mN6FjqFpZN0shmli5/J4h1usru+iYjBMnV6vg4qhWSmTn15gMmlS64NpDEYPdm6CxaXvWLg9
      w7hrsba6QrnexbQdHNvEHrFJ4hhiRRgNrlM3TKr7m6ztHJJ/b+xK91bWAa6gUztg7zRkYW56
      iBMIMaXdTUrVFjc/vcfND652wwESFfF8bZVGT/HFV98y4byjR5nqs/70Ge1IZ/7ufcbdd7BV
      pfL5dWWdzxcXcYcw4pYDMkSqyT+ASLVhD+OF+F+TAESqSQAi1SQAkWoSgEg1CUCkmgQgUk0C
      EKkmAYhUkwBEqkkAItUkAJFqEoBINQlApJoEIFJNAhCpJgGIVJMARKpJACLVJACRan8AXY/f
      MkOOgpkAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Highest Totals' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Match Statistics' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='MostFours' width='192'>
      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
      sNjW/H+joxf1hRDzLgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='MostFours&amp;Sixes' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='MostSixes' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='OrangeCapContenders' width='192'>
      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
      gg==
    </thumbnail>
    <thumbnail height='192' name='Player Statistics' width='192'>
      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
      AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='PurpleCapContenders' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAPxElEQVR4nO3d628c13nH8e+ZvS/vV5ESb5Il2ZJtUbEs27Ijy46VOE1SN0FQ5AL0RdCX
      fdG/pUD6roWBAkmQpoXixm7t2rGlyNaltu6kSIqUSPGyvHO13PvOzpy+GFKSbSZL0yKX5Hk+
      wGKHZ5arZ5bzmzlzzgirtNYaIQxllbsAIcpJAiCMJgEQRpMACKP5V2qcugqzNze6FLEWNR3g
      agenUO5KtqYVAzDTCwNvbXQpYi3aXgBHu9jpcleyNUkXSBhNAiCMJgEQRlvxGuBhgSi0vwRz
      /ZBPQttzYAVg+ENv3Z6TcPPfQeaTN4ehyav0jl3g9cN/x9DUNW7FLlMTbaSlrouBic+ojtRz
      svvn5S5z0ygZADsDk5cgUAH5ezDTA7VdYPmhYS8sjgEKkABsCntbD5MtpNFonmw/RnvjfgYm
      LnGw7XnaG/bRN/FpuUvcVEoGYCVOAXYcgoomCNfB/CBkZh91aeLrmkvGGJsb4PDuE8wnY9yd
      6+cbu18pd1mbSskAhKqh45tetycQXTr6+2DsPEzmoKUbcvENqFSsSs/oOc7feoeJhdtorUnn
      EySzcXJ2hmRmgVQ2wfGDP8RScvkHoFa6G/T6r2QeYKvw5gFsmQdYIzkMCKNJAITRVhWAmk5o
      fvrBzx3HIdoIygePv+FdG0TqH6wPVkJF86MuVazG1eEz/OeFX3K27/dorXHcIoOTVwC4Mnya
      Uxf/mQ+u/Zqi3DwErHIUKNoA/vCDn7UDla1em7LAF1wKQQNU7/LuJWo5DIUkTF712rT21lsW
      jF9Yr80RoPjBkb+nb/wi04lRGqt2ksx6oxRFx+a1p3/KlZEzLKSmmYqPUBWpZ2jqGrUVjbTW
      7aa5poO5xRhBf5CLg+/S3fUyu+r3opQq83atj5JngEDUO5oHK70dGLy5AcsHVbtgcdwLQLQR
      KlvAznrrFiegkIZInde+OA6BCDQ8DsGq9d4s0ymqIvXkCmlAo7ULQM5Oc37gHdCaRHqOxew8
      TTW7yNsZro2cxS7m6R09x8TCEJeHT/PqUz+hb/xTXO2Ud3PWUckARJsgu+Dt0DXtXpvWUEiB
      LwBLny1aQz7hDZP6o97R3yl47ffuehNnoSqw015AxPpI5xN8cP3X9IyeIxSI8t+X3yQaqrm/
      XgPzqSlcXB5rOUwqe4+8naEiVE1tRTPDM700Ve+iOlLPRz2/xVIWahsPmZYeBl0+82mvu6Pd
      pWcNy2fF5WVledcFy91LpR66RUJ7ZwpA7l1/hL44DGo7BexinqA/jFKKQjFHOBBFKWtpXQ6f
      FSTgC4BSKBQ5O42l/AT9QYqOjc8XAK3J2RlC/gg+35rmS7eE0lv2UDzuH+0fOurfX6eX2ouf
      b3uY7PjrL+ALElg+0gCRYOWfXbfia/whb0FBNLT9+6rb99wmxCpIAITRJADCaBIAYTQJgDCa
      BEAYTQIgjCYBEEaTAAijSQCE0SQAwmgSAGE0CYAwmgRAGE0CIIwmARBGkwAIo0kAhNEkAMJo
      EgBhNAmAMJoEQBhNAiCMJgEQRpMACKNJAITRJADCaBIAYTQJgDCaBEAYTQIgjCYBEEaTAAij
      SQCE0SQAwmgSAGE0CYAwmgRAGE0CIIwmARBGkwAIo0kAhNEkAMJoEgBhNAmAMJoEQBjNv1Jj
      IALhuo0uRaxFsBKyyXJXsXWtGIDqdpddz+mNrkWsQe1uRfZKuavYulYMQHISpm9sdCliLZQl
      B6qvQ64BhNEkAMJoK3aBvkj5QLuABivgtWnnwbJT8NaJ8tj7V+AW5Q+wFiUD4I9AS7ciMabJ
      J6DpgMIfhviwprJFUdEE4xc02fhGlCtWkpq1vYOQ+MpKdoGKWZjt02gHCimYvKLJLGgysxC7
      pEmMyc4vtq5VdYGW+YJQvxfmb4FrQ9UuSE2tV2lCrL+SAQhWQuthhfJB4q7X7QnXwvR1jT8M
      yYmNKFOI9VEyAIUUjJx5cIG1cFt/bp3YXPpuX+d6/6e88drPGJkY5JNLf+Sp/UdobWrjo4v/
      w5N7uzl66Hi5y9w0vlIXSGx+Bx47RCabwtUuE9Oj/OLH/8j7n7xFPDHHC90v09rcXu4SNxWZ
      B9jGFAqUt1x0iszGp3nv7CmKTrG8hW0iJQMQrITKHWD5ofEJteJraru8uQKAuj3c/9AfVtmy
      cvuyiiboOqFoe14RiEKo+s+/tu6xUlWb63Lvef547m3eO3uK+tom3vyPfyISrmBf10FGxgYJ
      +INYSo57y5TW+kszKP3/5TL8odccqvZ26vwihGsV6VlNTbtirl8TroFglXeBHIxCYlQTrlME
      KyE1qXFsqOlUzPVp/CHILcKOpxXZeU1uEeq6FIW0ZqYHatoh0gALt0EpsHxQ3aEIVcFMr6aq
      BaKNiplezY5DCrcIU1e18dchLd1QtScv8wBr9JUPBaEq8IehpkMRaYC5fo2d1kx8pgnXg3Y0
      sUsaXwhCNeAPea8N1UAgCj4/1O/1QjLbp3GLgILEGCxOQPNBRSACgQpAw0yPFzSA+SGNPwLZ
      ec1snyZY+Wg/DGGekgHQLqQmITEKdgb8IYVrg2trcve82yCsALS/oHByYOfALXrt/iBLr/WO
      6r6A11Wys16bU+D+katqJzQ94Z1NXMd72BkvIMUcRJsVLYcUSkEhs/S+znp/PGK7W9Uw6HI3
      Y65/5ftNZnth9gs3A8XvLC/ppW6UIhnTJGMrvy4Z40vr7teQ9ibdXBuyC14Qxcpc1+W9s6d4
      /vAJ6msaSWWSvP/xW/zNt3/O5Z7zHHnqRZRSaK0ZGO5hf9dBLMtX7rLLZkOGQfOLXn99zTRM
      XpKbvVYjlVmk6NiMjA9RX9OIbRfI5tLcvtvP9NwEi6kEH55/m+e6X2Y0dofeW1d4rvs4Slnc
      GR2graWTT298zKsvfI/mhtZyb866k+GAbebO2C0qo9X03b7G8vjGgb3d3BkbwC4Wef+Tt1i4
      N8uH594G4ORLf82t4V4uXjvD3q4DZHJp8vkcpy++W87N2DASgG1mZHyQYCCE4zikMt5/Fvb7
      ArS37mE0dpvGuh001bfw5P5nqIxWUxmtJuAP0trUzo7GnYzG7tDU0IJSf2HMehspOQwqNrcv
      DoPm8lnCoQgFu4DPslDKwnGKWD4fmWyKSChKPDFPJFJBwB8kGAhSsPOAIhgIkitkyWRSRCIV
      RMMVZd22jSC3Qmwz4VAEgGAgeL/NsrzlqgpvPLmpoeVzvxMKhu8vR0JRIqHoepe5aUgXSBhN
      AiCMJgEQRpMACKNJAITRJADCaBIAYTQJgDCaBEAYTQIgjCYBEEaTAAijSQCE0SQAwmgSAGE0
      CYAwmgRAGE0CIIwmARBGkwAIo0kAhNEkAMJoEgBhNAmAMJoEQBhNAiCMJgEQRpMACKNJAITR
      JADCaBIAYTQJgDCaBEAYTQIgjCYBEEaTAAijSQCE0SQAwmgrfk1q3W6F882NLkWsRXUb5PPl
      rmLrWjEA90Y1Yxfki7K3gh2HoKqz3FVsXdIFEkaTb4rfBmp2+XGdclexNUkAtoFM3Maxy13F
      1rSqLlBNOwQrAQVNT0DTwQftLYcVyreOFQqxjkqeAfxh8AW9AGgXklMQqYe63RCIwvQNjXY3
      olQhHr2SZ4BiDtJzgAY7A1YAlPLCEKlXtB1VBCIbUKkQ66B0F0iBP+idBcK1EKmFxDjkk5Ca
      0qSmNaHqDahUrEoyleDj//sQ2y4QT8zzu7f/jamZCYZGBvjVqX9hcLi/3CVuKiUDEIhAdbsi
      2qTwhyFYpWg+qCjmvLODFYDU9EaUKlbj3mIc13Uo2AU+vfoJr774Ohcu/4mGukZ+9N2fcaXn
      YrlL3FRKXgPYGZi8/GBSLDX1YDmRWZ+ixNq17+xiajYGgN8foKGumUikAktZnHr3N3Ts2l3m
      CjcXmQjbZpKpBPF78yzcm0OjuTl4jWwuQzwxzyvHvkNsagxXJg3uKxkAy++N+FS3g/JBbRfU
      dIBa+k1/aGlEqAL8q7wYDlZ+jYrFXxSbGQc0o7Fhjj1zgvn4HN968bsoZdE3eIOXnz+JZcm4
      9TKltf7STT8D77gMf+Q1h6q8G6606z18QSjmwbXh3l3YeQSSk+DkvYvkhdul/9HWbygmr8i9
      Ro/CjkNQfyAnE2FrtOqZYK29h/eDt2z5wM5CMuadHXYcUtR2wexNTf1eRbQRxi9qUNCwVzE3
      oPGHvbeoaIb2FxSLMU3ss0e/YUKsxqqGQYMVCjvtHekDUYVTgMQYuC4Ewl43yR+GxKhm/KIm
      UOEFI78IbhGqWhSLE5q6LkUu7r1tuAbidzShKrXOm2iWsdgI//unPzAWGwEgnpgnX8hRdIrM
      zE2xwgl/RVpr5uOzaK0Zn7y76t/bakpPhOVhbkCzOAFOAeZuaRJjgPYe8buw81lvMiwb916T
      mfe6SJlZb74gG9csjkN6TpNPeSNJmQXwRxT3RrbnB1suoxPDPL7nIOcuncZxHBaTCW7ducn0
      bIzJmXF6b13DcYpksmny+RyO45DOJLGLNsWijdaaYrEIQP9QD/23e5hbmMFximitsYs2BTtP
      OpMil8+SzWVwXZd0JkW+kMd1HS9wS++x2ZXsAjl57wHeTp1PfH59dh7G5z+/EzsFmIo/aIvf
      8Z4Xhrzn5KT3PDEvO/+jtnyk91k+lFK07ezk/TPXyWYz7Oncz7nPTpNOJxkc6UdrzYvPvsJv
      fv+v7OncT2N9M0cPvUjf0A2OHXmZialRem9d4xc/+Qc+OPsOrx3/Pu9+dIp0Jo1dtMlkU1iW
      jx++/lPe/O0vCQZDnDz+fS5e+ZjvfetHtDa3lfvjKEmGQbehialRGuqasSwLn+XD8vmYj89S
      V9sAQDgc4Qcnf8yejn2Mx0Y4cew7ZDIpDj3xDH/44He07ewEFLtaOnjmqecZvHMTx3VJpRfJ
      5XO0tXbyxrf/lqPdL/HU44eZnotx+MmjOK6D3xfg9RNvbImdH+R26G1nX9cTNDe2MBYbIZVO
      UllRRffBZ5mPz+KzfBzY9zTVVbWEQxE62/aglMX5S6c5cugYFdFKAv4AbS0dAHS27WHnjnb6
      hm6wu/0xzlx4nyf3d1NVWUMoFGFnSztOsUhFRRX9Qz0c7X6J5oYWgsFQmT+F1Ss5DCo2t0c5
      DHpndJDqyhoa65u//pttEXIGEPft6dhX7hI2nFwDCKNJAITRJADCaBIAYTQJgDCaBEAYTQIg
      jCYBEEaTAAijSQCE0SQAwmgSAGE0CYAwmgRAGE0CIIwmARBGkwAIo0kAhNEkAMJoEgBhNAmA
      MJoEQBhNAiCMJgEQRpMACKNJAITRJADCaBIAYTQJgDCaBEAYTQIgjCYBEEaTAAijSQCE0SQA
      wmgSAGE0CYAwmgRAGE0CIIy24hdlT/do5m/JF2VvBdW7INpSxHXk77UW/w8ASqkQcqHCKAAA
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='SeasonperfSummary' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nOy9V5dbV5ag+V1474FAeEvvvUTKpOmcXlPV3fUw8zDzb+qHzPOY7jVrqmfK
      ZFWmKDrRh2F4iwAQ8N4D189DUJQokkGGUqIqFfheyMAFzt3X7GO2O4Ku6zp9+hxRDL+0AH36
      /JL0FaDPkaavAH2ONH0F6HOk6StAnyNNXwH6HGn6CtDnSNNXgD5Hmr4C9DnS9BWgz5GmrwB9
      jjSm7//RarVot9u/lCx9+nx0hH4wXJ+jzDunQKkXX/N//ek5Ojqzf/5vfL2YOrAhuZ7h0XLs
      zQOaQqVSQ/uRAuq6RjyRQEdh7vkciqZRSKcQf2yDfyFyr00ul6MjKgBI3SbNrvSLyCJ2GuRy
      BURZe0Mu0Om1m/Qk9T2tKHRfyq+rMqV8jmqzg65rVEt56q3eB8lSKWbJF8rI6usPRul1kVSV
      niS/8RtdlylkshQrdbRD9MO9nvjOY7qmUm800YFut/vett6pANXUOvGdFHWxTj6ZYiNVppjJ
      oyCSzZTJ7W4x+/wZm1ubPHm+QLNe4fnsM54+X6SnyGyvLPB4dhlZ7rG+Ff/RCiAgIFbKNJtl
      WqUK2VaPbLmJUWmzubZKvtqm06oS29wgni3/yLN8KAp7u7uUSgUWltfRNYmV2TvMrud/5vO+
      DYnY5i7FXJLl7V2SsRilYo6F1S0AdB2W55+wlcy8s4ViLkVPrrC0mAagnEuSzpdYX1ggtbfD
      WizF4vPntN6nQ8Dq4gKFzC5zy9to33uXK9uLZBpttpPZ/Q90lXQqiwqoSpmVpQSpnWVWYgU+
      VAW2t3feeUzutHlw909UWhKLS8vvbcv493//93//tgOF7TkU3xDtfBW7x0RRddPd2GDwXJCv
      /3GZ/MZTXGEP/zabISDtkFdclJsyI8YsSwUTtdgst//1/8U2domNtU3OnzuB8QMv8DUEAV2u
      sJvqMXYsQD7RxOIwU8vEMXnCZHe2afUaaGYvhVyGsZGhH3OWDxUGXygCUhuDzQOtAoLLi6jY
      GRnw/IznfRsGQgMDSK06Nk+IyclxhF4Lwe4h5HOD1iJfUUAUCUXN3P7/7rG1G8ce9LPx7DHx
      Qhej3sLh91DKSQyP+LG7/fgcArWegI7M9MxpgqY6VUL47QfbS1odkbPnL1DOxrEg82xunnxN
      wi30UD1hEsvP2d1aR/MMUS+XGBwIoeltZC3EufPH2NvZwKzUeTy7QFtzUs1usrERQxA0lubn
      SZV7OKjzzaNZUpUeZ45PvFUOVZLR6FKua6hyB59N496DJ2wlS4xPjrzxDh54VZGhSRZezDMx
      EAIEVKVFOp6irWgYzXaGhwdx+UMMRwLIsorZasUgQK+aISk6+cON4/Skv3yu4vKEKOQTuH3T
      9MovsLoG0HQds9mMgI7B5mRkaAiv0/4Xn+t95OPrdMxBjo34mV9YYmdjg/XlNT5sovBTopPY
      WMQYmmA8GiC7u0bHGuH4WBTY73nXkhk2d9YpN0WiUxe4dekEjWYNoyPCzaunUKXea711p5Jl
      K9/hwrnjWHUNUVbo9WSslg/rujRVRlEhsb5KQ1To9dpoLx//4PRZfv/lBXotiZ74+hRGkVpo
      go1KpYKuiezuppEkuHrzJs3cNpW2hNTuUKq3ufbl7zkxGjpQDos7ikspU+7IVIs5Tl7/HWd8
      Gvm3PKR3jgA2V4DI4AhDAyGGxyYIB4KMDTnI1XTOnpxhZGIYfzhCJOBnYGCAYGQIr9Ciax3h
      959fwq60MYenmZ4YY3QgiN/rRvig2/gmJrMFu9NLwO/GYXcRioQZCPnI7O0RmTrBgN+D1WbF
      Ybdhs1l/5Fk+AE1iaX6RfDFHqWvgi88/Y3o0hMU9yGDA8fOd922oLWafr1AqZmlpAsVYjHwp
      T6mjMxIJkCq0+OzzT5kKu2kqIhtPFij2ZGZmphB0Ab/fQ6fVwOX10WtDOOwmsbXEXjpPOldi
      YmKMlflnNAhyLGolX5folYoYvZ7XTYcv2Vh4yM5egYGJU4xFXWSyVVy+EGGXBaPHj6Bp+J0m
      2rIFAwrhUABd6zH/8BmpUpWZM2fROxVaMng9YXx+F+GAH5tZoFCq4fAEGAzZWJhdpK2bGfbb
      qLYVyuUiXs93o6+mqoiKwvhYiLXNHOdOTbE8+5Sy7uHM1OAbPX7fCnQkaJJKaYyMeH9pQf7d
      0VeAD0BVP2AV2OevkreNZgCUth4TN53k6qTvB0ca3L8T4+KFEcyuADbzr9+Z3Gw2URTl/V/s
      81fHOxWgmd8hbh4iJGXJVyqMnryMR6uwuL7A/IpExNsmMHOZ7cUXtI0+Lp4YIraboFrvce7S
      eVLrL6gb/Hxy/tjHvJ6fBZ/vh51An18LB3ffapuv//yYgFfmn//4hH/6xz8RGB7GbBDI7KzS
      6kpsLC/y3/+P/40Xa1vcno9jrK1z++Es/3LnyQfbdf/ayMdXydT2nUe13C67ucYvIofYKHDv
      zj0ylfZLudbJ1vYtLIn1OcoH+oF0Sqkt7tx5QLWn0q6kuX//MU1JRe41WV/fRFJ1YivP+eqr
      r/jq0Tyq9u4nuvj4NvcezdISXx8pO+UcjZ5IudZ84zea2uLhV1/xZGEdSf3wt6Vcfre/R5V7
      bG7toAG5XO69bb13/mK1exgejSLIMpoKgqC/cmrVU2uUnZN8fmEMWdFw+UMMhn3gCPPbT87z
      b//1/6H+oVf1V4LcLrEX2yJZEVHFJtuxDTL5Nx/uz44u8nRukxuf3STs2bd85atN8skYutJk
      d3WJXEun06xTrtRRVAVJUtA1GVFWQZHoCG5ufXKaraUVVrcyXLo4ydLiBrVKDVXtIakwefoK
      v/vNTYIOK8IBZjyTK8KNs2PMz71AURVqlQrtnkQrm6DSFdnLZCmXK8iKTGwngQpoepvA8AVO
      Rk3MLe8i9zqUy2V6sookSXRaTSRZpl6t0O5K6JpCrVpme3fvnXKookJqd5lUqU0iuYeuqTRq
      FRrttxuq3zkFipz6kpuCF23Yi9Xu5j/8LozbMM1Guswf/ofr+O0SDv8AurKA2f0HBqNRRsd1
      QtZJrskWCrECf/O//E98bPfQz4qusBvPcvz4JGuSTjqxx9j0MXYLv4AsUoNOt8c3d+8xcvw8
      x0dDGMx2rJpEJpUjODIEusLW0nPWYynO/uZvkSslRn0GWs5hxoNOogEn2ztxpqaGSReruNwD
      2I1pwkOnabfrgIAgQCm9h29wBMNBGgBY3WG8jiSp9XmerO5idUe5MrSvnNV8CrWWxDp8mXa1
      xhTjfDtWeKPTmFPPKaebPJhdITB5jSB5JMGN366wsLKNYB/g6ukgmZJE9R0v87cMT0xSSCZQ
      dZ1KepPVvRZKp8u1336B6wcujXcqgDM4ghMg4AZgfAQgyKdDU69979L1T1/9P/jyXwcwFL51
      oJB/jShil2xmj73tGhlDE9ndohdrk6p6uHBuGNvHFMbsxBcIcen8BM+W9zg+GgIMhEJ2Xmzm
      ODPkoiB2Ec0eLh6LUu4ZGbJ0WEnBjesOUEV2YnuMzZzCaVLY3YnTaZXoqa9fha6K5GoSx864
      3yuS1K7Q7IJBa3Ls/DX8NhPGegYVCI/OcHZIYDn7pmO0WUwgm/zkq0UuXT7Lzl4LIejl8rlz
      bM/fY/L0FYIOC91OkZmz50iurxwoh8HiYchR495ul3G/geGZMyi7c7RVPlwB+ryJyebmyz/8
      DXSKpEUPw34ryA3SFeHjvvwABjunJ/08fLrMqQtXAIhEwvi8dsYmrPh8AgaTg2pFp6WGGA3Y
      sLccOLFjMQlokkqzmufxgyyRiVOcmAjzbH6Li1evEF+dYytdYqek8sWlGSLDI1iNB/f+YiPL
      o4UuFy5ewGno8OzpPNXwODMDI2g2K46AF8wQ8ZuR7fveaoPgoLT3hGo7ysXzp2jnNNbTVaYm
      JvA4DRgFmD51nufPFyjpo5yeGGd+9jG20Ahiq0pDNtFt1xkbGXklh9FiIejz4fdEOdbdITo+
      wYu5WYTAOMcsb8rd9wMcEXRVIRaLMTx5DJvpx/rkf330FeADaDQafT/Ar5S+AnwAsizTv02/
      TvoK0OdI885o0D5vJ7n2jMcL63R1K0olwbP5ZeqSicHQxw4000jFNlhPFhmOBthZmmNueR3J
      6CTkc1KLr7KQbTMS9hFf/oZ400n0XRGrukpia5m5hSW6ghNjJ8vDp3PIZh82pc7c8hqeQJRK
      coWn88ssr8UYGh/DavrOjZRMJLAKEvFiB7/X+Sryd2NzA4dJptaz4rS9boJRui0kgwXTG96o
      JolEG5NaJVOX8bm/C3OvVstYbY53+iSUbptHT58xMDzKztYWoVDw7V98ya8/kOcnRacrmfj8
      d7/n3MwQkbETfH7zKq1q8ReRxh8ZxWFSAQOjJy5w6+ppquUSAFJLo90pI2ki5WqNTkcku7vG
      g0fPaXRFSuUKqD1KlRY6AqHhab784hM61TzJXJNbX35JPZ/A4vAyEHKjKhqD0+f43ZefMj46
      jN38+svcrFfYiu0RCfsp7W3y+PkLOpJGvV5Dkdp0RZlcrkCrkuHhg2/YK1VZvPev/Ov9JxTL
      ZWaffMNK7GXWGDKNWpOt3SwDYTfp2AaPHj2l0pZo1g/2umuqjkFtEs9WqNXraEqP5bknrO6+
      3SvcV4BDoWM2KDz8+k88erGDKtZ5+mQet//gXubnwYDT5WS/qxWQ6lmezG/iD/hffWNkwEls
      PYErOoQR6LbbNAvbzG8VySUTpNMpOqoOgoBB6bK0luD0meNgsWI1mzEadSx2B5ZXXbROOZvB
      OzCEyfB6F5zeWqIkW3EaG6zviZwe8bC6kwRAk0We3LuLYnag9Lo0W1Xmnq8zNjXDuUuXcZs0
      Wq02S0+e0XrZ3u7qLF2jG6tRZS/T4OTUGIVCnlLx/amTodEp2tkEoqqT213FEjmBnt2i+GZa
      cl8BDoWmIti9TE6MoYlNSuUGg6MjlIu/RE6wQm4vQS6bI5PPU6xLjI4MUCh855b2BKIk93YJ
      +3zoqkSh0WNmZgJB1RgddLO0lSfkdyFoMi8Wl7E77FTrbexKi+XVFUTNTqtaIJ3OkkxlkRWJ
      XKXLUPjN6d7IicucChnYSdcR5CaZYhWzed/wbjBbOX36GPlsnnS2wNj0DG6zgNEqkN1Lk8nn
      cAdHGPTYX3mHp859woijRyJfx+0L4LA7MBn3X31V7tLqSLSajbfHJwkWZoZc7GSqmCwW6qUs
      DUnH8pZpU38RfCh0Oo0K+XKLgeFh1HaVUq2FPzyIz/WxXWEKub00HVnF5vbjQKTaFglHh3DZ
      zMidDthtdOpNXG4bXVFA61ZpShput59SfImGdZALx0YQNJV8Lk27p2B1+RnwWclmSwQHh9Ha
      ZQrVFhisjI4OIIkSTseba4lOp4PdZqHZFjGoHcpNmcGhKFK3g81qQsWC1G1hMerkKk3cbi8+
      l4VUpkAwFKBSKmFzePGHfJhQ6HQ0bBZoizJGwYjNYkJSVVRZxmo10pONoPawO90YvzcaaaqK
      pCjYrCbyhSqRoJd8Novg8DMQeNOb3VeAo4iu0+t1MVntb0xljhp9BfgAKpUKsvyWCWSfv3r6
      CtDnSNNfBPc50vSjQQ/J+rOv2KnA2PRxzPU9UrUOvug0V89MfmRJJF48ekqh2SI4fpYgZVYy
      bf7mtzcBKCw/5Wnbzt/eOMvyg3+g7LrBby6+o2iYprC++JxUsYEjPMmIpcZKsoh/+DTHAyrP
      NxJcvfYFYmGN1XiefKnJ3/7df8Zr++71+dM//O/gCBCcOMdxv4rsHsP/0i7Qa5ZpKnbC/neX
      jkksPma10ALdxGeff47b9qPKqNEpJ9mumJh0tkipEU6NHpzO2vcEHwqNVHyP4MgkE6MR8tk8
      oYEhsvksMxNjH1kWAwMjY/gcZlSDmenpGcROg0gkAkC7UKVjlPH7XBTyZQRbGL26w+ziOlZv
      kGIuh8eus1fs4XU7CEVHCPuciLJCW9S59dktCukY0yfOYDNKWOx+wtFBxqJ+BKuH0WjoNW+s
      qAhcu3KKbKqK26yhWm2sPn9IoiwS9hjpqiaSq3OsrG+h2/x0i9s8m1umLhuJhrzUyw1OXruG
      XWtQzdQxBr3UkzEkVWHuxQI7O0n8oSDrC0+JZRoMDEZ4W4S2yeakEF8mVta5cHKU2MpzlrfS
      +IMu5r75hlxTIzoQeDX16U+BDoXA5ImTOE0qC4ubnD57GrvNiuEXyX4WKCQ2qKoOpscG3/qN
      6KCfreUYwcEIBl2j0WqjixU2ElX0doWNeA6b3YYgQCWzS7ahcWJmjHevCnXymQzhoSF+aDxK
      bc3zf//DHQYmRhAbFbqKhqzqaIqC2GvS6ogoBg+f3riO1EpRqBv5/PPPUFovvehyg/u3v6bU
      tWKjR0/VaNcr9Dod/GOnuTjpYXt7h3i2RrOUovGO+riCwcRoZIDQ0CDIZRYX4/QaBUpNEUXR
      QJP5fv3e/hToMGgy6WScbLmJa3CacjbBxnaK8Mzljy+L2uDZ7Bo2n4eOeBxrM83S+i5N0cj1
      yycRjEbc3jDxyjYzMycpNnU6nQ4mmx2DQWBwKMy9+STHjp8EVWR+YRHd6qbR6RG1S/zrH/9I
      aOwMudgKTxeWMbur/P6L85R7Bs563yxBOXbyCp9GfOzmsgQEw753WVAplStoY1EMBgGr3Y7R
      YMRksmHo7XHnXg6jc9+pJlh9fPG7GzgNArXEGt/cv4felbgSGsRut2LsmvEFvJQyKWwuD/Tq
      5Dpgajdxjo3wfYnMVjdesxmT2U4waEOzOrEZBAQD1GoVFA0sL7v+vhXoKKJrrC08wTZ4isno
      L1HyRWV7cZZEscno8Qsv0zl/GfoK0OdI058CfQB9R9ivl/4I0OdI07cCHZJus8LW5jYtcb+C
      Wmx7i1L9/Vvx/FxUChnaL/eLapTz1Lv7I1Ult0f7wJ2bdFrVApubO3RkDbFdY3t7l56ioYht
      Yjs7tEQFReoQ29qiVO8caOtK726wvZtEVF4veyK1GvRkhXb3zVo+uiYS29ggnsodWHXuhxy0
      kaOmyhQKJXT2c7nfR18BDoPWY2V5C7PFwNLyCsVcHsFkZm1t9ZcRp1tm9vE3JKv7b3psZ5PY
      TgL0Hgv3/kj8oLJ8ikSmWMVqVlld2WR1ZQ1dbbG4usv2yjKSJvNicZ3dlSVkk5n11WXUA8oX
      pjM5jGqLuRdrfP9rtfgauVaH3fTLMO3vb5GkVskXZKRaisWt7Acbk3d3E+++rG6P2af3KDZE
      1tY33ttW3xF2KATa5TSxVJ5AdJzpyVHkdhXB6iUc+Mg18HSNteVNxseD9Mwhwi4TpUoDoyph
      0kW6moIpME5u6T5Pns5jCkRIJ7M4lRp7PTMBlx2/30u1mMPjD9LDzKmTJymmttAsbs6cOkmx
      kCbic7Cxk8TiCjI2FEZ4Ry5ivdHi+MnTVAtJBLHJ3W8eky53CFhUVE+Y+PJzYpsryM4hKsU8
      I4MRNL1NV/Rw4tQUmd0NDL0KXz94RF11Uk2vs7GZQFO6PH30mN18C5ehzsPH86SqXc4cf7vn
      XZVkdINMuSyiqD08JpF7D56xEcsyNjXGDyvC9EeAw6D2qMo2vvjiFtX8HqW9bVoGHyenRt7/
      258YqZFlK5libnaJ7e1dVADByEDQxvJuhWG/B00WaSvgt0nkGwJ2vcFyusGQzwG6QmxjA+/Q
      cUYHvMjdDrLURtGt6GKXniShKjr5UpMbn32BINYPHAEAVKlLT4JcIo7Z7cdpN7/aImlo+ix/
      +M0VlJ7yxn4LYruManRRrjUIBtwU0gU0rHzy2S16lRTYvXhtZqrNHte+/B3HRg7OwDM5QvgN
      DQpNkWa1zMnrv+FMyED5Lc6zvhXoMBhtRFzwzYNHDE6dpJDZJtPeYy8d5ctrZz6qKBbvMH/3
      d8N0SgkqpkGMgMfjxhdw46rpeIJGJLMZzWyk543ic1sJ6y4KOR2b2YAmtkln0ySyeSITpxjx
      m7h//xknL93AIeZ4dP8B46cu49PLzD18gCM0ivGA6nCNQpx75SrTpy4QMjWozG0gGMzYvQE0
      swmDywFG8DgtWHnp/MJCeusJ+ZKPsxcv0cmIlHsaw9EAXq8JswHGp0+SX1hHN5oJhzwsPLyH
      0R16Z2U4g8mEy+EgOuRnu7hGaHiS2dkH6K4on74lZ6lvBToi6KrMyvISYyfO47H1+71v6SvA
      ByBJEpr2C+3M3ednpd8VfACSJPVLI/5K6Y8AfY40fSvQodBpVfMsrGyi6dCp5Xhw9w6pcpte
      o8Sj+3dY2Hj37iU/tSy1QoqljV2+2+7ou+2SWrkYK/F923t+d4mtzAFOAV2nlN7h7td3SBab
      tKtZ7t+9S6bSRmpXeHTvDrFsFalT4/G9O7zYSKL9oN+ce/Bv3H3whHKz9xcFh+u6SmLjBXfv
      P6ZYrVNvdg71e1XssrS8gqLr7O2l3vv9vgIcCp2eDIImAiqxrT3OXrtGYmsNSdY4f/0Wvdr7
      96X6adDoqWZQ2oDETqLKjU8ukoztANApdciU91B0mXRql2KpQ6NSYDe+t++ZbXdAk2l3RHQ0
      NLOHm7eukUvssL29x4VrV4hvbRDf2Gb68nWKyW3SG+tEL3yC3s7TFV83Zdp8Q3x6+TgbKyso
      skQ6maDS6KKrInvxONVWj0Y5RzKVp9dpEN/dpdYSkTpN0uk9cuUGug7NQoqq5uPWJxfRew1S
      yQTJdAFNVcilEqTy5QMLFauySiUXY6/QJJPNoqsyuVSSfOXt21j1FeBQGAhFBjCbBNBVNIsb
      r8OJ3WrE7fdTjG8TGf1YqZFGooMDL7OyzAScCvcfPMHuCbz6xpDfSiqRwRIYxCDoFJLbPHt4
      m4WdItsbm1SLaXK1DghG/G4bW1u7TM1Mgc2Fx+HCZoGe0U7I5cDhsOCLhNh8+oByT8BsejNl
      0eLw47JDYvkZdx895qu7D1lefEFDUuiUMyzvpFFlmVa9wNzsM+48nqe4u0q61mVzc2M/fKHX
      JRoKYTLbsJl06o0WufUNKqrE5so8f/6Xr6krBxskBiemKKcSKJpOMbXBXqlN7MU89bcs4/oK
      cCh0FEVGURRkFUxynUK1QrunkY9voXsHGQl5P1J+mI4iv5RFalLs2Lj1yTVqpe9GIF94kO3t
      TQaCflAlKrKZT6+dQexIDIesPF/NEAl6EHSF7a0Yg+PTeF12DL0GxWqJrijg1DukSlWaLZFc
      tsiZazcJGCXa0uvRsaqq0KrmaHQNyJLK+RtfcOvaWRRJY2h4GLdFwOzyEx0IUM5XuPDJp1gR
      MVmdTM0cJ/QyycbvdJLMpOi0G7QlA6MT00wM+Gl2SrjCpzgZcdPVNVRNQ9PUt44GgsnJuFdn
      t9RGkSS8oUE8VgHpLQ+mHwpxKFR2V5YoVpuUWipnToyyubrF8fMX0DoVdnd3SeebDI1G+XEp
      3YdBZm1ujlqrQ1NxcGzQxtL6LifOXMBpM2EwmbB7vbjMDkKREDa7E5ehQ7FjYGxkEJPaoWN0
      MTkUQtBUSvkUu/EkddHIqZkhNlZ3OHH+PJGBEPG1NcZOnGNsNMLO0gtskQlGwr7XcoLL6S2S
      FYWLF84xMBQhvbmGZHJy5uQ4K/MLGEPj+NQyW6k6ExMREvEi41PjBP1+rDY7NosJu82OxenB
      LJZZixWIjozgtFux2W043T7quQS20DCRoJtauYrc7SBY7ZiN3+vHBQGzxUJgcBCzqjMxPU0u
      toIhPMVE0PXGXexbgY4iuk4us4cnPILDcrQnAX0F+ACq1Wo/IeZXSl8BPoD+Lfr10vcEfwDv
      CgHu89fP0Z4AHhqNdGyNO49m0XQopba5/c1jRFmjtLfBV3/+M3efH7yJ80+HSmxtkYezy4DG
      9uIT/vznr1jazuwf1nXW5h6xnS6/s4VKKY+oVFhZTgNQzcb4+quvuPtwjla9wJ2v/sTdR4t8
      SBDIzvJTvvrqNtuZHLGd9I+8Jp1KPo+kgSLWeHD7K25/9Q3V3oGpba8hd1rcvv0VXUVneeX9
      z6KvAIdCIDI6Q9hrBcA3MM5wyIOu6zSqDY5fuoaNd1Rs+skxMDp9Co8NQKHeMXD12kXkzn4a
      oI5KV9FpVsroeofFx4+5/2iOtiSSSyVYeLFOT+yi6Srtl7mT7tAon3/5BQMOgd10nrPXPueY
      XyLffM8UUKtT6Xr57e9+y1TUTS6+wd17D6m0JQqJNe5984ym2GFnZYm79+5RbPbY21rl/t27
      7JVbpLYWuX3nAbWuitgVQQC1XUGyRbnx6RU8FolMukanWqbaPjj9VNfAbdXYTRVptTuoYpu5
      R/eZ30i+1TzdV4BDIWA2m1+Z/0xmM4aXfzhcThLry/QUAx8nblTAbDHvb5GkC7jsAsvLq2De
      D3qXiuuUFR+tUoq61EYxD3Ju1Esil2VjNcbMqWM0yvu97asWNZmt9VUCkydxmATMRiNWqwlJ
      Ud8uwreoPQSzA4MgYDAYMDkCXDoxRaUU4+HjFTq1PFuJJKWmgauXTlDO5SlVe1y5cY1aJkG3
      J6JLRV6spijniygCWPyTnBu18PThY4rtKul0/aUCvJlb/EN8Q5NIxT16ikYusYZv+grOWpLC
      WwaS/hrgUKikd7aJ7cTQzF4GrBLbOzs0RRNOrYnF5qRabbG/bd3PjUxsbZPYTgyb00292cPh
      sNNs7rv8t+M1osEwYtlMqdKgkksjdg0MnTiGPjSGy/Kmp2JnZY6SbEdJJ4m47Sy+mEWTVC5H
      RcoNCZPYwR4OYfnhD81hhPZdZudKhIcHcbo9mExmjCYzgaAfTyhEJOihIimYTBZMhh42hwuL
      yYLJIFGqdAkNhKl3Fb7dXlJtFtgttLBbjCiKiXpxlZWyTPRymFKpiNtuRcSKx2l989YIJo6N
      +/g/v97g3Ogkse0VlI7G0FucM30r0KHQadXr9GQFg9mG3ajS7skIRgtet41mvYnZ4cJlf8tD
      +cnRaFRrSKqG2ebAYYJGu4fL48VqNiKKIlarFU2VUbQqL2arHDs9jMftQJFVLDiiFQMAACAA
      SURBVBYzktTDZDYjixpWm5leZ7+Gp2A04fV66DZqCFYXTouAqIKgKpjs9rc6+VS5R63Rwel2
      YwBMRgOqrqPJPVodCZfHjaALmE0Ciqqj6zpmswlZllHlHj0V7BY7BjRMNiuCptCoN9CNFjxu
      J+1GFRUzTpcDRZKwmIyoGLH8YLdKXdNQVBWz2Uiz2cHltNNs1MHswON8MyWsrwBHAh1d71uz
      3kZ/CvQB9CvD/XrpjwB9jjR9K9Ah0TQVUZTQdR1Flmi328iKiq6pdDttROnjpU6qskS73UFR
      VbqdDq1Wi+4rm/m+fIr6PpuUhvLSyvPtNfQkGV3X6XU7iPKHXY+iKOi6tn8vfvi5ph6q8tu+
      TBq6pr6S7YN/qSr759I15PeETUN/CnRINFI762xkG/z+8xtk45ukSg26up1zIw42UxXqIvzN
      bz/9CLJIrC3M0xB7WANDOOQm1WaDquzkb397DV2Hhcd3sQ6e4tzM2+sWFXMp3EELi3Ntrt+Y
      pJyJsZksIYkaJ44Psb6VRNNM3PzNLezv6So319eJeMwUdT8nxyOvPp+bn+XkRJCaPsJY5PVF
      aLeYouMZIfiGzaDG+rpIwF6h6xhietD/6kg6lWRweOyNDTq+RWzk2MjrjDlalEzDHB86uGBZ
      XwEOhYGxY2doKcuAgYHhEcr1DawOL6HRSVy+CmuJ4keSxcyZq9fJJ7dpG71MjxyjFF+h7Z7e
      P6x3MDjCqM06qu7mwR+fI5mNnL9+ifz6Kh2jjwGfjiMQftVicHiGq74g67E8tVaby9duIueX
      yddVJvwHB3gX9japRY5x7VKA5Sf3yLc0Tl68+up4r1lho6EQdanMrsQIjs4gbj8haR7is3Mz
      7GysojsG+PTaGYxAJrZCZ3SUq1NOnt27TV3UmDp7FbnZOjDfwuaNYtp5xHzJyRef2Fmbf0iu
      DheunGDp8SyOyCSXLhx79eL3p0A/Fl3HaHEwPjGB2G7QbeSJpeucOXXso4mQ3llBtIWZHI6g
      6zLJksJocL+XbcaXWNrNsrG1RqXTwz98ipvnp6nUKoianauXTiK2myjfe5vEepH1VIUTp45j
      RUfTdFRVO7Ag1rd4/GEMShe5U6BlHuO310+Rye3nJGuyyOyzOTyhMI1aDQ2V+FaSmVOnuX7r
      Fnahhyhr5Da3ab1szxeOovUaKLqG1TvMZ9evokoN2q23pzZ+i2AwMRodZWRyGF0us7KSRhEb
      NLpgMghIYofvF6brjwCHQmFjfpbVnSTlNoRNbdLlJibPIHsbayTqGrlihS++uIr55xZFbbKy
      sovJlac+fpIpRw//5LFXPdpe087/+j9/Qi8bp9RsklhdI1/wcPHGRUyiEZNBwGKxYRCM2Gz7
      0u7urJMtS1TLZc6dGGfu8dcYHBFujjTJlATMnQbusRHeUmANTzDKSNjNdqaLubXD7Ucwc+Ea
      zXwTk83FF7+5SXp3h6BVQzBa8LgdWFxWFh58w9npMLou4PV7XvrBDPhDA0T9PXYSeewOOwaj
      CYvZhNVqQ+5UKXbNINcIRoYx/0BBzVYnbpMJk9lBNOpEMtqwCBoYjCiKzPeXI30r0JGgQTyu
      MjHhf/9Xjxh9BehzpOlPgT6AviPs10t/BOhzpOlbgQ6J1G0QS6TRdZ16IcXs81ly1Q5yr8nS
      /Bx7xfdvy/NT0WtViKfyr/6uZOOUWvuOsGx8g/qBkcM6tXyS2dkXNEWVbr3IwsIyHVlF6tRZ
      XHhBrSMjtasszC9Qahwchlyv19GVHsVq8zUzZblcRu41afcO49ASqde7qGKHSr31/q9/D6lT
      o9FRQOlQqr2/qlxfAQ6FRqlYoVQuoqOjCRYmpyfYXFsksbaKe3ic3c21jySLQq5Qp1L+TgH2
      Mln2duPoWof159+Qauqoiowk73t2NU1D1zU0TQdFotLVmBwPsb6yxup6jIGIg8WlbbZW1/AP
      BFleWmVzfYuhsRFim2soB3hz03tJklsb9DQBXVVenXMntk23mafckFHVfe+uJEmomkYttkKi
      IaNpGrIsobyyT7bZ26uys7mOLJhQFQVJktF0nb1knIOcyoKusbm1TWJrE1kwoqoKsqy88tz/
      0FPdXwMcCgNDYxPU2vuOMLtN4MmTWTyjp/DZm8wtzGPxRz+SLCYmpiZprS6/+sRodWFRuxRS
      afwjI6ArLD6+w1aiwIXf/ke65QoTfoGKdZCpsIuxoQF2dzYZHR4iX60zODRFLvcExephdHCE
      Yq6A2yLwYmGRSlvm4kWdd7lg9zbmsY5f5Uu/kYe3byMJBgaOXQD2Qywy8Q2adT+Dtg63Hy/g
      Gz6Nr7lFOtnCdmKE2aeP6Agh/st/+Q0WYGfpMZHTFzjuga//6Y/oFhsDM2cRS3mGRifeeVfM
      Tj8BVtmq+fjNjMa9P/4jhabOjd9+wtzth0RPXOD65RN9R9hfjK6hGpx89uUX1At7FAoNrnz2
      BZZOlQ/PYP2pMRIOOlhLlIn6XWhSD8noZGbYRbljxGNqs5Ju7W+RpEnsbMWIjJ8iGnQjtVr0
      ujUkzQ5im1avgyTD8ImL/O7zTxgJ+zC8K/4AGDl+nrCxTalWBs8EN6+cptV8OX3RNeq1Glan
      m1KlyczxY4j1BlPHZjh3+RrILSLD09h7Tb6dtEyduYpDLlPrKkTGT3HrxnWsxg+5swLhyBTT
      M1E0pUlLtHPmzAw2s5uTp2fQulXE79kz+iPAodh3hCVyZSodA2Nuhe1UiYGJU4x6FOaffINz
      YPLnd4IBIPLi4VPS9Sai4ObKqXECAT8+v5Nw24gvZEAzWTFYoGuIEPXaCCpuioqA1WxAk2TK
      pSypXI7IxCmmBl08erLE2SvXsYkFZh8/ZersFVqFJPMbKWbOXsJ4gAIEghEiARfJQpshV5NH
      i2XOXb5MsyxgcTq59skE1VIWf9BHNl5kbHwIZ8TFi9lHnDw+QbedIzo1yX5YkJVgyEjI6yZb
      bRIIeDCazXhdLiz6AMp7HGEWhxOv0YjZauPYVIBcpU10DNqNBlbvENbvRXX0rUBHBF2VWVtd
      ZeLEuSNfDe779BXgA+h0Om/sbNjn10F/CvQBCC+rHfT59dEfAfocafrl0Q+FTjWfYnk7zeBA
      mEpmg28eL1DpgUOp8PjZApUuDIU/RtCZRiG1y8ZeicFIkFJqkyfPl7D6IrjtZhqpTVbyPQaD
      HtIbz0m17YR99ndclkY2vs7z+SVUixdTr8Cjp3PojgA2tc7jR0/pGJw49AZPnjynqVoI+T2v
      lUd/euef2YhnsbiDeBxvFE55g1Qyhs3lxyi8PPfCCmaHh2a7jcfl+IF8OrF4HJMi0VAFnNZ3
      t9+t5ym0wKHX2auo+FwHV+joj+uHxGBxYTXtrwdazQ6XPvsd185M4ggMceuzT2lVPtYWSWBy
      +DEjAiKJdJtPP71MajcGQK8mUWnkkHWJfCFHrd6lnEmwuLxOW5So1xugidQaXXR07L5BPv/s
      BtXcHrFkkWs3PyWf3CG5k+TMJ7doFZLEthKc+eQztEbujS2SXKExvrx5jvRuCrnXZHV5mWK9
      Q61WA12jUW9SySVYXF6lJapUy0UUDZROnXRd4/MvPifsFMik4iwvr9ISFbKJLZbWtpFUjWKp
      hNis03xPmUSL3UUuscXqRhKfz0E5G2d1K46sqsQ3ltlO5F4rXNZfAxwKAa/fjym3X/vSgMb8
      w9vY/cN8cnqEZ4+fYvG8Pf3wp8dAIOAnk0uDLmGye7Fa7Xx/56LhkI3kThpbeBBJhlopw/rS
      OnXceKUig4NeWkIAr8eOwwIr6zGOn5ghvpvAabVjMYFosOGzW7HZzIwNRFl49IBKU2T0uIrz
      exWCUtsvyOayhCfPsbq0RGBkktjaMg6zEfXYNLlcFadSYG1xh7pqxffyd2JPwuX1YDIaMVnM
      SLLKSEAmlm5gKO6xuBYHd5gPxWhxMOhU2en5cAgt/vufbtNTQDX/hs0X25y9FvrBXexzCHRa
      9RqNeoNKvYHJGeb8+XOo3Tr1epOpU+eRa8WP5AjTaFQrNBoN6m1Q23n29pJI+nd9mjc0xE5s
      k4HA/hZJpa6Bz25eQpdVRqMO5lYzRIJuBE1meXmdUHRwv2CV2GA3Gacrm/AYemzGk9RbMhan
      h5OnjhMK+nFYX/d2DE+fZXJoAK/TAt9bVs6cGufZ/Uf4ByIUajo3b17HqHxX39PudlLLZcjm
      85TrbbzBAQajQZBkWpqNm5ePIcuvJ7d3u100VUaU3hahK+DxDjM24gN0BsbP8B//0//IWCDM
      1StnSO2s0vreA+qvAQ6FRjG9h6QJdFUDUb+dVDrP1InTWAWJdDrH4NRxAm+pQPbTo5COJ9AE
      I7Jg59h4hFyxyclTxzEbBUw2Gw6Xm4Dbhz8YxOVy4bfp1CULY8MD9OpFNGeIsQE/gq4j9lpU
      KlUkLExPDlHIl5k5dYJQJEQtn2fs2ElsgkgyXWTqxGnc9tcVwG53EB0eQRW7DI8MkUtnGZ4+
      gdBrUenC6WPjOMwK1a6BibEoAb8fu82O0WQh6LWRzuTxhgfxu51YbQ7sTjt2g4xk8jEcDRPw
      unB5fTgcdtqtFjazgbaoYn/LesBgNmOz2bBZnDjMMrlym0A4QKNcIDA8RcTnfLV+6VuBjiK6
      Tq1axu4JYDX9vJOAdr2CbvXgsv37nG33FeAD6CfE/HrpK0CfI01/EdznSNNfBB8KjcTGMs/X
      4kyMRtlYeMqL1fX9v4Nm7t1/RKGjMzIQ/AiyKGwszrMSLzAxEmJt9gkLK+tURSNDYR+l9Tm+
      SdaYGgyx8eRf2Ki7GYu8uU/uK9oFNgoiIc+3zjKV5acPWVxZo6baGAweXGHt63/8r2zHU3QM
      biJ+17dl/iklUwhez1sjZLV2iarqwN7LsFGBkPsvLyvfqeyxkxdxynl2qgIhz8EGiX+fK5N/
      txgYP3GOtrYMgomTlz4hlNmlI/hIbM2imCwICGh8jKHVxInzV5BXlwETo2PDlHs5fK59q4im
      WPA5JEqlMqLZhUHTaVbLtFtVuuYwai2JJzqNWE4TGJ3EIkuUK0267h41PcSgz8zpy9dwxROY
      fe73SuMJDTM4HCZb69Br12k0m9Q7BgI2IwZVoVwpUy9WcI8EqZcVBgcCWFo5CsYQAbNCqVxl
      xNagI/gR5BatchHX4BjVap1Rl0LVNsHgAfr7LXZfFH1vjudFJzfOD7K5vo7VoGMJ+qlXFEaH
      QtidtlfPpz8F+gvQ1S7pYpehAR8Ol58L129iqeVof2xBNAXBGeHG5RNkM995ogcGB1hdXmUg
      OoBBlVjfWCO9F2M3VaYtQsjroFgpYzIICIIBj9eLgR7NlgLo7Gxu4ImOMxzyvleETrPM4mKM
      odEo8c11MtkUW9t71CsV2p0am5vbxDeWqfTMdKsZ5l4sI6ugKDI64PV50bUe5UyBzdgO8e1F
      ClUJ3WjEorWoHrw12CsEg5mRyCgjE1HQGqwt71DrdAE7aivH/MIC3X5CzI9lPyEmni1T6Zq4
      OhMhMjqCySAwNDXNwtxjhMAIH9BR/QS8TIipNRF1Gy61SrrUYuzEeQDsgQB2l59WMIQvEKaj
      CWhVK8WOkeGwB7fFgUGAk9OjPLp3n/GZKQIuD0YLeJ0mQKKczZPMFgmMHCPiMhAJhymUqwwP
      vpn2OX3mKpGQj710EZ/fw2aqwujICFKvgtnqwCwoCAOjeMyQaDVxhsYx+32UHz+ieHqGgNOC
      2ewhEDbRqCYwRybwu6wYjCYEk/7Kc5xOJQn53VS7ZqKht99ps8OJ52VCzPEpP/l6l+FJaLda
      WLyDWPoJMX0+Bkq7wuJuhUtnZ/j3ujdNXwE+gG6320+I+ZXSXwP0OdL0R4A+R5r+CHAodGrF
      FM9frKLpOpVsjDtff816skA1G+PO7dvMrSU+kiwaxfQu86vboPaYf/yAP//5z9ybXQWgkd5i
      fjsDQGZrlrVk9eDmxDqZ8versGlkdla4/fUd4vn6e6V5dvdfuHPvIblq+7XCU430LuV2l0yh
      sv+BrtFpd9ABValx55//jfuPZql3PzzUJJPJvPOYInaYnZtH1nR2d+PvbauvAIdCB6MDi1EF
      NFLJApdufko1m8Thi3Lzs09plt/9cH5qDFYvJr0HRhuXPvmMz6+fJuDZz0brVUXK9SyyLpHL
      ZanWelRySVZWN+lICo16jVQqhdhtsb6ySrFcIZmMs7q+xX6ui47VO8jn189RLhbeK4szOMqt
      62eJb64jSz12NlbJVVr0qgWakkw6FWd1dZ2OrJIvlNABHZHo1GWunBpkfS1Gu5pnZWWValuk
      2WiQz+zRareJba6RLTfRlP12l7eS75RDkzW6tQzJfJ1CsYimSsS31knmKm+/hz/ivh9hDPgC
      AUxGATAQ8Fl5ev8+WL0YUZl9/BCLK/DRZAmGAq+lJcZ2skxOfmeiHAraSMbSWENRDIJONZ9m
      Zf4b5rfyrCw8p6ua2FhexObzYzYK9CQVp1AjUegBRrwOWN7KMTM9/kESmW0eHDbYffGYh/OL
      fH33Ad+WBBVFGY+lzXa6TqFcfe3Fc/gGMWkNWvUiayvzPJrbZmdtgVJLI7u1wOPnC3z1p/vs
      7Kwjmz04rQdXXoqMT1FNJ1A0nWJijbpqp7C5TPUt+/31FeBQ6HSaDVrNFvVGnXxV4vzFS3Qb
      BeqNFsfOXET5iAkxrXqdVqtFs91DaeWQHFGcpu80whcaJLazSTQQ2E+I6Rm49elFVFHCHR5m
      ZiyKwWjEarZgFARC0WGi0SCoGqAwt7DB2NggBl1DFEU0TUMU3351YrdNIbNLUzRjMFq58umX
      /PbWFcwvxfGFBxkZimB4LbdFp9NqkNpZQrdHyRQafPrZDey6gtEZ5PSxcYxmMxdvfM4fvrwK
      iorFagV0NFVGklV6oviGLILRzlTIxHa+ga7rGE1mjILA21a7/VigQ6GRS8bpyhpt2cSJyQES
      iT0mj53BZuiRSGb2E2Jc70g+/0lRSO5sI2sgYsFtsxEYCGJ+Wb7FZLXicLvxuXz4QwGcThc+
      q0pVNDM+HCXgc2GzWQkFfSRiCSzeEEGfG7vNgdVmw2rW6dTr5EtlZMGGQZewWiw0mi0cjjev
      r1MvUOmaOHvmBOGBMKW9BIrJQSQaxuFw4bbbsFn32/Z5nTjsNsBIJZdCsgY4c3wUj81IttJj
      fGyUUMCLzWbF6/dTzqaQDHYmxobIp/bwRoZwWwU6kkan1cTpdL6SQzAYsFmteCMDeCwWhscn
      aBZT2KOT+yUhf0DfCtTnSNMPhfgA+gkxv176I0CfI01/EdznSNNfBB+KbxNiEkyMDRJbesbc
      8jpNxYJW2eXx/DKllsbIwMcwhUq8ePSIpfV1Otip7C6ysLJBXTYzGPJS2pjn4V59PyHm6b+w
      WfMwemBCTJHNokTwLQkxdc3+/oSYf/pv7CTSdAQX4e8lxBwWXW7z+MF9Nnf3EIxmeqKG+xBV
      NuROkz/fvs3Q+Awry4tEowdvWNJXgEPiDUYQOzVCAR+JvQL/f3vn9R3XleXn797KGYWqQk5E
      ZpQYlKgw6u5xXGN7+cF/o9889rLb4/G0mlKTEolAgMhAAQWgcs7p5usHqCWqCRLEtASvEet7
      wloVsO+pu+85Z++zf3tmcYF06gRBMxmfW6SUSTI2OX4FU6vI4NgEg31uWrKM3FaYnrtGpyMx
      NBCilStTNSQiYT+ZZArDHoH6Cc83o/gig1SycU7iaZwWnaXl52CxEo+fEj+J0zc0jtMqEhmZ
      YCjkpdnRGQi9uSagq5h8+PFHZE/28fncrK0s09Ad+CxdvvtuGc3upRzfZfe4hN+lsrT0HMXq
      w9LO8Xxrh1xdZSTSTzETxz0wy/u3FrBoDXa3tjhOVxkZ7mdr5VtiuTYjQxFE4XwX02WVVrNA
      U3XSaVYZ7PfyfHmJTF1neLD/FcfsLYEuhYDw54EXHSzMT1DI5mh1VOYW56jls9SaHa5mUyVQ
      zZ6QqGrMTY7isAtkc3n0l37SkWE/Rzsn9A0PIZom7U4XUyqwfZgnk84wMTPP8fEpH372OWNh
      L97wOB/eGiRXkgCBeiHOaVFmbubt1O4E4Wx8Yi9WKHYUTmOHrO/EePDZFwxaWjSdQzz84CZq
      p41uGGxtb9Np1Jm4+QFO46y5nm6aiKLlh3EenFxk3muhrMlIkkZmd5eK9uaTuf7BCfRKhq5m
      kE8cMjD/Ef1SjsKrKYOeA1wOneOdF+zu7LK6E6NZq9CoFBgYvUanWaVWLxMcHLua0Jre5NnS
      FpV8kqNEllazRafdpt398Vf29g2Qy6YI9fkxTY1qvYHH5wPTwN0XIeh10O93sPJsiVSpidvj
      wWKzfn9TSDz7bp1aMcXhaZZcPoeqKuQLxXPNyZ3u8eRP36A6QgwMRrBbHQwODjIUcLKy9Ixs
      26SdibG6tkelWkV0eLFbBSxWGy6nA6v1bNQi4QjHuyt8+/QZpbaJ2+3CZrWiKi3aEvhdTlT9
      zI5qsUBXPc8ZLCxMhzg6LeLx+YltLRGravjPSSD3okCXwkSVFTTDQBCt2CygaAYOhx0MHUXV
      sNkdb2wl9POZcpaVNX7IdJoomo7dbsciihi6DqKIoelYrOJZctfQ0I2z9wuYWCwWTFNHllWs
      ViuCKCIKYJgCFhFkScYwTUSrDYsAFosFXTewvixA+j2K3MUwRewOOwImiiyDaMVusyDLMhar
      HcHU0QywWUVUVcditZyNlWDBNPTvn/wmmqqi6SY2uw0BAUwDRBFVkREEC1abFUM3EAQTQbT8
      ZDlkmiamaSKKAoqiYbNZUBXle1tefTT1HKDHO00vEfYW9BJhv156M0CPd5reJviSqHKHYqFA
      V9ExNIVysYik6rQbVfL5PPliFePir/kZMGnXqxSKZRTt+/9omnRaTTT9zc80U1eRlLPNo65K
      FAtF2pKKaWhUSt//bRq0G7Wz2gDTpFWrUGt2XvudtXKBYrmKpv+1V28itRsUSxUUVUO9IOLz
      l+iqfDYehkZXPuf881/QmwEuhUZsd4+WqtHSbAzbuxRlExUvC0MuctUGsXiR//B3f8ur28Sf
      GVMmuhOlLXcx3QPcuz6FoUn86Y9/YOrOF0wNnZ+4yqUTBDwauzk/9xfDJKJbVLoaLcnKVBiS
      ZRlFgfdvjpHaW4e5f8e0Jc3qXhLkLjc+/ZKQ49VN/uM//B5fMIJiDfLgztzrGspfiNIssbx5
      gN/vJxDoQ7R5GB9++8SiVM+yl5YZc7dpuiaZHnyzSE0vEXYpBILhAUSti+hw0O0KvH/3fcr5
      JLMLNwhYVYS+EQb7rkAZSLAiam0SuTLDY1P0eZ3I9QQdwnRkiSFPm3/4vyvE4klCwx6eP1ol
      L5kgNfD57ZRaDkbCbvz9A7iQUSxuFLnDjdt3sXdyiAPzTHpkisIAZifPwMgsExGTXMNJOPCq
      Jn+7o3D7/fcpZU+wo7GytkahrmJXijxZ3kAXbRxtPSeWrOJxSCwtrVGWBMTKCU829jjNVrk2
      Pkwhl6RvcI656XFEpcb66hoH0RTDU0NsPnvMTqzA2MQI1td4mMXhpprc4rBs5b35EfbWvmN7
      P4G338WzR08otQ0Gh0I9Zbh/LvnTA1qWPuanRhE0FdXQMUwTTIPTTIXJ4fDFX/JzYBp4wmO8
      f2OaYvEsNh/b2uMkHeNo74CuqjJx4yPuz4zS6DRwBid4cGMKudv9SWFIKR2jpLi5MTsGho6m
      aciKie2lKcxqmkiahipJWN/QoM7QNTQd4gc7NGSNbqfFYabB7373W0adGt7JG3zx8H2kagXN
      NIgdHyOIdu5/+huGg3ZMwG61IikSpmFgYOP63Y95MDVATWnSaqnUTk6ovGGZJQgWxoanuTY3
      hqmW2N3NYOgdOooNj9OCLLV4eVXViwJdBkPmOBanI6QpliaZGXTw5KuvGJy9gyY1sfgieBy/
      +OLnDLXDi9U1ml2NkdlbgAmhKf7TzZtkjg/pSDJ7z59QHOzng9FZ9NBZptbt8WKxOvB837Di
      NHZIXbVTKo5wYyrC0pOv8Q5OM1CN8/VKlKq1Svj+dVI7q8hCgIefn+8A5fQhjwoFxuffY8gW
      pPDiGKfLxUzYzteP/sjEzAJyNsrjZIbJITsWq5PBsBub040oCrhdZ8UqocER4isrPDoSmJ2f
      w+GwYXe7QbBgsVgIDQ1gMVTS2RIOwcQdGsBt++mYWx1uvFYrVnuAyckgHcOBQzAwBBFBFH9y
      HKK3B/iVYkpF0k0/Y5G/XnH510zPAd4Cw7iauE6Pq6e3BHoL6vU6mnZxSK3Hvzx6M0CPd5pe
      FOiSNMtpnjx+TLYmoclt9g6O0HQTuVXm2ZNvyVRfnyz6uenWixwcnzXtVto1dqInL71qUkyf
      UGpIF30L+XwDAF1p8fzpE3ZPspiGys7zp0STpbeyZXv5Gx5/t0rjEgpvP6A0Kbd+HjEZXZU4
      jJ1gAPl8/sL39xzgUmg02ib3P7xPPLpLrVKhq3TRdJ3D/WMW790lfrB7RfUAGsVqF6lzJnlY
      qtSQuj9KG5qmSTyeIJPJYKLTbjaoN1oYpoGqyLRaHTLJEzpKk/hpGYBatcbM7QcI5QT70X0c
      Q/Mo6T0qyltckSvIB7fH2NmJoSkStVoNWdXJH5/QNg3azTr1ZhvDMGg1arQ6Eo2TFVZPaiit
      MolchVq9iW4YtJp16s0OpqHTabeo1RpckNz+AV3WSBxtkC61OY0nMA2dVqNOq3tOMQC9PcAl
      sTI8HCIWO2H82gzhSIBqswUI9Pc5WH36jHJN5j7w+mj5z2fLxNQEjd1tAEbGp6g0dn541ZQK
      iP5JhE4NWa/x3ddbuH0CQ9cXSK2tE5i6jl0t4BmY/uEzoYER8skYBMewGTUGgwE0LUC1qdMf
      evOt0qzkiVsNHO5+atkYXy9tEhh/j1mfiUdT2Fj6EycZiS///Ucs/3GVa7cf4G8WyEoOph1u
      sokY3UyX0fn7nG4+IVvq8vnf/oa9nS28eofIg79jpu+NJvzA2LVp8sk4hXSCDgAAGW9JREFU
      umlSyRyyfVpDlxQ+/M0XeP8iSt2bAS6FzunRMf1j04xEXi4RFBiYXOTLzz9icCB4BTf/xaQP
      opwmDzk8PaFc7zI0tcDi9AiKLBMcmeH961Ov/PjF1DFdR4jFmVGcGJRbbQrFJj7PxbkNURQo
      ZCsMDYfIlVu8d/cWeruFAcjdJnb/CDMROx3Tz+3bCzQrWYbGJpmcWyTosTMxf4s7N6/RLtVw
      D4xzLWKh3hGZmL3Oh3emkC+xshLtfoZdMslqF6ndYnz+DuM+kfY5x4p6M8BlMHRajSonS9/i
      HZhg2NbiJFEkVZS5M9vH1l6C+ffuX5ExZy2S8q0usuDGKxXIFBs0ZQsf3ltEjMzwn98fRW1V
      qGot4rsvaM1Mcff9SRrOs6VSaGAUh8XNyOjZbaBIbY4O4sSPvNy/d4fDjVXsA7MEzQaZkoCt
      08A3McZ5JerXFu4QDvWRThcYGgyxGy9ybXKcdi3HkMuHzewgRiYIOuCkVCQwOIMjHKD1bJni
      9TkGfA7stiBDo1ZO91PYItOEAy5E0Y5gtfDn/PpFLZIsdjv9gQD9E0NMtw8ZnLrGxtoqQt8k
      s+c8mXpRoHcCiWrVJBi8CsnGH9G7NfbTDW7OTlzp/70MPQd4C5rNZi8P8Cul5wBvgaIo9Ibp
      10nPAXq80/TqAS6FQepol+cvtujgRmhlWV17QVkSCVhlVjb3CIUGsNuu4kSoQfokykGyxOhg
      kNj2Outb+6hWL+GAB0yT2O4aDdNNn/d8ZbVWo4ZglYkd1QmFvDTLKZaXn5MpdwkHrKw8fUq6
      qjA8HL4wXPj0q//JYSKP6Ooj4HX+cOKynojSsLgol2sEfB4wDWq1BnaXE0Or8Mfff0OiUMTb
      P4Db8XYxmUQiSSBwvlBXt5YlWzdxG1XiFYOg782HAXth0EvSNzjJF188pFPJ4wkO8+kXX2C0
      K9icXsIhP4Z2dROqPzyK06IBImNzt3n44Cbl0lk7IxODWqtLrVTEROJwc4PVF3vImkqlVGB/
      P0a9UUUzFGrfZ69trj4++vRzgkKHWCLF9J2PGbbVKLYvvqbA4DX+5uEDColDFLnD5uoy8XwN
      uVGlo2pkkjGWl1Zpyhq1egMBMFEZm3vAJ/fmOI7GqBcSPH22RKHepVqpkDiOUms02Fpb5iRb
      RVfabD5f5sXB6/uwOTx9FJOHbB+mGeh3k48f8HzzAEXXOHixzHY0+ZOS1Z4DXAoRGzKb20fc
      uH0Lu9Vgb2uPmes3sbs8OM7Ry/klbfH5vN+3SBJQGzmW1vbp7z8rH9RqxyiuSYxmiZbaotpx
      M+aD42yWjZUXhEdHaVYKKC/dDXaHndPoFr6JBVxWEbfDjs/rpCO/XV2uxe7CYYOjtaccpHOs
      LC3T/f6jpuhkYdLDcbpBvlT5yZl8h7sfi9Gh22lSLaVZfXFI/HAbxdpHMbZB9DTL8pNnHMai
      BMYXGA37Xj8qNiejAZGuvR+H2eDJ4xVOd1aJppJE4xUcdutPCoJ6DnAZTJWtjR08fh+Nep2D
      zU1Ej492o0mnXiaXy5FKZ7kaARWdQjpFoVAgVyhSampMTY5QyJ/NALHDLGonTbXRoFhponRb
      lOot7DYbA+MzhH2vLotOd1/Qsfgw5BYem5XoUZRosknIrdPqynQaTV4XC2vWisSiu7QNN26P
      j5mFm3xw79YPLZJ8ff0E/N6f1kqbJpV8hoPt51gCo+TyVeavL+DExOIJMzsxgN3l5tr8DT7+
      8A5WTBrVMo22hKZIdCSFRrP5F5YIeL1DjA77EAQLkZFJ7n/yCSOBfhbmRjk92qPz0g/U2wRf
      BlMnl07R7Co4vH14kKm0uohOH4NegWypAdiZmpvkzW3cfg40MvEkbUXD5e/HLUhUmjKDI+P4
      XDaarSY+rw9DlejqVda+TTN5fYLR4RBSR8HjcdFpN7C7XHRbOj6/k0Y5R77SxGJzMDY2SiWb
      xOKLEPJYaCkgqhLOvr5zs6fZ+BFdnIyOjmATVFLxFBZvkLDHiulwo6s6Hju0FRFdU/D7PJiG
      TDyWQPQEGB2KoLTK5GpdAv5+HDYBj8eNqckkU2lEZ4ChfhfpdA6bN8iA34lkiGhyl76+n56R
      0BUFVRBwWq3USlnKLZWRkSHK2TSiO8hwJPhDc8GeA7wT6Kgq2K5kc/4vi95RiLegpwz366U3
      A/R4p+ltgnu80/QSYZdCI/pilfXtHbJ1DeopVl9scZxvEXZIfPN4iWLHZGwwdCW2HGyusxnL
      cG2kn/XlZ+zs7rJ1UmJxegzTNFn/7isquouB4Plhw2IuhcUh82KtyMhoH8XkAc9WXhA7zdLn
      EXjy5CmxRImxqTGsFyi9/eF//FdiiTQNw81QyHdhi6SdjRV8oVGsgsrW0rds7R9hWhzkSlUi
      /X9x8N80WFlbwyl3KGgifW9omaS0G/zv//MPjEzNsflindGRkTfa0XOASyHQPzjKYMiPJOvM
      LiwyPNCPJElIpRyesWuMDkbwuq5CikQkPDhCu1lhYHCE4bEJgg4N39Ac/V47mDK5YgNDMxgY
      dLL8aInDeJpApJ9UdJ/jdAWnw8Tlc5LPKIyOBXH7Q0yMDqB0ZVqyxPVbDxiwlqlZBgk433xL
      S5rABw9ukE1WcAlNnq2s09btNGslggEPyWSeRuGY55tR7IEQnVqB4MAYRqtCFTcfP7hHv1tk
      b2eT46NjbH1D5A7X2NhL0Dc4RKmQI+hyINndBD2vP9WqKyqKXKMu2VC6TSIBJ8tPl0iUJUZH
      Iq8seXpLoEshUM/HSZQkFuav0almOU5XWViYw0RAME0O1jZo/3+xTeM012Vq6Kxreie9w1G+
      Q/L0kFq3i7N/mgeLo+TLBUqVLnduL9CulVFfSoSp7Rr7J2km5uZxXvLOSB2u89/++yMik6Mc
      xnN8+vkX6LUkNrXNfjxHV4dWs40utTk8Trz2e3zhMT7/aI5KuUOr1UapxjkuXG5EPeExhEaO
      tqpTTB8zdvtTRqmSP6cqshcFugyGxNrqBprTS7MrIeSilHFSanZ5f3yYla1jVNHD1UhRnRXE
      7MSTyIKPhYCKZ2zmh0RTLKfx28/eQ8onqNTqJPb3yefd3P7wLoTBYRURBREBAfF7nc3D3XUS
      FZ1ypc6N6RGWv/0jgj3IZ8PNCwtixhfu8fFAH6f5HGGPla8fPcIZGObm7Cxf/f6f+Ojf/FuO
      EjuIDhc20UT8XqHN4Q+g7+/yT6cxpucWcThdWK1WRExarTYO59m5IlEUEQQRURBIpFIM9/so
      d2HonOZ9gmBhcX6I5d+/4MHsdZ4tf40uuPhtryDmXaXG4aHG3NwV6Za+RDa2TVb1cW9x8sr/
      99vQc4Ae7zS9JdBb0EuE/XrpzQA93ml6UaBLIrfrHMdiNLoq7XqJWCxGtSVj6CqFQgH1r24R
      9PZ06iVix6d0ZB1d6ZIrll961aRVL9OSLpq5VJrNM/U4Q5NJnh6TKzcwTZ1c8pRCtXXB58/I
      Jo6InSSQzu3b+yrtVpM/D9XZmB7T7Mq0u+co2ZkmzWYTVeoiqW+uzdbk9tnxbV2m0T5fDOtl
      eg5wKTSy6RyIsLOzS7vVRhQFNjc3aZZyHJyc0u1cVfG8TCpVBK3NXixONpXg8Pj0h1dNE/a3
      XnCczLz2G4q5FJJaZW83C0ClkKGrQepgh9OTI1LVDrGtdZpvcUmJeBJBrbO5F38rZbzjw11k
      HQy1zcbmLqYAnUaVk1TunHeb7O7vU88kyVT/8vjzT9GVNnuHp2RPotSki52xtwe4FBYmZ2fJ
      xGNEBofx+wX2l18QGF8kMDjOeFe+MAP682Fn7vocp9F9BsL9jA30Uev+qAyHXkf0jmA2G6hm
      ha/+fgmcIjc/ekDqxXMM/xghdxdH8EfJktDwFK5qlo4UQdVk5mcX0Ao7FBsavv433youXx+R
      SJByXCK595z9VAV33wgeq8rtW/McHGVxGWV2T0rM3vngh89JjRa+wTFmpsdBabH14jnZow3G
      7nyJln7BabbF3b/5zduPijeMT9lnqxbgN5MWVv70fyk0TO59coe1xyv0T8zzwb3FH2783gxw
      KUwyxwcYvmFmxsII9gCffv4p9cLrn7K/HAbH+zt4RuYYH3hVM7AY3eYgkSR6HKXckBibv8un
      9xZptZs4g+N8+sEN0LWfPK2bxRTxmsF7t2ZxYNCRFZotCfdbdL0pJg/4x6+eMz49Rq6h8pvf
      /ha/2GRiwMvyZhSXP0C93sXrtJLJ/ihaa3PY6Lbb6IaBqukMTd/kX315H60t0+pIuIQG2fJF
      Ar8/Iggiw8MzzM2PYmpV4skmgYAT3XQxNBBEk5q8vIrqzQCXwVBJpzM04lkykXEi1han2SqB
      kRkKp7vs7BxjsxX47F8/xP1L26J3SSZz6NkSkcl5HM00x8nCD8pwTesA/+U/zqOUM5QVmZOd
      bUqjg9y9f5M6Z8sIrz+ITXTQFzxbjBcLWdLZBsVsmvdvzbP94hnWwDh3xYuV4ebfe8hgpI94
      Osf0aJjH33xDeGyO4PAw0vZXDL9/B63ooGE4GAr78Ah2LALYPH2E7Um++fobZq/fxu9xgWjF
      77WiOx0Y4hBBrx3D6MPu9uBx2C5MhFmdbrwWCzZ7gNmZEFVJxC6aqJqG1evG8tI03YsCvRO0
      yWYNhodfX0v7S5GN7dBxjzIz/JbKtldMzwHegp4w1q+X3hLoLZBluSeN+CulNwP0eKfp1QNc
      CpNqNs7y6jqiN4zZSvPts+eUuwZq6ZTnm7scxotMXRu7gvCaSf70gJWNPdzBAdRqiuXnGwju
      fvo8DjBNsvEobdON13W+RoWmqSBIpNNt/H4XSqfKyrNlSl2RSMDOxsozSrKNgf6LC1zqhVOW
      Vjaxev1ILQnPG87sv+maNFUD0QKGwu76EtFEmfBgBJvl7UZUV7rs7h8RioTJpDP4/f43vr8X
      Br0UBipuHn7+CdnTIxq1Onc++S0f3Jxl6sY9fvvlQyJB3xWtK1UMe4iH96+TSiZQcPPwkwfk
      U2eqaSYm6WyefC6LiUYplyWdLaB933aoWKyQzyaR1DaZdA2ATlfh9gcPcbZz7B8dEbx2B1v1
      hLJ0wSLBlNg5yPPJZ5/Q7xFIx+MkUxlk1aDbrJBK51B1jUalTDKVoqvqtOoVUskkLUmlWS2S
      SKZRdIN8MoVqglw7pSqOce/6NUCl3ZbRZAn5gkywruiUs0ckiy3SmQymoVHIpii+JqPdmwEu
      hYjTbhI9PGZ0ahallmF7P0q1C6MDQUrJY6yhsbMn8C+OBZdFZf84x9T0Nfo9VqLRU0auTeNx
      2jE7afJSPzapjG/AwfqzU0ylSttiZX9pBWsgglTP4An1U86dVYQ5XW4KiSiGbwSr2SUSHsZN
      g7oQJuh+w7NSLVBo9TE+HMBmM4nuHIKu0hE0Np48Zv/oBMPjJL4bx2KVqHUEUtE9sFnIl9uo
      1QSrL54jWYfRqwX6xkdw2D00MwccJCsMjdjZ327g0iuUDOsFFWEKukWgWqyj6iouo8FJQaYY
      PyYwMflKoU9vBrgMpk7s8IThqVlCfgee8DX+5ouHtEtZTEMmV9cY6X+1a8kvY4vCXjTB7Pwc
      AZeNaDTG6PQcId/ZzRHfj5FK7XEYT1CudegfHGMoEkDXNEJjsyxMDb2yrMmeRDH9o1wbDeEW
      DPLVOulsnYDXgmGamIZx/jEHWxipekxH7tJsS4RHppi9NoWVDqZ7mN/97kvGI35CwxPMzs5g
      R8MfGmF+bhGXUKemuHn40S069Zea/CkSQ4v3WIw4KDRldF2hUa+hmWeNy03TfG1kTrB5mfDr
      nJbbKLJE/9A4QafwExnIP9ObAS6DqVPIJDiKnVDuCgz6YX19l5nbd3GLBnaPH5/7aurBMBTS
      8VNiJ6d0TCu0qxwdn9k1OhBEtbq5d+c2c1MjGMjsLm+h+ULcmJ3AYbPhcjuxWKy4PH6cNgde
      r4N2vUA0ekSmUGFq4Rbl4y0cI4sMu1QKDQW5Wsbi97+6xBMshAM21tZ38YaG6PO6cXtc2Bx+
      Bjw6+ydZQkOj+N0u3G4HVpsDr8eNy+3EZnfhpE22bWFmdIRAnweP14No6hxsrdOwBlmcuEan
      fEgDP+Ojg1SKeazotBRwOf5ifyMIWG02QiMjWFSda7OzZA43ESIzTJ2jKdqLAr0TKDSbJr4L
      pMLfRXoO8BZUq9VeHuBXSs8B3gLDuLoz/j2ulp4D9Hin6W2CL4XOye4G65vb1FQ7HqPGt09X
      aeh2PEaVx98tU/p+E/rLo7L3fJWN3X1Uq49wwM3m03+kbEaIBJxgmuy/WKJuuuj3nX82tVou
      INoVontVIgM+qrkTlpbXSOQahAIWnn77HYlCh9GxwQvDhY//8e85imfR7X76/e5/dl2EqXVZ
      X37K3lECi92BpBh4LxFYULstHn/7LYNjU0T39xiIRN74/p4DXAoBjz/E1OQouWyGdqXG7L0P
      GQv7ScVOmPvgIdX0KcMjI1dQGCPgDw0yMRSgUO3g1ioUZQNTCDIUcmOik0wmUTSBoYib7ZU1
      DpNFwoMhKrkMsZMsdruJ02MlFe8yOhbEanczOTWFXC1Qbne4tnCXgJqh7RzBb3/zFbUlnQ8+
      uEv86IBgn4/15SU6goc+h8LTb5+hOfw00vtsHxXxu1SWlp5jOINYuyU2trcptE2GQgHKuQT4
      x7l3awHkOtGdbU7yTUYGA2ytfsdJSWJ0MIQgnG+PLiuUC3G6QoBGtchwpI+NlSUKHZHBUOCV
      36WXB7gUAlqnytZ+nJu3F2m3muyurfDVk1U0bDhsFuyC8NouKj8vInI9x36qweL0ABvRDH0O
      gUajiQEopQOqRphOKUNDaaFYhrg15uc0m2Fv+5DpxTka5fxPYuMiOof7OwSnFnFbRRxWC06H
      DeUt63xFiw2rBY7WnpFtSextb7K8tsOdjz9nQKhTpJ+P711HkyUMQ2f9xQbNcp6B+XuIUhkT
      UDQNp92JIIqImARGZpm265QMDUXRSW5uUb7AnuDoNFIhgawb5E73CFy7j7MSp6icN4o93h5T
      5sXaJqapk0xXGBmN4PL6cVot+L0mayurlBXhCrrDAEab5ed7iHqXTK7G8FCYZrNJt9PFAI5O
      qoT8OlarSLHSoJZPEk3kcTtdREYn8Z1T5RXbWafaNSnn03icDra21tlJtAk7FSrNDo1S+bXt
      n8q5OBtrq8higL7+IKH+CHOz04R9TqL7O5QlE7ma5eAoTqlQwhMaxGUHi82B1+3EZjsbtXB/
      iJPoBptbW1S74Pd6sNtsyFINSXMSCXhQDY1KtUazVkXWzglQCFbmJ/o4SlZwuNxkT/bItQ1c
      5xS29TbBl8E0qFcrSKqO1ekh6HVQq9awewJ47CLVahWnL/jW7T7/Olt0KuUKqm7g8Pjp87ow
      dAVVt+CwW5AkCafTiaGpqGaFjZUKMzdGCQa8qIqOw2FDkbtYbHZU2cDpstFt1Wm0JUSLlWAw
      SLteQXT68DpEJA1EXcXqdnNegWStnEfFTrAvgEUwqJQriA4PAY+dSqWK09eHqHboKOD32qk3
      JZwuJy6bBcHmQFNk7HYHgmAitRo0JZ1AwIcgiAi6BjYrzWoVwWLH4/OgKSqiYGKxO7GKPy5s
      TMNA1XXsNgv1egu/z0O9WgWHhz7vq0coeg7wTmBimrx23fwu0yuIeQt6ynC/XnozQI93mt4m
      +FKY1PJxvnn0iGSxzv76M7766iv+uLRJo5Dgm0eP2D05T9jpl7GlkDjg62+eUKifyYZkYjuk
      K13A5HhrieKbZPVNg9zpPo8ePabUVs7s/9N31LoqcrvGzs4eig6a1GJnZ4eO/OZseLFQQJeb
      pPKVSxwbMakX0zQkHamapdTsUqic1SZonRKP/ukPfLu6df5G9zXoSpfdvQN00ySdvliupucA
      l8JA1h08/OwTMqcxFu9+zG++eEDQ5cLqDvLJZw8ppo6vyBYVTQzyyf1FkskkwNkNlDzBVBsk
      jqIUOgb1SpF0toiqqUiSgqkrdBUddBXDFeKzT25ysrfPwWmRB/fm2ds5pN3qIgoqig6dVgvR
      CrLy5tBjIZ8jdnCI3e0hnoijaTKVQp5ssYppGlRLeTK5EpquUcplKNdamAg4XQ5iB7tsHxcJ
      2nUK5TMH0JUGY9cfcr3f4Chfo9NR0GQZRXuzHbqiU0gdkCy2SKXTmIZGKZ+lXD//adBzgEth
      IRzycRQ9Ymp2HoD0cZyRa5PYLfD86WPsvqvoDwZgZ6DfTvQ0z/TUOACi1YlXVEkmC0TGhsHU
      ie9v8uQP/4v9bIP9gxil1CmltgxWByGvjehRmtmZMez+AB5vGKdFon9wGJft7Nbwh4fwuy7e
      Kqai66RlBxGfg3K5RL2cYG8/xf7GNuVynN2jLHsvNijXMvzpyTLZUh0TcHj7cTRSCP0jP9Hr
      wTQ4iW4TTdXwOBvsbGeppeOkKo0LbRmZmqaUiqOZJqXUAUfJInvPn9M4x3d6DnApdE5iJwxP
      LzAQ9GKqLcqKk7DXSkfSefDplxi1POfkW34BFA4OU8wuLBL0/lmqSiQU9nEYzxMJeNClLrKz
      n49uTdCSRYLOLjvJJgN+F+gSRydZphduEPR7UOpVWs08Xf2fU8sLYwt3GXfKZKvfP2mtdqbn
      Fpga6keROoTHZ4kEPNicfTy4f5tKLoGqg9QoofVPo+XjqC/vRgWB0MAIi+/fZ7zPjWFotBp1
      tLfYsQo2L+NejXi5gyJ1iYzNEHYJnCcV+v8AMy/Kws9mLYIAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Team Statistics' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Toss_vs_Outcome' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Win by Wickets Distribution' width='192'>
      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
      siutzfRGTP4fcpoErwYhVZYAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Win%(Home_vs_Away)' width='192'>
      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
      j0aXgfiG7tEAAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
